
flyBack-converter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006840  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080069e0  080069e0  000079e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a64  08006a64  0000805c  2**0
                  CONTENTS
  4 .ARM          00000008  08006a64  08006a64  00007a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a6c  08006a6c  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a6c  08006a6c  00007a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006a70  08006a70  00007a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08006a74  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f0  2000005c  08006ad0  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000034c  08006ad0  0000834c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014572  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002686  00000000  00000000  0001c5fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001238  00000000  00000000  0001ec88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e31  00000000  00000000  0001fec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024849  00000000  00000000  00020cf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014721  00000000  00000000  0004553a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8a72  00000000  00000000  00059c5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001426cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005324  00000000  00000000  00142710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00147a34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080069c8 	.word	0x080069c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080069c8 	.word	0x080069c8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <startPump>:
extern TIM_HandleTypeDef htim15;
extern ADC_HandleTypeDef hadc1;


void startPump()
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_IT(&htim15, TIM_CHANNEL_1);
 8000584:	2100      	movs	r1, #0
 8000586:	4802      	ldr	r0, [pc, #8]	@ (8000590 <startPump+0x10>)
 8000588:	f003 fdde 	bl	8004148 <HAL_TIM_PWM_Start_IT>
	//HAL_GPIO_WritePin(COUNTER_ENABLE_PORT, COUNTER_ENABLE_PIN, DISAB);
}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}
 8000590:	200000e0 	.word	0x200000e0

08000594 <stopPump>:

void stopPump()
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop_IT(&htim15, TIM_CHANNEL_1);
 8000598:	2100      	movs	r1, #0
 800059a:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <stopPump+0x10>)
 800059c:	f003 ff06 	bl	80043ac <HAL_TIM_PWM_Stop_IT>
	//HAL_GPIO_WritePin(COUNTER_ENABLE_PORT, COUNTER_ENABLE_PIN, EN);
}
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	200000e0 	.word	0x200000e0

080005a8 <startADC>:

void startADC()
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	HAL_ADC_Start_IT(&hadc1);
 80005ac:	4802      	ldr	r0, [pc, #8]	@ (80005b8 <startADC+0x10>)
 80005ae:	f001 f84b 	bl	8001648 <HAL_ADC_Start_IT>
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	20000078 	.word	0x20000078

080005bc <measureHV>:
{
	HAL_ADC_Stop_IT(&hadc1);
}

uint16_t measureHV()
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	return HAL_ADC_GetValue(&hadc1);
 80005c0:	4803      	ldr	r0, [pc, #12]	@ (80005d0 <measureHV+0x14>)
 80005c2:	f001 f8f5 	bl	80017b0 <HAL_ADC_GetValue>
 80005c6:	4603      	mov	r3, r0
 80005c8:	b29b      	uxth	r3, r3
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20000078 	.word	0x20000078

080005d4 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
	{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	    if(hadc->Instance == ADC1) //check if the interrupt comes from ACD1
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a07      	ldr	r2, [pc, #28]	@ (8000600 <HAL_ADC_ConvCpltCallback+0x2c>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d108      	bne.n	80005f8 <HAL_ADC_ConvCpltCallback+0x24>
	    {
	        adc = measureHV();
 80005e6:	f7ff ffe9 	bl	80005bc <measureHV>
 80005ea:	4603      	mov	r3, r0
 80005ec:	461a      	mov	r2, r3
 80005ee:	4b05      	ldr	r3, [pc, #20]	@ (8000604 <HAL_ADC_ConvCpltCallback+0x30>)
 80005f0:	801a      	strh	r2, [r3, #0]
	        enableDataTransmit = true;
 80005f2:	4b05      	ldr	r3, [pc, #20]	@ (8000608 <HAL_ADC_ConvCpltCallback+0x34>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	701a      	strb	r2, [r3, #0]
	    }
	}
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	50040000 	.word	0x50040000
 8000604:	200001f8 	.word	0x200001f8
 8000608:	200001b4 	.word	0x200001b4

0800060c <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
	{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	        if(htim->Instance == TIM15)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a05      	ldr	r2, [pc, #20]	@ (8000630 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d103      	bne.n	8000626 <HAL_TIM_PWM_PulseFinishedCallback+0x1a>
	        {
	        	stopPump();
 800061e:	f7ff ffb9 	bl	8000594 <stopPump>
	        	startADC();
 8000622:	f7ff ffc1 	bl	80005a8 <startADC>

	        	//HAL_TIM_PWM_Start_IT(&htim15, TIM_CHANNEL_1);
	        }
	}
 8000626:	bf00      	nop
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40014000 	.word	0x40014000

08000634 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800063a:	f000 fc36 	bl	8000eaa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063e:	f000 f85b 	bl	80006f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000642:	f000 f9eb 	bl	8000a1c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000646:	f000 f9b9 	bl	80009bc <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800064a:	f000 f8a7 	bl	800079c <MX_ADC1_Init>
  MX_TIM15_Init();
 800064e:	f000 f909 	bl	8000864 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000652:	217f      	movs	r1, #127	@ 0x7f
 8000654:	4821      	ldr	r0, [pc, #132]	@ (80006dc <main+0xa8>)
 8000656:	f001 ff8f 	bl	8002578 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_IT(&hadc1);
 800065a:	4820      	ldr	r0, [pc, #128]	@ (80006dc <main+0xa8>)
 800065c:	f000 fff4 	bl	8001648 <HAL_ADC_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim15, TIM_CHANNEL_1);
 8000660:	2100      	movs	r1, #0
 8000662:	481f      	ldr	r0, [pc, #124]	@ (80006e0 <main+0xac>)
 8000664:	f003 fd70 	bl	8004148 <HAL_TIM_PWM_Start_IT>
  uint32_t checkTimer = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(measureHV() < 1500)
 800066c:	f7ff ffa6 	bl	80005bc <measureHV>
 8000670:	4603      	mov	r3, r0
 8000672:	461a      	mov	r2, r3
 8000674:	f240 53db 	movw	r3, #1499	@ 0x5db
 8000678:	429a      	cmp	r2, r3
 800067a:	d802      	bhi.n	8000682 <main+0x4e>
	  {
	  			  startPump();
 800067c:	f7ff ff80 	bl	8000580 <startPump>
 8000680:	e001      	b.n	8000686 <main+0x52>
	  }
	  else
	  {
		  stopPump();
 8000682:	f7ff ff87 	bl	8000594 <stopPump>
	  }
	  if(enableDataTransmit == true)
 8000686:	4b17      	ldr	r3, [pc, #92]	@ (80006e4 <main+0xb0>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d018      	beq.n	80006c0 <main+0x8c>
	  {

		  snprintf(trans_str, 63, "ADC %d\n", (uint16_t)adc);
 800068e:	4b16      	ldr	r3, [pc, #88]	@ (80006e8 <main+0xb4>)
 8000690:	881b      	ldrh	r3, [r3, #0]
 8000692:	b29b      	uxth	r3, r3
 8000694:	4a15      	ldr	r2, [pc, #84]	@ (80006ec <main+0xb8>)
 8000696:	213f      	movs	r1, #63	@ 0x3f
 8000698:	4815      	ldr	r0, [pc, #84]	@ (80006f0 <main+0xbc>)
 800069a:	f005 fce1 	bl	8006060 <sniprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 800069e:	4814      	ldr	r0, [pc, #80]	@ (80006f0 <main+0xbc>)
 80006a0:	f7ff fd9e 	bl	80001e0 <strlen>
 80006a4:	4603      	mov	r3, r0
 80006a6:	b29a      	uxth	r2, r3
 80006a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006ac:	4910      	ldr	r1, [pc, #64]	@ (80006f0 <main+0xbc>)
 80006ae:	4811      	ldr	r0, [pc, #68]	@ (80006f4 <main+0xc0>)
 80006b0:	f004 ffb0 	bl	8005614 <HAL_UART_Transmit>
		  adc = 0;
 80006b4:	4b0c      	ldr	r3, [pc, #48]	@ (80006e8 <main+0xb4>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	801a      	strh	r2, [r3, #0]
		  enableDataTransmit = 0;
 80006ba:	4b0a      	ldr	r3, [pc, #40]	@ (80006e4 <main+0xb0>)
 80006bc:	2200      	movs	r2, #0
 80006be:	701a      	strb	r2, [r3, #0]
	  }
	  if(HAL_GetTick() - checkTimer >= 1000)
 80006c0:	f000 fc5c 	bl	8000f7c <HAL_GetTick>
 80006c4:	4602      	mov	r2, r0
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	1ad3      	subs	r3, r2, r3
 80006ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80006ce:	d3cd      	bcc.n	800066c <main+0x38>
	  {
		  checkTimer = HAL_GetTick();
 80006d0:	f000 fc54 	bl	8000f7c <HAL_GetTick>
 80006d4:	6078      	str	r0, [r7, #4]
		  startADC();
 80006d6:	f7ff ff67 	bl	80005a8 <startADC>
	  if(measureHV() < 1500)
 80006da:	e7c7      	b.n	800066c <main+0x38>
 80006dc:	20000078 	.word	0x20000078
 80006e0:	200000e0 	.word	0x200000e0
 80006e4:	200001b4 	.word	0x200001b4
 80006e8:	200001f8 	.word	0x200001f8
 80006ec:	080069e0 	.word	0x080069e0
 80006f0:	200001b8 	.word	0x200001b8
 80006f4:	2000012c 	.word	0x2000012c

080006f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b096      	sub	sp, #88	@ 0x58
 80006fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	2244      	movs	r2, #68	@ 0x44
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f005 fcde 	bl	80060c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070c:	463b      	mov	r3, r7
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
 8000718:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800071a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800071e:	f002 fa6f 	bl	8002c00 <HAL_PWREx_ControlVoltageScaling>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000728:	f000 f9b8 	bl	8000a9c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800072c:	2302      	movs	r3, #2
 800072e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000730:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000734:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000736:	2340      	movs	r3, #64	@ 0x40
 8000738:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073a:	2302      	movs	r3, #2
 800073c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800073e:	2302      	movs	r3, #2
 8000740:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000742:	2302      	movs	r3, #2
 8000744:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000746:	2314      	movs	r3, #20
 8000748:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800074a:	2307      	movs	r3, #7
 800074c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800074e:	2302      	movs	r3, #2
 8000750:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 8000752:	2308      	movs	r3, #8
 8000754:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000756:	f107 0314 	add.w	r3, r7, #20
 800075a:	4618      	mov	r0, r3
 800075c:	f002 faa6 	bl	8002cac <HAL_RCC_OscConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000766:	f000 f999 	bl	8000a9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076a:	230f      	movs	r3, #15
 800076c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076e:	2303      	movs	r3, #3
 8000770:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000772:	2380      	movs	r3, #128	@ 0x80
 8000774:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800077e:	463b      	mov	r3, r7
 8000780:	2100      	movs	r1, #0
 8000782:	4618      	mov	r0, r3
 8000784:	f002 fea6 	bl	80034d4 <HAL_RCC_ClockConfig>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800078e:	f000 f985 	bl	8000a9c <Error_Handler>
  }
}
 8000792:	bf00      	nop
 8000794:	3758      	adds	r7, #88	@ 0x58
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
	...

0800079c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b086      	sub	sp, #24
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007a2:	463b      	mov	r3, r7
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]
 80007b0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007b2:	4b29      	ldr	r3, [pc, #164]	@ (8000858 <MX_ADC1_Init+0xbc>)
 80007b4:	4a29      	ldr	r2, [pc, #164]	@ (800085c <MX_ADC1_Init+0xc0>)
 80007b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007b8:	4b27      	ldr	r3, [pc, #156]	@ (8000858 <MX_ADC1_Init+0xbc>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007be:	4b26      	ldr	r3, [pc, #152]	@ (8000858 <MX_ADC1_Init+0xbc>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007c4:	4b24      	ldr	r3, [pc, #144]	@ (8000858 <MX_ADC1_Init+0xbc>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007ca:	4b23      	ldr	r3, [pc, #140]	@ (8000858 <MX_ADC1_Init+0xbc>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007d0:	4b21      	ldr	r3, [pc, #132]	@ (8000858 <MX_ADC1_Init+0xbc>)
 80007d2:	2204      	movs	r2, #4
 80007d4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007d6:	4b20      	ldr	r3, [pc, #128]	@ (8000858 <MX_ADC1_Init+0xbc>)
 80007d8:	2200      	movs	r2, #0
 80007da:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000858 <MX_ADC1_Init+0xbc>)
 80007de:	2200      	movs	r2, #0
 80007e0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80007e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000858 <MX_ADC1_Init+0xbc>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000858 <MX_ADC1_Init+0xbc>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007f0:	4b19      	ldr	r3, [pc, #100]	@ (8000858 <MX_ADC1_Init+0xbc>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007f6:	4b18      	ldr	r3, [pc, #96]	@ (8000858 <MX_ADC1_Init+0xbc>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007fc:	4b16      	ldr	r3, [pc, #88]	@ (8000858 <MX_ADC1_Init+0xbc>)
 80007fe:	2200      	movs	r2, #0
 8000800:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000804:	4b14      	ldr	r3, [pc, #80]	@ (8000858 <MX_ADC1_Init+0xbc>)
 8000806:	2200      	movs	r2, #0
 8000808:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800080a:	4b13      	ldr	r3, [pc, #76]	@ (8000858 <MX_ADC1_Init+0xbc>)
 800080c:	2200      	movs	r2, #0
 800080e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000812:	4811      	ldr	r0, [pc, #68]	@ (8000858 <MX_ADC1_Init+0xbc>)
 8000814:	f000 fdd2 	bl	80013bc <HAL_ADC_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800081e:	f000 f93d 	bl	8000a9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000822:	4b0f      	ldr	r3, [pc, #60]	@ (8000860 <MX_ADC1_Init+0xc4>)
 8000824:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000826:	2306      	movs	r3, #6
 8000828:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800082a:	2300      	movs	r3, #0
 800082c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800082e:	237f      	movs	r3, #127	@ 0x7f
 8000830:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000832:	2304      	movs	r3, #4
 8000834:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000836:	2300      	movs	r3, #0
 8000838:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800083a:	463b      	mov	r3, r7
 800083c:	4619      	mov	r1, r3
 800083e:	4806      	ldr	r0, [pc, #24]	@ (8000858 <MX_ADC1_Init+0xbc>)
 8000840:	f001 f98c 	bl	8001b5c <HAL_ADC_ConfigChannel>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800084a:	f000 f927 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	3718      	adds	r7, #24
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000078 	.word	0x20000078
 800085c:	50040000 	.word	0x50040000
 8000860:	04300002 	.word	0x04300002

08000864 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b09a      	sub	sp, #104	@ 0x68
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800086a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000878:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000884:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]
 8000894:	615a      	str	r2, [r3, #20]
 8000896:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	222c      	movs	r2, #44	@ 0x2c
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f005 fc12 	bl	80060c8 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80008a4:	4b43      	ldr	r3, [pc, #268]	@ (80009b4 <MX_TIM15_Init+0x150>)
 80008a6:	4a44      	ldr	r2, [pc, #272]	@ (80009b8 <MX_TIM15_Init+0x154>)
 80008a8:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80008aa:	4b42      	ldr	r3, [pc, #264]	@ (80009b4 <MX_TIM15_Init+0x150>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b0:	4b40      	ldr	r3, [pc, #256]	@ (80009b4 <MX_TIM15_Init+0x150>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1000-1;
 80008b6:	4b3f      	ldr	r3, [pc, #252]	@ (80009b4 <MX_TIM15_Init+0x150>)
 80008b8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008bc:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008be:	4b3d      	ldr	r3, [pc, #244]	@ (80009b4 <MX_TIM15_Init+0x150>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80008c4:	4b3b      	ldr	r3, [pc, #236]	@ (80009b4 <MX_TIM15_Init+0x150>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ca:	4b3a      	ldr	r3, [pc, #232]	@ (80009b4 <MX_TIM15_Init+0x150>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80008d0:	4838      	ldr	r0, [pc, #224]	@ (80009b4 <MX_TIM15_Init+0x150>)
 80008d2:	f003 fb81 	bl	8003fd8 <HAL_TIM_Base_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 80008dc:	f000 f8de 	bl	8000a9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008e4:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80008e6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80008ea:	4619      	mov	r1, r3
 80008ec:	4831      	ldr	r0, [pc, #196]	@ (80009b4 <MX_TIM15_Init+0x150>)
 80008ee:	f004 f8a1 	bl	8004a34 <HAL_TIM_ConfigClockSource>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 80008f8:	f000 f8d0 	bl	8000a9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80008fc:	482d      	ldr	r0, [pc, #180]	@ (80009b4 <MX_TIM15_Init+0x150>)
 80008fe:	f003 fbc2 	bl	8004086 <HAL_TIM_PWM_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8000908:	f000 f8c8 	bl	8000a9c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim15, TIM_OPMODE_SINGLE) != HAL_OK)
 800090c:	2108      	movs	r1, #8
 800090e:	4829      	ldr	r0, [pc, #164]	@ (80009b4 <MX_TIM15_Init+0x150>)
 8000910:	f003 fe20 	bl	8004554 <HAL_TIM_OnePulse_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_TIM15_Init+0xba>
  {
    Error_Handler();
 800091a:	f000 f8bf 	bl	8000a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800091e:	2300      	movs	r3, #0
 8000920:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000922:	2300      	movs	r3, #0
 8000924:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000926:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800092a:	4619      	mov	r1, r3
 800092c:	4821      	ldr	r0, [pc, #132]	@ (80009b4 <MX_TIM15_Init+0x150>)
 800092e:	f004 fd1f 	bl	8005370 <HAL_TIMEx_MasterConfigSynchronization>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8000938:	f000 f8b0 	bl	8000a9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800093c:	2360      	movs	r3, #96	@ 0x60
 800093e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 972;
 8000940:	f44f 7373 	mov.w	r3, #972	@ 0x3cc
 8000944:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000946:	2302      	movs	r3, #2
 8000948:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800094a:	2300      	movs	r3, #0
 800094c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800094e:	2300      	movs	r3, #0
 8000950:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000952:	2300      	movs	r3, #0
 8000954:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000956:	2300      	movs	r3, #0
 8000958:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800095a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800095e:	2200      	movs	r2, #0
 8000960:	4619      	mov	r1, r3
 8000962:	4814      	ldr	r0, [pc, #80]	@ (80009b4 <MX_TIM15_Init+0x150>)
 8000964:	f003 ff52 	bl	800480c <HAL_TIM_PWM_ConfigChannel>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 800096e:	f000 f895 	bl	8000a9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000972:	2300      	movs	r3, #0
 8000974:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000976:	2300      	movs	r3, #0
 8000978:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000982:	2300      	movs	r3, #0
 8000984:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000986:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800098a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800098c:	2300      	movs	r3, #0
 800098e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	4619      	mov	r1, r3
 8000994:	4807      	ldr	r0, [pc, #28]	@ (80009b4 <MX_TIM15_Init+0x150>)
 8000996:	f004 fd59 	bl	800544c <HAL_TIMEx_ConfigBreakDeadTime>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM15_Init+0x140>
  {
    Error_Handler();
 80009a0:	f000 f87c 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80009a4:	4803      	ldr	r0, [pc, #12]	@ (80009b4 <MX_TIM15_Init+0x150>)
 80009a6:	f000 f939 	bl	8000c1c <HAL_TIM_MspPostInit>

}
 80009aa:	bf00      	nop
 80009ac:	3768      	adds	r7, #104	@ 0x68
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	200000e0 	.word	0x200000e0
 80009b8:	40014000 	.word	0x40014000

080009bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009c0:	4b14      	ldr	r3, [pc, #80]	@ (8000a14 <MX_USART1_UART_Init+0x58>)
 80009c2:	4a15      	ldr	r2, [pc, #84]	@ (8000a18 <MX_USART1_UART_Init+0x5c>)
 80009c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009c6:	4b13      	ldr	r3, [pc, #76]	@ (8000a14 <MX_USART1_UART_Init+0x58>)
 80009c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009ce:	4b11      	ldr	r3, [pc, #68]	@ (8000a14 <MX_USART1_UART_Init+0x58>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a14 <MX_USART1_UART_Init+0x58>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009da:	4b0e      	ldr	r3, [pc, #56]	@ (8000a14 <MX_USART1_UART_Init+0x58>)
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000a14 <MX_USART1_UART_Init+0x58>)
 80009e2:	220c      	movs	r2, #12
 80009e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000a14 <MX_USART1_UART_Init+0x58>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ec:	4b09      	ldr	r3, [pc, #36]	@ (8000a14 <MX_USART1_UART_Init+0x58>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009f2:	4b08      	ldr	r3, [pc, #32]	@ (8000a14 <MX_USART1_UART_Init+0x58>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009f8:	4b06      	ldr	r3, [pc, #24]	@ (8000a14 <MX_USART1_UART_Init+0x58>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009fe:	4805      	ldr	r0, [pc, #20]	@ (8000a14 <MX_USART1_UART_Init+0x58>)
 8000a00:	f004 fdba 	bl	8005578 <HAL_UART_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a0a:	f000 f847 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	2000012c 	.word	0x2000012c
 8000a18:	40013800 	.word	0x40013800

08000a1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b088      	sub	sp, #32
 8000a20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a22:	f107 030c 	add.w	r3, r7, #12
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]
 8000a30:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a32:	4b18      	ldr	r3, [pc, #96]	@ (8000a94 <MX_GPIO_Init+0x78>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a36:	4a17      	ldr	r2, [pc, #92]	@ (8000a94 <MX_GPIO_Init+0x78>)
 8000a38:	f043 0304 	orr.w	r3, r3, #4
 8000a3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a3e:	4b15      	ldr	r3, [pc, #84]	@ (8000a94 <MX_GPIO_Init+0x78>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a42:	f003 0304 	and.w	r3, r3, #4
 8000a46:	60bb      	str	r3, [r7, #8]
 8000a48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	4b12      	ldr	r3, [pc, #72]	@ (8000a94 <MX_GPIO_Init+0x78>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4e:	4a11      	ldr	r2, [pc, #68]	@ (8000a94 <MX_GPIO_Init+0x78>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a56:	4b0f      	ldr	r3, [pc, #60]	@ (8000a94 <MX_GPIO_Init+0x78>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a62:	2200      	movs	r2, #0
 8000a64:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a68:	480b      	ldr	r0, [pc, #44]	@ (8000a98 <MX_GPIO_Init+0x7c>)
 8000a6a:	f002 f8a3 	bl	8002bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a6e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a74:	2301      	movs	r3, #1
 8000a76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a80:	f107 030c 	add.w	r3, r7, #12
 8000a84:	4619      	mov	r1, r3
 8000a86:	4804      	ldr	r0, [pc, #16]	@ (8000a98 <MX_GPIO_Init+0x7c>)
 8000a88:	f001 ff1a 	bl	80028c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a8c:	bf00      	nop
 8000a8e:	3720      	adds	r7, #32
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40021000 	.word	0x40021000
 8000a98:	48000800 	.word	0x48000800

08000a9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa0:	b672      	cpsid	i
}
 8000aa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <Error_Handler+0x8>

08000aa8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aae:	4b0f      	ldr	r3, [pc, #60]	@ (8000aec <HAL_MspInit+0x44>)
 8000ab0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ab2:	4a0e      	ldr	r2, [pc, #56]	@ (8000aec <HAL_MspInit+0x44>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000aba:	4b0c      	ldr	r3, [pc, #48]	@ (8000aec <HAL_MspInit+0x44>)
 8000abc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac6:	4b09      	ldr	r3, [pc, #36]	@ (8000aec <HAL_MspInit+0x44>)
 8000ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aca:	4a08      	ldr	r2, [pc, #32]	@ (8000aec <HAL_MspInit+0x44>)
 8000acc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ad0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ad2:	4b06      	ldr	r3, [pc, #24]	@ (8000aec <HAL_MspInit+0x44>)
 8000ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ad6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ada:	603b      	str	r3, [r7, #0]
 8000adc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	40021000 	.word	0x40021000

08000af0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b0a4      	sub	sp, #144	@ 0x90
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	2268      	movs	r2, #104	@ 0x68
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4618      	mov	r0, r3
 8000b12:	f005 fad9 	bl	80060c8 <memset>
  if(hadc->Instance==ADC1)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a2a      	ldr	r2, [pc, #168]	@ (8000bc4 <HAL_ADC_MspInit+0xd4>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d14c      	bne.n	8000bba <HAL_ADC_MspInit+0xca>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b20:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000b24:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000b26:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000b2a:	673b      	str	r3, [r7, #112]	@ 0x70
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 8000b30:	2302      	movs	r3, #2
 8000b32:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 10;
 8000b34:	230a      	movs	r3, #10
 8000b36:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000b38:	2307      	movs	r3, #7
 8000b3a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV8;
 8000b40:	2308      	movs	r3, #8
 8000b42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000b44:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000b48:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f002 fee4 	bl	800391c <HAL_RCCEx_PeriphCLKConfig>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000b5a:	f7ff ff9f 	bl	8000a9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000b5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000bc8 <HAL_ADC_MspInit+0xd8>)
 8000b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b62:	4a19      	ldr	r2, [pc, #100]	@ (8000bc8 <HAL_ADC_MspInit+0xd8>)
 8000b64:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000b68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b6a:	4b17      	ldr	r3, [pc, #92]	@ (8000bc8 <HAL_ADC_MspInit+0xd8>)
 8000b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b76:	4b14      	ldr	r3, [pc, #80]	@ (8000bc8 <HAL_ADC_MspInit+0xd8>)
 8000b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b7a:	4a13      	ldr	r2, [pc, #76]	@ (8000bc8 <HAL_ADC_MspInit+0xd8>)
 8000b7c:	f043 0304 	orr.w	r3, r3, #4
 8000b80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b82:	4b11      	ldr	r3, [pc, #68]	@ (8000bc8 <HAL_ADC_MspInit+0xd8>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b86:	f003 0304 	and.w	r3, r3, #4
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b92:	230b      	movs	r3, #11
 8000b94:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b9e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4809      	ldr	r0, [pc, #36]	@ (8000bcc <HAL_ADC_MspInit+0xdc>)
 8000ba6:	f001 fe8b 	bl	80028c0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2100      	movs	r1, #0
 8000bae:	2012      	movs	r0, #18
 8000bb0:	f001 fe4f 	bl	8002852 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000bb4:	2012      	movs	r0, #18
 8000bb6:	f001 fe68 	bl	800288a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000bba:	bf00      	nop
 8000bbc:	3790      	adds	r7, #144	@ 0x90
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	50040000 	.word	0x50040000
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	48000800 	.word	0x48000800

08000bd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a0d      	ldr	r2, [pc, #52]	@ (8000c14 <HAL_TIM_Base_MspInit+0x44>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d113      	bne.n	8000c0a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000be2:	4b0d      	ldr	r3, [pc, #52]	@ (8000c18 <HAL_TIM_Base_MspInit+0x48>)
 8000be4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000be6:	4a0c      	ldr	r2, [pc, #48]	@ (8000c18 <HAL_TIM_Base_MspInit+0x48>)
 8000be8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000bec:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bee:	4b0a      	ldr	r3, [pc, #40]	@ (8000c18 <HAL_TIM_Base_MspInit+0x48>)
 8000bf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bf2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	2018      	movs	r0, #24
 8000c00:	f001 fe27 	bl	8002852 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000c04:	2018      	movs	r0, #24
 8000c06:	f001 fe40 	bl	800288a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000c0a:	bf00      	nop
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40014000 	.word	0x40014000
 8000c18:	40021000 	.word	0x40021000

08000c1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b088      	sub	sp, #32
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 030c 	add.w	r3, r7, #12
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM15)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a11      	ldr	r2, [pc, #68]	@ (8000c80 <HAL_TIM_MspPostInit+0x64>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d11c      	bne.n	8000c78 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3e:	4b11      	ldr	r3, [pc, #68]	@ (8000c84 <HAL_TIM_MspPostInit+0x68>)
 8000c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c42:	4a10      	ldr	r2, [pc, #64]	@ (8000c84 <HAL_TIM_MspPostInit+0x68>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c84 <HAL_TIM_MspPostInit+0x68>)
 8000c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	68bb      	ldr	r3, [r7, #8]
    /**TIM15 GPIO Configuration
    PA2     ------> TIM15_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c56:	2304      	movs	r3, #4
 8000c58:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8000c66:	230e      	movs	r3, #14
 8000c68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6a:	f107 030c 	add.w	r3, r7, #12
 8000c6e:	4619      	mov	r1, r3
 8000c70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c74:	f001 fe24 	bl	80028c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8000c78:	bf00      	nop
 8000c7a:	3720      	adds	r7, #32
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40014000 	.word	0x40014000
 8000c84:	40021000 	.word	0x40021000

08000c88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b0a4      	sub	sp, #144	@ 0x90
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c90:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	2268      	movs	r2, #104	@ 0x68
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f005 fa0d 	bl	80060c8 <memset>
  if(huart->Instance==USART1)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a21      	ldr	r2, [pc, #132]	@ (8000d38 <HAL_UART_MspInit+0xb0>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d13b      	bne.n	8000d30 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f002 fe29 	bl	800391c <HAL_RCCEx_PeriphCLKConfig>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cd0:	f7ff fee4 	bl	8000a9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cd4:	4b19      	ldr	r3, [pc, #100]	@ (8000d3c <HAL_UART_MspInit+0xb4>)
 8000cd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cd8:	4a18      	ldr	r2, [pc, #96]	@ (8000d3c <HAL_UART_MspInit+0xb4>)
 8000cda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cde:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ce0:	4b16      	ldr	r3, [pc, #88]	@ (8000d3c <HAL_UART_MspInit+0xb4>)
 8000ce2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ce4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ce8:	613b      	str	r3, [r7, #16]
 8000cea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cec:	4b13      	ldr	r3, [pc, #76]	@ (8000d3c <HAL_UART_MspInit+0xb4>)
 8000cee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf0:	4a12      	ldr	r2, [pc, #72]	@ (8000d3c <HAL_UART_MspInit+0xb4>)
 8000cf2:	f043 0301 	orr.w	r3, r3, #1
 8000cf6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cf8:	4b10      	ldr	r3, [pc, #64]	@ (8000d3c <HAL_UART_MspInit+0xb4>)
 8000cfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cfc:	f003 0301 	and.w	r3, r3, #1
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d04:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d08:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d16:	2303      	movs	r3, #3
 8000d18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d1c:	2307      	movs	r3, #7
 8000d1e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d22:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000d26:	4619      	mov	r1, r3
 8000d28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d2c:	f001 fdc8 	bl	80028c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d30:	bf00      	nop
 8000d32:	3790      	adds	r7, #144	@ 0x90
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40013800 	.word	0x40013800
 8000d3c:	40021000 	.word	0x40021000

08000d40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d44:	bf00      	nop
 8000d46:	e7fd      	b.n	8000d44 <NMI_Handler+0x4>

08000d48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d4c:	bf00      	nop
 8000d4e:	e7fd      	b.n	8000d4c <HardFault_Handler+0x4>

08000d50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d54:	bf00      	nop
 8000d56:	e7fd      	b.n	8000d54 <MemManage_Handler+0x4>

08000d58 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d5c:	bf00      	nop
 8000d5e:	e7fd      	b.n	8000d5c <BusFault_Handler+0x4>

08000d60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <UsageFault_Handler+0x4>

08000d68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr

08000d76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d96:	f000 f8dd 	bl	8000f54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
	...

08000da0 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000da4:	4802      	ldr	r0, [pc, #8]	@ (8000db0 <ADC1_IRQHandler+0x10>)
 8000da6:	f000 fd10 	bl	80017ca <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20000078 	.word	0x20000078

08000db4 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8000db8:	4802      	ldr	r0, [pc, #8]	@ (8000dc4 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8000dba:	f003 fc25 	bl	8004608 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	200000e0 	.word	0x200000e0

08000dc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dd0:	4a14      	ldr	r2, [pc, #80]	@ (8000e24 <_sbrk+0x5c>)
 8000dd2:	4b15      	ldr	r3, [pc, #84]	@ (8000e28 <_sbrk+0x60>)
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ddc:	4b13      	ldr	r3, [pc, #76]	@ (8000e2c <_sbrk+0x64>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d102      	bne.n	8000dea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000de4:	4b11      	ldr	r3, [pc, #68]	@ (8000e2c <_sbrk+0x64>)
 8000de6:	4a12      	ldr	r2, [pc, #72]	@ (8000e30 <_sbrk+0x68>)
 8000de8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dea:	4b10      	ldr	r3, [pc, #64]	@ (8000e2c <_sbrk+0x64>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4413      	add	r3, r2
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d207      	bcs.n	8000e08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000df8:	f005 f96e 	bl	80060d8 <__errno>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	220c      	movs	r2, #12
 8000e00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e02:	f04f 33ff 	mov.w	r3, #4294967295
 8000e06:	e009      	b.n	8000e1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e08:	4b08      	ldr	r3, [pc, #32]	@ (8000e2c <_sbrk+0x64>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e0e:	4b07      	ldr	r3, [pc, #28]	@ (8000e2c <_sbrk+0x64>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4413      	add	r3, r2
 8000e16:	4a05      	ldr	r2, [pc, #20]	@ (8000e2c <_sbrk+0x64>)
 8000e18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3718      	adds	r7, #24
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20028000 	.word	0x20028000
 8000e28:	00000400 	.word	0x00000400
 8000e2c:	200001fc 	.word	0x200001fc
 8000e30:	20000350 	.word	0x20000350

08000e34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e38:	4b06      	ldr	r3, [pc, #24]	@ (8000e54 <SystemInit+0x20>)
 8000e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e3e:	4a05      	ldr	r2, [pc, #20]	@ (8000e54 <SystemInit+0x20>)
 8000e40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e90 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e5c:	f7ff ffea 	bl	8000e34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e60:	480c      	ldr	r0, [pc, #48]	@ (8000e94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e62:	490d      	ldr	r1, [pc, #52]	@ (8000e98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e64:	4a0d      	ldr	r2, [pc, #52]	@ (8000e9c <LoopForever+0xe>)
  movs r3, #0
 8000e66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e68:	e002      	b.n	8000e70 <LoopCopyDataInit>

08000e6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6e:	3304      	adds	r3, #4

08000e70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e74:	d3f9      	bcc.n	8000e6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e76:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e78:	4c0a      	ldr	r4, [pc, #40]	@ (8000ea4 <LoopForever+0x16>)
  movs r3, #0
 8000e7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e7c:	e001      	b.n	8000e82 <LoopFillZerobss>

08000e7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e80:	3204      	adds	r2, #4

08000e82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e84:	d3fb      	bcc.n	8000e7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e86:	f005 f92d 	bl	80060e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e8a:	f7ff fbd3 	bl	8000634 <main>

08000e8e <LoopForever>:

LoopForever:
    b LoopForever
 8000e8e:	e7fe      	b.n	8000e8e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e90:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8000e94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e98:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e9c:	08006a74 	.word	0x08006a74
  ldr r2, =_sbss
 8000ea0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000ea4:	2000034c 	.word	0x2000034c

08000ea8 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ea8:	e7fe      	b.n	8000ea8 <CAN1_RX0_IRQHandler>

08000eaa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b082      	sub	sp, #8
 8000eae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb4:	2003      	movs	r0, #3
 8000eb6:	f001 fcc1 	bl	800283c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eba:	200f      	movs	r0, #15
 8000ebc:	f000 f80e 	bl	8000edc <HAL_InitTick>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d002      	beq.n	8000ecc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	71fb      	strb	r3, [r7, #7]
 8000eca:	e001      	b.n	8000ed0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ecc:	f7ff fdec 	bl	8000aa8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ee8:	4b17      	ldr	r3, [pc, #92]	@ (8000f48 <HAL_InitTick+0x6c>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d023      	beq.n	8000f38 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ef0:	4b16      	ldr	r3, [pc, #88]	@ (8000f4c <HAL_InitTick+0x70>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4b14      	ldr	r3, [pc, #80]	@ (8000f48 <HAL_InitTick+0x6c>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000efe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f06:	4618      	mov	r0, r3
 8000f08:	f001 fccd 	bl	80028a6 <HAL_SYSTICK_Config>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d10f      	bne.n	8000f32 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2b0f      	cmp	r3, #15
 8000f16:	d809      	bhi.n	8000f2c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	6879      	ldr	r1, [r7, #4]
 8000f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f20:	f001 fc97 	bl	8002852 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f24:	4a0a      	ldr	r2, [pc, #40]	@ (8000f50 <HAL_InitTick+0x74>)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6013      	str	r3, [r2, #0]
 8000f2a:	e007      	b.n	8000f3c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	73fb      	strb	r3, [r7, #15]
 8000f30:	e004      	b.n	8000f3c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	73fb      	strb	r3, [r7, #15]
 8000f36:	e001      	b.n	8000f3c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000008 	.word	0x20000008
 8000f4c:	20000000 	.word	0x20000000
 8000f50:	20000004 	.word	0x20000004

08000f54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f58:	4b06      	ldr	r3, [pc, #24]	@ (8000f74 <HAL_IncTick+0x20>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4b06      	ldr	r3, [pc, #24]	@ (8000f78 <HAL_IncTick+0x24>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4413      	add	r3, r2
 8000f64:	4a04      	ldr	r2, [pc, #16]	@ (8000f78 <HAL_IncTick+0x24>)
 8000f66:	6013      	str	r3, [r2, #0]
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	20000008 	.word	0x20000008
 8000f78:	20000200 	.word	0x20000200

08000f7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f80:	4b03      	ldr	r3, [pc, #12]	@ (8000f90 <HAL_GetTick+0x14>)
 8000f82:	681b      	ldr	r3, [r3, #0]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	20000200 	.word	0x20000200

08000f94 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	431a      	orrs	r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	609a      	str	r2, [r3, #8]
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	b083      	sub	sp, #12
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
 8000fc2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	431a      	orrs	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b087      	sub	sp, #28
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
 8001008:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	3360      	adds	r3, #96	@ 0x60
 800100e:	461a      	mov	r2, r3
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	4413      	add	r3, r2
 8001016:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b08      	ldr	r3, [pc, #32]	@ (8001040 <LL_ADC_SetOffset+0x44>)
 800101e:	4013      	ands	r3, r2
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001026:	683a      	ldr	r2, [r7, #0]
 8001028:	430a      	orrs	r2, r1
 800102a:	4313      	orrs	r3, r2
 800102c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001034:	bf00      	nop
 8001036:	371c      	adds	r7, #28
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	03fff000 	.word	0x03fff000

08001044 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	3360      	adds	r3, #96	@ 0x60
 8001052:	461a      	mov	r2, r3
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	4413      	add	r3, r2
 800105a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001064:	4618      	mov	r0, r3
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001070:	b480      	push	{r7}
 8001072:	b087      	sub	sp, #28
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	3360      	adds	r3, #96	@ 0x60
 8001080:	461a      	mov	r2, r3
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	4413      	add	r3, r2
 8001088:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	431a      	orrs	r2, r3
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800109a:	bf00      	nop
 800109c:	371c      	adds	r7, #28
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80010a6:	b480      	push	{r7}
 80010a8:	b083      	sub	sp, #12
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
 80010ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	695b      	ldr	r3, [r3, #20]
 80010b4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	431a      	orrs	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	615a      	str	r2, [r3, #20]
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d101      	bne.n	80010e4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80010e0:	2301      	movs	r3, #1
 80010e2:	e000      	b.n	80010e6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80010f2:	b480      	push	{r7}
 80010f4:	b087      	sub	sp, #28
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	60f8      	str	r0, [r7, #12]
 80010fa:	60b9      	str	r1, [r7, #8]
 80010fc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	3330      	adds	r3, #48	@ 0x30
 8001102:	461a      	mov	r2, r3
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	0a1b      	lsrs	r3, r3, #8
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	f003 030c 	and.w	r3, r3, #12
 800110e:	4413      	add	r3, r2
 8001110:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	f003 031f 	and.w	r3, r3, #31
 800111c:	211f      	movs	r1, #31
 800111e:	fa01 f303 	lsl.w	r3, r1, r3
 8001122:	43db      	mvns	r3, r3
 8001124:	401a      	ands	r2, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	0e9b      	lsrs	r3, r3, #26
 800112a:	f003 011f 	and.w	r1, r3, #31
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	f003 031f 	and.w	r3, r3, #31
 8001134:	fa01 f303 	lsl.w	r3, r1, r3
 8001138:	431a      	orrs	r2, r3
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800113e:	bf00      	nop
 8001140:	371c      	adds	r7, #28
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800114a:	b480      	push	{r7}
 800114c:	b083      	sub	sp, #12
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001156:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d101      	bne.n	8001162 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800115e:	2301      	movs	r3, #1
 8001160:	e000      	b.n	8001164 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001162:	2300      	movs	r3, #0
}
 8001164:	4618      	mov	r0, r3
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001170:	b480      	push	{r7}
 8001172:	b087      	sub	sp, #28
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	3314      	adds	r3, #20
 8001180:	461a      	mov	r2, r3
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	0e5b      	lsrs	r3, r3, #25
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	f003 0304 	and.w	r3, r3, #4
 800118c:	4413      	add	r3, r2
 800118e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	0d1b      	lsrs	r3, r3, #20
 8001198:	f003 031f 	and.w	r3, r3, #31
 800119c:	2107      	movs	r1, #7
 800119e:	fa01 f303 	lsl.w	r3, r1, r3
 80011a2:	43db      	mvns	r3, r3
 80011a4:	401a      	ands	r2, r3
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	0d1b      	lsrs	r3, r3, #20
 80011aa:	f003 031f 	and.w	r3, r3, #31
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	fa01 f303 	lsl.w	r3, r1, r3
 80011b4:	431a      	orrs	r2, r3
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80011ba:	bf00      	nop
 80011bc:	371c      	adds	r7, #28
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
	...

080011c8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011e0:	43db      	mvns	r3, r3
 80011e2:	401a      	ands	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f003 0318 	and.w	r3, r3, #24
 80011ea:	4908      	ldr	r1, [pc, #32]	@ (800120c <LL_ADC_SetChannelSingleDiff+0x44>)
 80011ec:	40d9      	lsrs	r1, r3
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	400b      	ands	r3, r1
 80011f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011f6:	431a      	orrs	r2, r3
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80011fe:	bf00      	nop
 8001200:	3714      	adds	r7, #20
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	0007ffff 	.word	0x0007ffff

08001210 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001220:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	6093      	str	r3, [r2, #8]
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001244:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001248:	d101      	bne.n	800124e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800124a:	2301      	movs	r3, #1
 800124c:	e000      	b.n	8001250 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800124e:	2300      	movs	r3, #0
}
 8001250:	4618      	mov	r0, r3
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800126c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001270:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001294:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001298:	d101      	bne.n	800129e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800129a:	2301      	movs	r3, #1
 800129c:	e000      	b.n	80012a0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800129e:	2300      	movs	r3, #0
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80012bc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80012c0:	f043 0201 	orr.w	r2, r3, #1
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80012e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80012e8:	f043 0202 	orr.w	r2, r3, #2
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	f003 0301 	and.w	r3, r3, #1
 800130c:	2b01      	cmp	r3, #1
 800130e:	d101      	bne.n	8001314 <LL_ADC_IsEnabled+0x18>
 8001310:	2301      	movs	r3, #1
 8001312:	e000      	b.n	8001316 <LL_ADC_IsEnabled+0x1a>
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001322:	b480      	push	{r7}
 8001324:	b083      	sub	sp, #12
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b02      	cmp	r3, #2
 8001334:	d101      	bne.n	800133a <LL_ADC_IsDisableOngoing+0x18>
 8001336:	2301      	movs	r3, #1
 8001338:	e000      	b.n	800133c <LL_ADC_IsDisableOngoing+0x1a>
 800133a:	2300      	movs	r3, #0
}
 800133c:	4618      	mov	r0, r3
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001358:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800135c:	f043 0204 	orr.w	r2, r3, #4
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	f003 0304 	and.w	r3, r3, #4
 8001380:	2b04      	cmp	r3, #4
 8001382:	d101      	bne.n	8001388 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001384:	2301      	movs	r3, #1
 8001386:	e000      	b.n	800138a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001396:	b480      	push	{r7}
 8001398:	b083      	sub	sp, #12
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f003 0308 	and.w	r3, r3, #8
 80013a6:	2b08      	cmp	r3, #8
 80013a8:	d101      	bne.n	80013ae <LL_ADC_INJ_IsConversionOngoing+0x18>
 80013aa:	2301      	movs	r3, #1
 80013ac:	e000      	b.n	80013b0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80013ae:	2300      	movs	r3, #0
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b088      	sub	sp, #32
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013c4:	2300      	movs	r3, #0
 80013c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d101      	bne.n	80013d6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e129      	b.n	800162a <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	691b      	ldr	r3, [r3, #16]
 80013da:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d109      	bne.n	80013f8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff fb83 	bl	8000af0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff ff19 	bl	8001234 <LL_ADC_IsDeepPowerDownEnabled>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d004      	beq.n	8001412 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff feff 	bl	8001210 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff ff34 	bl	8001284 <LL_ADC_IsInternalRegulatorEnabled>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d115      	bne.n	800144e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff ff18 	bl	800125c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800142c:	4b81      	ldr	r3, [pc, #516]	@ (8001634 <HAL_ADC_Init+0x278>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	099b      	lsrs	r3, r3, #6
 8001432:	4a81      	ldr	r2, [pc, #516]	@ (8001638 <HAL_ADC_Init+0x27c>)
 8001434:	fba2 2303 	umull	r2, r3, r2, r3
 8001438:	099b      	lsrs	r3, r3, #6
 800143a:	3301      	adds	r3, #1
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001440:	e002      	b.n	8001448 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	3b01      	subs	r3, #1
 8001446:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1f9      	bne.n	8001442 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff ff16 	bl	8001284 <LL_ADC_IsInternalRegulatorEnabled>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d10d      	bne.n	800147a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001462:	f043 0210 	orr.w	r2, r3, #16
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800146e:	f043 0201 	orr.w	r2, r3, #1
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff ff76 	bl	8001370 <LL_ADC_REG_IsConversionOngoing>
 8001484:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800148a:	f003 0310 	and.w	r3, r3, #16
 800148e:	2b00      	cmp	r3, #0
 8001490:	f040 80c2 	bne.w	8001618 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	2b00      	cmp	r3, #0
 8001498:	f040 80be 	bne.w	8001618 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014a0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80014a4:	f043 0202 	orr.w	r2, r3, #2
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff ff23 	bl	80012fc <LL_ADC_IsEnabled>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d10b      	bne.n	80014d4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80014bc:	485f      	ldr	r0, [pc, #380]	@ (800163c <HAL_ADC_Init+0x280>)
 80014be:	f7ff ff1d 	bl	80012fc <LL_ADC_IsEnabled>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d105      	bne.n	80014d4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	4619      	mov	r1, r3
 80014ce:	485c      	ldr	r0, [pc, #368]	@ (8001640 <HAL_ADC_Init+0x284>)
 80014d0:	f7ff fd60 	bl	8000f94 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	7e5b      	ldrb	r3, [r3, #25]
 80014d8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014de:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80014e4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80014ea:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014f2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014f4:	4313      	orrs	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d106      	bne.n	8001510 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001506:	3b01      	subs	r3, #1
 8001508:	045b      	lsls	r3, r3, #17
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	4313      	orrs	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001514:	2b00      	cmp	r3, #0
 8001516:	d009      	beq.n	800152c <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800151c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001524:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4313      	orrs	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	68da      	ldr	r2, [r3, #12]
 8001532:	4b44      	ldr	r3, [pc, #272]	@ (8001644 <HAL_ADC_Init+0x288>)
 8001534:	4013      	ands	r3, r2
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	6812      	ldr	r2, [r2, #0]
 800153a:	69b9      	ldr	r1, [r7, #24]
 800153c:	430b      	orrs	r3, r1
 800153e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff ff26 	bl	8001396 <LL_ADC_INJ_IsConversionOngoing>
 800154a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d140      	bne.n	80015d4 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d13d      	bne.n	80015d4 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	7e1b      	ldrb	r3, [r3, #24]
 8001560:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001562:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800156a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800156c:	4313      	orrs	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800157a:	f023 0306 	bic.w	r3, r3, #6
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	6812      	ldr	r2, [r2, #0]
 8001582:	69b9      	ldr	r1, [r7, #24]
 8001584:	430b      	orrs	r3, r1
 8001586:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800158e:	2b01      	cmp	r3, #1
 8001590:	d118      	bne.n	80015c4 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	691b      	ldr	r3, [r3, #16]
 8001598:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800159c:	f023 0304 	bic.w	r3, r3, #4
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80015a8:	4311      	orrs	r1, r2
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80015ae:	4311      	orrs	r1, r2
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80015b4:	430a      	orrs	r2, r1
 80015b6:	431a      	orrs	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f042 0201 	orr.w	r2, r2, #1
 80015c0:	611a      	str	r2, [r3, #16]
 80015c2:	e007      	b.n	80015d4 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	691a      	ldr	r2, [r3, #16]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f022 0201 	bic.w	r2, r2, #1
 80015d2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	691b      	ldr	r3, [r3, #16]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d10c      	bne.n	80015f6 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e2:	f023 010f 	bic.w	r1, r3, #15
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	69db      	ldr	r3, [r3, #28]
 80015ea:	1e5a      	subs	r2, r3, #1
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	430a      	orrs	r2, r1
 80015f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80015f4:	e007      	b.n	8001606 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f022 020f 	bic.w	r2, r2, #15
 8001604:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800160a:	f023 0303 	bic.w	r3, r3, #3
 800160e:	f043 0201 	orr.w	r2, r3, #1
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	659a      	str	r2, [r3, #88]	@ 0x58
 8001616:	e007      	b.n	8001628 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800161c:	f043 0210 	orr.w	r2, r3, #16
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001628:	7ffb      	ldrb	r3, [r7, #31]
}
 800162a:	4618      	mov	r0, r3
 800162c:	3720      	adds	r7, #32
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20000000 	.word	0x20000000
 8001638:	053e2d63 	.word	0x053e2d63
 800163c:	50040000 	.word	0x50040000
 8001640:	50040300 	.word	0x50040300
 8001644:	fff0c007 	.word	0xfff0c007

08001648 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff fe8b 	bl	8001370 <LL_ADC_REG_IsConversionOngoing>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	f040 80a0 	bne.w	80017a2 <HAL_ADC_Start_IT+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001668:	2b01      	cmp	r3, #1
 800166a:	d101      	bne.n	8001670 <HAL_ADC_Start_IT+0x28>
 800166c:	2302      	movs	r3, #2
 800166e:	e09b      	b.n	80017a8 <HAL_ADC_Start_IT+0x160>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2201      	movs	r2, #1
 8001674:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f000 fe6b 	bl	8002354 <ADC_Enable>
 800167e:	4603      	mov	r3, r0
 8001680:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001682:	7bfb      	ldrb	r3, [r7, #15]
 8001684:	2b00      	cmp	r3, #0
 8001686:	f040 8087 	bne.w	8001798 <HAL_ADC_Start_IT+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800168e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001692:	f023 0301 	bic.w	r3, r3, #1
 8001696:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d006      	beq.n	80016b8 <HAL_ADC_Start_IT+0x70>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016ae:	f023 0206 	bic.w	r2, r3, #6
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80016b6:	e002      	b.n	80016be <HAL_ADC_Start_IT+0x76>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	221c      	movs	r2, #28
 80016c4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	685a      	ldr	r2, [r3, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f022 021c 	bic.w	r2, r2, #28
 80016dc:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	695b      	ldr	r3, [r3, #20]
 80016e2:	2b08      	cmp	r3, #8
 80016e4:	d108      	bne.n	80016f8 <HAL_ADC_Start_IT+0xb0>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	685a      	ldr	r2, [r3, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f042 0208 	orr.w	r2, r2, #8
 80016f4:	605a      	str	r2, [r3, #4]
          break;
 80016f6:	e008      	b.n	800170a <HAL_ADC_Start_IT+0xc2>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	685a      	ldr	r2, [r3, #4]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f042 0204 	orr.w	r2, r2, #4
 8001706:	605a      	str	r2, [r3, #4]
          break;
 8001708:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800170e:	2b00      	cmp	r3, #0
 8001710:	d107      	bne.n	8001722 <HAL_ADC_Start_IT+0xda>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	685a      	ldr	r2, [r3, #4]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f042 0210 	orr.w	r2, r2, #16
 8001720:	605a      	str	r2, [r3, #4]
          }
        }
      }
#else
      /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d02d      	beq.n	800178c <HAL_ADC_Start_IT+0x144>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001734:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001738:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Enable as well injected interruptions in case
         HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
         allows to start regular and injected conversions when JAUTO is
         set with a single call to HAL_ADC_Start_IT() */
        switch (hadc->Init.EOCSelection)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	695b      	ldr	r3, [r3, #20]
 8001744:	2b08      	cmp	r3, #8
 8001746:	d110      	bne.n	800176a <HAL_ADC_Start_IT+0x122>
        {
          case ADC_EOC_SEQ_CONV:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f022 0220 	bic.w	r2, r2, #32
 8001756:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	685a      	ldr	r2, [r3, #4]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001766:	605a      	str	r2, [r3, #4]
            break;
 8001768:	e010      	b.n	800178c <HAL_ADC_Start_IT+0x144>
          /* case ADC_EOC_SINGLE_CONV */
          default:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	685a      	ldr	r2, [r3, #4]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001778:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f042 0220 	orr.w	r2, r2, #32
 8001788:	605a      	str	r2, [r3, #4]
            break;
 800178a:	bf00      	nop
        }
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff fdd9 	bl	8001348 <LL_ADC_REG_StartConversion>
 8001796:	e006      	b.n	80017a6 <HAL_ADC_Start_IT+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80017a0:	e001      	b.n	80017a6 <HAL_ADC_Start_IT+0x15e>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80017a2:	2302      	movs	r3, #2
 80017a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80017a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80017be:	4618      	mov	r0, r3
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b088      	sub	sp, #32
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80017d2:	2300      	movs	r3, #0
 80017d4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d017      	beq.n	8001820 <HAL_ADC_IRQHandler+0x56>
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d012      	beq.n	8001820 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017fe:	f003 0310 	and.w	r3, r3, #16
 8001802:	2b00      	cmp	r3, #0
 8001804:	d105      	bne.n	8001812 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800180a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f000 ff38 	bl	8002688 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2202      	movs	r2, #2
 800181e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	f003 0304 	and.w	r3, r3, #4
 8001826:	2b00      	cmp	r3, #0
 8001828:	d004      	beq.n	8001834 <HAL_ADC_IRQHandler+0x6a>
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	f003 0304 	and.w	r3, r3, #4
 8001830:	2b00      	cmp	r3, #0
 8001832:	d109      	bne.n	8001848 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800183a:	2b00      	cmp	r3, #0
 800183c:	d05e      	beq.n	80018fc <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	f003 0308 	and.w	r3, r3, #8
 8001844:	2b00      	cmp	r3, #0
 8001846:	d059      	beq.n	80018fc <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800184c:	f003 0310 	and.w	r3, r3, #16
 8001850:	2b00      	cmp	r3, #0
 8001852:	d105      	bne.n	8001860 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001858:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff fc31 	bl	80010cc <LL_ADC_REG_IsTriggerSourceSWStart>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d03e      	beq.n	80018ee <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d135      	bne.n	80018ee <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0308 	and.w	r3, r3, #8
 800188c:	2b08      	cmp	r3, #8
 800188e:	d12e      	bne.n	80018ee <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff fd6b 	bl	8001370 <LL_ADC_REG_IsConversionOngoing>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d11a      	bne.n	80018d6 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	685a      	ldr	r2, [r3, #4]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f022 020c 	bic.w	r2, r2, #12
 80018ae:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	659a      	str	r2, [r3, #88]	@ 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d112      	bne.n	80018ee <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018cc:	f043 0201 	orr.w	r2, r3, #1
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	659a      	str	r2, [r3, #88]	@ 0x58
 80018d4:	e00b      	b.n	80018ee <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018da:	f043 0210 	orr.w	r2, r3, #16
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018e6:	f043 0201 	orr.w	r2, r3, #1
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f7fe fe70 	bl	80005d4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	220c      	movs	r2, #12
 80018fa:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	f003 0320 	and.w	r3, r3, #32
 8001902:	2b00      	cmp	r3, #0
 8001904:	d004      	beq.n	8001910 <HAL_ADC_IRQHandler+0x146>
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	f003 0320 	and.w	r3, r3, #32
 800190c:	2b00      	cmp	r3, #0
 800190e:	d109      	bne.n	8001924 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001916:	2b00      	cmp	r3, #0
 8001918:	d072      	beq.n	8001a00 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001920:	2b00      	cmp	r3, #0
 8001922:	d06d      	beq.n	8001a00 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001928:	f003 0310 	and.w	r3, r3, #16
 800192c:	2b00      	cmp	r3, #0
 800192e:	d105      	bne.n	800193c <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001934:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff fc02 	bl	800114a <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001946:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff fbbd 	bl	80010cc <LL_ADC_REG_IsTriggerSourceSWStart>
 8001952:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d047      	beq.n	80019f2 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d007      	beq.n	800197c <HAL_ADC_IRQHandler+0x1b2>
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d03f      	beq.n	80019f2 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001978:	2b00      	cmp	r3, #0
 800197a:	d13a      	bne.n	80019f2 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001986:	2b40      	cmp	r3, #64	@ 0x40
 8001988:	d133      	bne.n	80019f2 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d12e      	bne.n	80019f2 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff fcfc 	bl	8001396 <LL_ADC_INJ_IsConversionOngoing>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d11a      	bne.n	80019da <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	685a      	ldr	r2, [r3, #4]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80019b2:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019b8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	659a      	str	r2, [r3, #88]	@ 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d112      	bne.n	80019f2 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d0:	f043 0201 	orr.w	r2, r3, #1
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	659a      	str	r2, [r3, #88]	@ 0x58
 80019d8:	e00b      	b.n	80019f2 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019de:	f043 0210 	orr.w	r2, r3, #16
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	659a      	str	r2, [r3, #88]	@ 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019ea:	f043 0201 	orr.w	r2, r3, #1
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	65da      	str	r2, [r3, #92]	@ 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f000 fe20 	bl	8002638 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2260      	movs	r2, #96	@ 0x60
 80019fe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d011      	beq.n	8001a2e <HAL_ADC_IRQHandler+0x264>
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d00c      	beq.n	8001a2e <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a18:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f000 f886 	bl	8001b32 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2280      	movs	r2, #128	@ 0x80
 8001a2c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d012      	beq.n	8001a5e <HAL_ADC_IRQHandler+0x294>
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d00d      	beq.n	8001a5e <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a46:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 fe06 	bl	8002660 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a5c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d012      	beq.n	8001a8e <HAL_ADC_IRQHandler+0x2c4>
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d00d      	beq.n	8001a8e <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a76:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 fdf8 	bl	8002674 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a8c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	f003 0310 	and.w	r3, r3, #16
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d02a      	beq.n	8001aee <HAL_ADC_IRQHandler+0x324>
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	f003 0310 	and.w	r3, r3, #16
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d025      	beq.n	8001aee <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d102      	bne.n	8001ab0 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	61fb      	str	r3, [r7, #28]
 8001aae:	e008      	b.n	8001ac2 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d10e      	bne.n	8001ae6 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001acc:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ad8:	f043 0202 	orr.w	r2, r3, #2
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 f830 	bl	8001b46 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2210      	movs	r2, #16
 8001aec:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d018      	beq.n	8001b2a <HAL_ADC_IRQHandler+0x360>
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d013      	beq.n	8001b2a <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b06:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b12:	f043 0208 	orr.w	r2, r3, #8
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b22:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 fd91 	bl	800264c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001b2a:	bf00      	nop
 8001b2c:	3720      	adds	r7, #32
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b083      	sub	sp, #12
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b083      	sub	sp, #12
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
	...

08001b5c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b0b6      	sub	sp, #216	@ 0xd8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b66:	2300      	movs	r3, #0
 8001b68:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d101      	bne.n	8001b7e <HAL_ADC_ConfigChannel+0x22>
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	e3d5      	b.n	800232a <HAL_ADC_ConfigChannel+0x7ce>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2201      	movs	r2, #1
 8001b82:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff fbf0 	bl	8001370 <LL_ADC_REG_IsConversionOngoing>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f040 83ba 	bne.w	800230c <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2b05      	cmp	r3, #5
 8001ba6:	d824      	bhi.n	8001bf2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	3b02      	subs	r3, #2
 8001bae:	2b03      	cmp	r3, #3
 8001bb0:	d81b      	bhi.n	8001bea <HAL_ADC_ConfigChannel+0x8e>
 8001bb2:	a201      	add	r2, pc, #4	@ (adr r2, 8001bb8 <HAL_ADC_ConfigChannel+0x5c>)
 8001bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb8:	08001bc9 	.word	0x08001bc9
 8001bbc:	08001bd1 	.word	0x08001bd1
 8001bc0:	08001bd9 	.word	0x08001bd9
 8001bc4:	08001be1 	.word	0x08001be1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001bc8:	230c      	movs	r3, #12
 8001bca:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001bce:	e010      	b.n	8001bf2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001bd0:	2312      	movs	r3, #18
 8001bd2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001bd6:	e00c      	b.n	8001bf2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001bd8:	2318      	movs	r3, #24
 8001bda:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001bde:	e008      	b.n	8001bf2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001be0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001be4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001be8:	e003      	b.n	8001bf2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001bea:	2306      	movs	r3, #6
 8001bec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001bf0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6818      	ldr	r0, [r3, #0]
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001c00:	f7ff fa77 	bl	80010f2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff fbb1 	bl	8001370 <LL_ADC_REG_IsConversionOngoing>
 8001c0e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff fbbd 	bl	8001396 <LL_ADC_INJ_IsConversionOngoing>
 8001c1c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f040 81bf 	bne.w	8001fa8 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f040 81ba 	bne.w	8001fa8 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001c3c:	d10f      	bne.n	8001c5e <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6818      	ldr	r0, [r3, #0]
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2200      	movs	r2, #0
 8001c48:	4619      	mov	r1, r3
 8001c4a:	f7ff fa91 	bl	8001170 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff fa25 	bl	80010a6 <LL_ADC_SetSamplingTimeCommonConfig>
 8001c5c:	e00e      	b.n	8001c7c <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6818      	ldr	r0, [r3, #0]
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	6819      	ldr	r1, [r3, #0]
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	f7ff fa80 	bl	8001170 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2100      	movs	r1, #0
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff fa15 	bl	80010a6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	695a      	ldr	r2, [r3, #20]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	08db      	lsrs	r3, r3, #3
 8001c88:	f003 0303 	and.w	r3, r3, #3
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	d00a      	beq.n	8001cb4 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6818      	ldr	r0, [r3, #0]
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	6919      	ldr	r1, [r3, #16]
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001cae:	f7ff f9a5 	bl	8000ffc <LL_ADC_SetOffset>
 8001cb2:	e179      	b.n	8001fa8 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2100      	movs	r1, #0
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff f9c2 	bl	8001044 <LL_ADC_GetOffsetChannel>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d10a      	bne.n	8001ce0 <HAL_ADC_ConfigChannel+0x184>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2100      	movs	r1, #0
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff f9b7 	bl	8001044 <LL_ADC_GetOffsetChannel>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	0e9b      	lsrs	r3, r3, #26
 8001cda:	f003 021f 	and.w	r2, r3, #31
 8001cde:	e01e      	b.n	8001d1e <HAL_ADC_ConfigChannel+0x1c2>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff f9ac 	bl	8001044 <LL_ADC_GetOffsetChannel>
 8001cec:	4603      	mov	r3, r0
 8001cee:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001cf6:	fa93 f3a3 	rbit	r3, r3
 8001cfa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001cfe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001d02:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001d06:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d101      	bne.n	8001d12 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8001d0e:	2320      	movs	r3, #32
 8001d10:	e004      	b.n	8001d1c <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8001d12:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001d16:	fab3 f383 	clz	r3, r3
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d105      	bne.n	8001d36 <HAL_ADC_ConfigChannel+0x1da>
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	0e9b      	lsrs	r3, r3, #26
 8001d30:	f003 031f 	and.w	r3, r3, #31
 8001d34:	e018      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x20c>
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001d42:	fa93 f3a3 	rbit	r3, r3
 8001d46:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001d4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001d4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001d52:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8001d5a:	2320      	movs	r3, #32
 8001d5c:	e004      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8001d5e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d62:	fab3 f383 	clz	r3, r3
 8001d66:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d106      	bne.n	8001d7a <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2200      	movs	r2, #0
 8001d72:	2100      	movs	r1, #0
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff f97b 	bl	8001070 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2101      	movs	r1, #1
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff f95f 	bl	8001044 <LL_ADC_GetOffsetChannel>
 8001d86:	4603      	mov	r3, r0
 8001d88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d10a      	bne.n	8001da6 <HAL_ADC_ConfigChannel+0x24a>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2101      	movs	r1, #1
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff f954 	bl	8001044 <LL_ADC_GetOffsetChannel>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	0e9b      	lsrs	r3, r3, #26
 8001da0:	f003 021f 	and.w	r2, r3, #31
 8001da4:	e01e      	b.n	8001de4 <HAL_ADC_ConfigChannel+0x288>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2101      	movs	r1, #1
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff f949 	bl	8001044 <LL_ADC_GetOffsetChannel>
 8001db2:	4603      	mov	r3, r0
 8001db4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001dbc:	fa93 f3a3 	rbit	r3, r3
 8001dc0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001dc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001dc8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001dcc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d101      	bne.n	8001dd8 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8001dd4:	2320      	movs	r3, #32
 8001dd6:	e004      	b.n	8001de2 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8001dd8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001ddc:	fab3 f383 	clz	r3, r3
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d105      	bne.n	8001dfc <HAL_ADC_ConfigChannel+0x2a0>
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	0e9b      	lsrs	r3, r3, #26
 8001df6:	f003 031f 	and.w	r3, r3, #31
 8001dfa:	e018      	b.n	8001e2e <HAL_ADC_ConfigChannel+0x2d2>
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e04:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001e08:	fa93 f3a3 	rbit	r3, r3
 8001e0c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001e10:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001e14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001e18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d101      	bne.n	8001e24 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8001e20:	2320      	movs	r3, #32
 8001e22:	e004      	b.n	8001e2e <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8001e24:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001e28:	fab3 f383 	clz	r3, r3
 8001e2c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d106      	bne.n	8001e40 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2200      	movs	r2, #0
 8001e38:	2101      	movs	r1, #1
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff f918 	bl	8001070 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2102      	movs	r1, #2
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff f8fc 	bl	8001044 <LL_ADC_GetOffsetChannel>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d10a      	bne.n	8001e6c <HAL_ADC_ConfigChannel+0x310>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2102      	movs	r1, #2
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff f8f1 	bl	8001044 <LL_ADC_GetOffsetChannel>
 8001e62:	4603      	mov	r3, r0
 8001e64:	0e9b      	lsrs	r3, r3, #26
 8001e66:	f003 021f 	and.w	r2, r3, #31
 8001e6a:	e01e      	b.n	8001eaa <HAL_ADC_ConfigChannel+0x34e>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2102      	movs	r1, #2
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff f8e6 	bl	8001044 <LL_ADC_GetOffsetChannel>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001e82:	fa93 f3a3 	rbit	r3, r3
 8001e86:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001e8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001e8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001e92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8001e9a:	2320      	movs	r3, #32
 8001e9c:	e004      	b.n	8001ea8 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8001e9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ea2:	fab3 f383 	clz	r3, r3
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d105      	bne.n	8001ec2 <HAL_ADC_ConfigChannel+0x366>
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	0e9b      	lsrs	r3, r3, #26
 8001ebc:	f003 031f 	and.w	r3, r3, #31
 8001ec0:	e014      	b.n	8001eec <HAL_ADC_ConfigChannel+0x390>
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001eca:	fa93 f3a3 	rbit	r3, r3
 8001ece:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001ed0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ed2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001ed6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8001ede:	2320      	movs	r3, #32
 8001ee0:	e004      	b.n	8001eec <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8001ee2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001ee6:	fab3 f383 	clz	r3, r3
 8001eea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d106      	bne.n	8001efe <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	2102      	movs	r1, #2
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff f8b9 	bl	8001070 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2103      	movs	r1, #3
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff f89d 	bl	8001044 <LL_ADC_GetOffsetChannel>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d10a      	bne.n	8001f2a <HAL_ADC_ConfigChannel+0x3ce>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2103      	movs	r1, #3
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff f892 	bl	8001044 <LL_ADC_GetOffsetChannel>
 8001f20:	4603      	mov	r3, r0
 8001f22:	0e9b      	lsrs	r3, r3, #26
 8001f24:	f003 021f 	and.w	r2, r3, #31
 8001f28:	e017      	b.n	8001f5a <HAL_ADC_ConfigChannel+0x3fe>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2103      	movs	r1, #3
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff f887 	bl	8001044 <LL_ADC_GetOffsetChannel>
 8001f36:	4603      	mov	r3, r0
 8001f38:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001f3c:	fa93 f3a3 	rbit	r3, r3
 8001f40:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001f42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f44:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001f46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d101      	bne.n	8001f50 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8001f4c:	2320      	movs	r3, #32
 8001f4e:	e003      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8001f50:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f52:	fab3 f383 	clz	r3, r3
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d105      	bne.n	8001f72 <HAL_ADC_ConfigChannel+0x416>
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	0e9b      	lsrs	r3, r3, #26
 8001f6c:	f003 031f 	and.w	r3, r3, #31
 8001f70:	e011      	b.n	8001f96 <HAL_ADC_ConfigChannel+0x43a>
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f7a:	fa93 f3a3 	rbit	r3, r3
 8001f7e:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001f80:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f82:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001f84:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8001f8a:	2320      	movs	r3, #32
 8001f8c:	e003      	b.n	8001f96 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8001f8e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f90:	fab3 f383 	clz	r3, r3
 8001f94:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d106      	bne.n	8001fa8 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	2103      	movs	r1, #3
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff f864 	bl	8001070 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff f9a5 	bl	80012fc <LL_ADC_IsEnabled>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f040 813f 	bne.w	8002238 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6818      	ldr	r0, [r3, #0]
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	6819      	ldr	r1, [r3, #0]
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	f7ff f8fe 	bl	80011c8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	4a8e      	ldr	r2, [pc, #568]	@ (800220c <HAL_ADC_ConfigChannel+0x6b0>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	f040 8130 	bne.w	8002238 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d10b      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x4a4>
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	0e9b      	lsrs	r3, r3, #26
 8001fee:	3301      	adds	r3, #1
 8001ff0:	f003 031f 	and.w	r3, r3, #31
 8001ff4:	2b09      	cmp	r3, #9
 8001ff6:	bf94      	ite	ls
 8001ff8:	2301      	movls	r3, #1
 8001ffa:	2300      	movhi	r3, #0
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	e019      	b.n	8002034 <HAL_ADC_ConfigChannel+0x4d8>
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002006:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002008:	fa93 f3a3 	rbit	r3, r3
 800200c:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800200e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002010:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002012:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002014:	2b00      	cmp	r3, #0
 8002016:	d101      	bne.n	800201c <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002018:	2320      	movs	r3, #32
 800201a:	e003      	b.n	8002024 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 800201c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800201e:	fab3 f383 	clz	r3, r3
 8002022:	b2db      	uxtb	r3, r3
 8002024:	3301      	adds	r3, #1
 8002026:	f003 031f 	and.w	r3, r3, #31
 800202a:	2b09      	cmp	r3, #9
 800202c:	bf94      	ite	ls
 800202e:	2301      	movls	r3, #1
 8002030:	2300      	movhi	r3, #0
 8002032:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002034:	2b00      	cmp	r3, #0
 8002036:	d079      	beq.n	800212c <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002040:	2b00      	cmp	r3, #0
 8002042:	d107      	bne.n	8002054 <HAL_ADC_ConfigChannel+0x4f8>
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	0e9b      	lsrs	r3, r3, #26
 800204a:	3301      	adds	r3, #1
 800204c:	069b      	lsls	r3, r3, #26
 800204e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002052:	e015      	b.n	8002080 <HAL_ADC_ConfigChannel+0x524>
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800205c:	fa93 f3a3 	rbit	r3, r3
 8002060:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002062:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002064:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002066:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002068:	2b00      	cmp	r3, #0
 800206a:	d101      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 800206c:	2320      	movs	r3, #32
 800206e:	e003      	b.n	8002078 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002070:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002072:	fab3 f383 	clz	r3, r3
 8002076:	b2db      	uxtb	r3, r3
 8002078:	3301      	adds	r3, #1
 800207a:	069b      	lsls	r3, r3, #26
 800207c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002088:	2b00      	cmp	r3, #0
 800208a:	d109      	bne.n	80020a0 <HAL_ADC_ConfigChannel+0x544>
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	0e9b      	lsrs	r3, r3, #26
 8002092:	3301      	adds	r3, #1
 8002094:	f003 031f 	and.w	r3, r3, #31
 8002098:	2101      	movs	r1, #1
 800209a:	fa01 f303 	lsl.w	r3, r1, r3
 800209e:	e017      	b.n	80020d0 <HAL_ADC_ConfigChannel+0x574>
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020a8:	fa93 f3a3 	rbit	r3, r3
 80020ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80020ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020b0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80020b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d101      	bne.n	80020bc <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80020b8:	2320      	movs	r3, #32
 80020ba:	e003      	b.n	80020c4 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80020bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020be:	fab3 f383 	clz	r3, r3
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	3301      	adds	r3, #1
 80020c6:	f003 031f 	and.w	r3, r3, #31
 80020ca:	2101      	movs	r1, #1
 80020cc:	fa01 f303 	lsl.w	r3, r1, r3
 80020d0:	ea42 0103 	orr.w	r1, r2, r3
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d10a      	bne.n	80020f6 <HAL_ADC_ConfigChannel+0x59a>
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	0e9b      	lsrs	r3, r3, #26
 80020e6:	3301      	adds	r3, #1
 80020e8:	f003 021f 	and.w	r2, r3, #31
 80020ec:	4613      	mov	r3, r2
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	4413      	add	r3, r2
 80020f2:	051b      	lsls	r3, r3, #20
 80020f4:	e018      	b.n	8002128 <HAL_ADC_ConfigChannel+0x5cc>
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020fe:	fa93 f3a3 	rbit	r3, r3
 8002102:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002106:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 800210e:	2320      	movs	r3, #32
 8002110:	e003      	b.n	800211a <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002114:	fab3 f383 	clz	r3, r3
 8002118:	b2db      	uxtb	r3, r3
 800211a:	3301      	adds	r3, #1
 800211c:	f003 021f 	and.w	r2, r3, #31
 8002120:	4613      	mov	r3, r2
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	4413      	add	r3, r2
 8002126:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002128:	430b      	orrs	r3, r1
 800212a:	e080      	b.n	800222e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002134:	2b00      	cmp	r3, #0
 8002136:	d107      	bne.n	8002148 <HAL_ADC_ConfigChannel+0x5ec>
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	0e9b      	lsrs	r3, r3, #26
 800213e:	3301      	adds	r3, #1
 8002140:	069b      	lsls	r3, r3, #26
 8002142:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002146:	e015      	b.n	8002174 <HAL_ADC_ConfigChannel+0x618>
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002150:	fa93 f3a3 	rbit	r3, r3
 8002154:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002158:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800215a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800215c:	2b00      	cmp	r3, #0
 800215e:	d101      	bne.n	8002164 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002160:	2320      	movs	r3, #32
 8002162:	e003      	b.n	800216c <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002166:	fab3 f383 	clz	r3, r3
 800216a:	b2db      	uxtb	r3, r3
 800216c:	3301      	adds	r3, #1
 800216e:	069b      	lsls	r3, r3, #26
 8002170:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800217c:	2b00      	cmp	r3, #0
 800217e:	d109      	bne.n	8002194 <HAL_ADC_ConfigChannel+0x638>
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	0e9b      	lsrs	r3, r3, #26
 8002186:	3301      	adds	r3, #1
 8002188:	f003 031f 	and.w	r3, r3, #31
 800218c:	2101      	movs	r1, #1
 800218e:	fa01 f303 	lsl.w	r3, r1, r3
 8002192:	e017      	b.n	80021c4 <HAL_ADC_ConfigChannel+0x668>
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	fa93 f3a3 	rbit	r3, r3
 80021a0:	61bb      	str	r3, [r7, #24]
  return result;
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80021a6:	6a3b      	ldr	r3, [r7, #32]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d101      	bne.n	80021b0 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80021ac:	2320      	movs	r3, #32
 80021ae:	e003      	b.n	80021b8 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80021b0:	6a3b      	ldr	r3, [r7, #32]
 80021b2:	fab3 f383 	clz	r3, r3
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	3301      	adds	r3, #1
 80021ba:	f003 031f 	and.w	r3, r3, #31
 80021be:	2101      	movs	r1, #1
 80021c0:	fa01 f303 	lsl.w	r3, r1, r3
 80021c4:	ea42 0103 	orr.w	r1, r2, r3
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d10d      	bne.n	80021f0 <HAL_ADC_ConfigChannel+0x694>
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	0e9b      	lsrs	r3, r3, #26
 80021da:	3301      	adds	r3, #1
 80021dc:	f003 021f 	and.w	r2, r3, #31
 80021e0:	4613      	mov	r3, r2
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	4413      	add	r3, r2
 80021e6:	3b1e      	subs	r3, #30
 80021e8:	051b      	lsls	r3, r3, #20
 80021ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80021ee:	e01d      	b.n	800222c <HAL_ADC_ConfigChannel+0x6d0>
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	fa93 f3a3 	rbit	r3, r3
 80021fc:	60fb      	str	r3, [r7, #12]
  return result;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d103      	bne.n	8002210 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002208:	2320      	movs	r3, #32
 800220a:	e005      	b.n	8002218 <HAL_ADC_ConfigChannel+0x6bc>
 800220c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	fab3 f383 	clz	r3, r3
 8002216:	b2db      	uxtb	r3, r3
 8002218:	3301      	adds	r3, #1
 800221a:	f003 021f 	and.w	r2, r3, #31
 800221e:	4613      	mov	r3, r2
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	4413      	add	r3, r2
 8002224:	3b1e      	subs	r3, #30
 8002226:	051b      	lsls	r3, r3, #20
 8002228:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800222c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002232:	4619      	mov	r1, r3
 8002234:	f7fe ff9c 	bl	8001170 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	4b3d      	ldr	r3, [pc, #244]	@ (8002334 <HAL_ADC_ConfigChannel+0x7d8>)
 800223e:	4013      	ands	r3, r2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d06c      	beq.n	800231e <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002244:	483c      	ldr	r0, [pc, #240]	@ (8002338 <HAL_ADC_ConfigChannel+0x7dc>)
 8002246:	f7fe fecb 	bl	8000fe0 <LL_ADC_GetCommonPathInternalCh>
 800224a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a3a      	ldr	r2, [pc, #232]	@ (800233c <HAL_ADC_ConfigChannel+0x7e0>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d127      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002258:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800225c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d121      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a35      	ldr	r2, [pc, #212]	@ (8002340 <HAL_ADC_ConfigChannel+0x7e4>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d157      	bne.n	800231e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800226e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002272:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002276:	4619      	mov	r1, r3
 8002278:	482f      	ldr	r0, [pc, #188]	@ (8002338 <HAL_ADC_ConfigChannel+0x7dc>)
 800227a:	f7fe fe9e 	bl	8000fba <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800227e:	4b31      	ldr	r3, [pc, #196]	@ (8002344 <HAL_ADC_ConfigChannel+0x7e8>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	099b      	lsrs	r3, r3, #6
 8002284:	4a30      	ldr	r2, [pc, #192]	@ (8002348 <HAL_ADC_ConfigChannel+0x7ec>)
 8002286:	fba2 2303 	umull	r2, r3, r2, r3
 800228a:	099b      	lsrs	r3, r3, #6
 800228c:	1c5a      	adds	r2, r3, #1
 800228e:	4613      	mov	r3, r2
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	4413      	add	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002298:	e002      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	3b01      	subs	r3, #1
 800229e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1f9      	bne.n	800229a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022a6:	e03a      	b.n	800231e <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a27      	ldr	r2, [pc, #156]	@ (800234c <HAL_ADC_ConfigChannel+0x7f0>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d113      	bne.n	80022da <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80022b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80022b6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d10d      	bne.n	80022da <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a1f      	ldr	r2, [pc, #124]	@ (8002340 <HAL_ADC_ConfigChannel+0x7e4>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d12a      	bne.n	800231e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80022cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022d0:	4619      	mov	r1, r3
 80022d2:	4819      	ldr	r0, [pc, #100]	@ (8002338 <HAL_ADC_ConfigChannel+0x7dc>)
 80022d4:	f7fe fe71 	bl	8000fba <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022d8:	e021      	b.n	800231e <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a1c      	ldr	r2, [pc, #112]	@ (8002350 <HAL_ADC_ConfigChannel+0x7f4>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d11c      	bne.n	800231e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80022e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80022e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d116      	bne.n	800231e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a12      	ldr	r2, [pc, #72]	@ (8002340 <HAL_ADC_ConfigChannel+0x7e4>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d111      	bne.n	800231e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80022fe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002302:	4619      	mov	r1, r3
 8002304:	480c      	ldr	r0, [pc, #48]	@ (8002338 <HAL_ADC_ConfigChannel+0x7dc>)
 8002306:	f7fe fe58 	bl	8000fba <LL_ADC_SetCommonPathInternalCh>
 800230a:	e008      	b.n	800231e <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002310:	f043 0220 	orr.w	r2, r3, #32
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002326:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800232a:	4618      	mov	r0, r3
 800232c:	37d8      	adds	r7, #216	@ 0xd8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	80080000 	.word	0x80080000
 8002338:	50040300 	.word	0x50040300
 800233c:	c7520000 	.word	0xc7520000
 8002340:	50040000 	.word	0x50040000
 8002344:	20000000 	.word	0x20000000
 8002348:	053e2d63 	.word	0x053e2d63
 800234c:	cb840000 	.word	0xcb840000
 8002350:	80000001 	.word	0x80000001

08002354 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800235c:	2300      	movs	r3, #0
 800235e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	f7fe ffc9 	bl	80012fc <LL_ADC_IsEnabled>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d169      	bne.n	8002444 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	689a      	ldr	r2, [r3, #8]
 8002376:	4b36      	ldr	r3, [pc, #216]	@ (8002450 <ADC_Enable+0xfc>)
 8002378:	4013      	ands	r3, r2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00d      	beq.n	800239a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002382:	f043 0210 	orr.w	r2, r3, #16
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800238e:	f043 0201 	orr.w	r2, r3, #1
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e055      	b.n	8002446 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7fe ff84 	bl	80012ac <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80023a4:	482b      	ldr	r0, [pc, #172]	@ (8002454 <ADC_Enable+0x100>)
 80023a6:	f7fe fe1b 	bl	8000fe0 <LL_ADC_GetCommonPathInternalCh>
 80023aa:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80023ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d013      	beq.n	80023dc <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023b4:	4b28      	ldr	r3, [pc, #160]	@ (8002458 <ADC_Enable+0x104>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	099b      	lsrs	r3, r3, #6
 80023ba:	4a28      	ldr	r2, [pc, #160]	@ (800245c <ADC_Enable+0x108>)
 80023bc:	fba2 2303 	umull	r2, r3, r2, r3
 80023c0:	099b      	lsrs	r3, r3, #6
 80023c2:	1c5a      	adds	r2, r3, #1
 80023c4:	4613      	mov	r3, r2
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	4413      	add	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80023ce:	e002      	b.n	80023d6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	3b01      	subs	r3, #1
 80023d4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1f9      	bne.n	80023d0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80023dc:	f7fe fdce 	bl	8000f7c <HAL_GetTick>
 80023e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80023e2:	e028      	b.n	8002436 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7fe ff87 	bl	80012fc <LL_ADC_IsEnabled>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d104      	bne.n	80023fe <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7fe ff57 	bl	80012ac <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80023fe:	f7fe fdbd 	bl	8000f7c <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d914      	bls.n	8002436 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	2b01      	cmp	r3, #1
 8002418:	d00d      	beq.n	8002436 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800241e:	f043 0210 	orr.w	r2, r3, #16
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800242a:	f043 0201 	orr.w	r2, r3, #1
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e007      	b.n	8002446 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	2b01      	cmp	r3, #1
 8002442:	d1cf      	bne.n	80023e4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	8000003f 	.word	0x8000003f
 8002454:	50040300 	.word	0x50040300
 8002458:	20000000 	.word	0x20000000
 800245c:	053e2d63 	.word	0x053e2d63

08002460 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4618      	mov	r0, r3
 800246e:	f7fe ff58 	bl	8001322 <LL_ADC_IsDisableOngoing>
 8002472:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4618      	mov	r0, r3
 800247a:	f7fe ff3f 	bl	80012fc <LL_ADC_IsEnabled>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d047      	beq.n	8002514 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d144      	bne.n	8002514 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 030d 	and.w	r3, r3, #13
 8002494:	2b01      	cmp	r3, #1
 8002496:	d10c      	bne.n	80024b2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f7fe ff19 	bl	80012d4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2203      	movs	r2, #3
 80024a8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80024aa:	f7fe fd67 	bl	8000f7c <HAL_GetTick>
 80024ae:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80024b0:	e029      	b.n	8002506 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b6:	f043 0210 	orr.w	r2, r3, #16
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024c2:	f043 0201 	orr.w	r2, r3, #1
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e023      	b.n	8002516 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80024ce:	f7fe fd55 	bl	8000f7c <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d914      	bls.n	8002506 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00d      	beq.n	8002506 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ee:	f043 0210 	orr.w	r2, r3, #16
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024fa:	f043 0201 	orr.w	r2, r3, #1
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e007      	b.n	8002516 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1dc      	bne.n	80024ce <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <LL_ADC_StartCalibration>:
{
 800251e:	b480      	push	{r7}
 8002520:	b083      	sub	sp, #12
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
 8002526:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002530:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800253a:	4313      	orrs	r3, r2
 800253c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	609a      	str	r2, [r3, #8]
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <LL_ADC_IsCalibrationOnGoing>:
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002560:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002564:	d101      	bne.n	800256a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002566:	2301      	movs	r3, #1
 8002568:	e000      	b.n	800256c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002582:	2300      	movs	r3, #0
 8002584:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800258c:	2b01      	cmp	r3, #1
 800258e:	d101      	bne.n	8002594 <HAL_ADCEx_Calibration_Start+0x1c>
 8002590:	2302      	movs	r3, #2
 8002592:	e04d      	b.n	8002630 <HAL_ADCEx_Calibration_Start+0xb8>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f7ff ff5f 	bl	8002460 <ADC_Disable>
 80025a2:	4603      	mov	r3, r0
 80025a4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80025a6:	7bfb      	ldrb	r3, [r7, #15]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d136      	bne.n	800261a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025b0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80025b4:	f023 0302 	bic.w	r3, r3, #2
 80025b8:	f043 0202 	orr.w	r2, r3, #2
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6839      	ldr	r1, [r7, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff ffa9 	bl	800251e <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80025cc:	e014      	b.n	80025f8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	3301      	adds	r3, #1
 80025d2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 80025da:	d30d      	bcc.n	80025f8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025e0:	f023 0312 	bic.w	r3, r3, #18
 80025e4:	f043 0210 	orr.w	r2, r3, #16
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e01b      	b.n	8002630 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff ffa7 	bl	8002550 <LL_ADC_IsCalibrationOnGoing>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1e2      	bne.n	80025ce <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800260c:	f023 0303 	bic.w	r3, r3, #3
 8002610:	f043 0201 	orr.w	r2, r3, #1
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	659a      	str	r2, [r3, #88]	@ 0x58
 8002618:	e005      	b.n	8002626 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800261e:	f043 0210 	orr.w	r2, r3, #16
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800262e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002630:	4618      	mov	r0, r3
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f003 0307 	and.w	r3, r3, #7
 80026aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026ac:	4b0c      	ldr	r3, [pc, #48]	@ (80026e0 <__NVIC_SetPriorityGrouping+0x44>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026b2:	68ba      	ldr	r2, [r7, #8]
 80026b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026b8:	4013      	ands	r3, r2
 80026ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026ce:	4a04      	ldr	r2, [pc, #16]	@ (80026e0 <__NVIC_SetPriorityGrouping+0x44>)
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	60d3      	str	r3, [r2, #12]
}
 80026d4:	bf00      	nop
 80026d6:	3714      	adds	r7, #20
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	e000ed00 	.word	0xe000ed00

080026e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026e8:	4b04      	ldr	r3, [pc, #16]	@ (80026fc <__NVIC_GetPriorityGrouping+0x18>)
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	0a1b      	lsrs	r3, r3, #8
 80026ee:	f003 0307 	and.w	r3, r3, #7
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	e000ed00 	.word	0xe000ed00

08002700 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	4603      	mov	r3, r0
 8002708:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800270a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270e:	2b00      	cmp	r3, #0
 8002710:	db0b      	blt.n	800272a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002712:	79fb      	ldrb	r3, [r7, #7]
 8002714:	f003 021f 	and.w	r2, r3, #31
 8002718:	4907      	ldr	r1, [pc, #28]	@ (8002738 <__NVIC_EnableIRQ+0x38>)
 800271a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271e:	095b      	lsrs	r3, r3, #5
 8002720:	2001      	movs	r0, #1
 8002722:	fa00 f202 	lsl.w	r2, r0, r2
 8002726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	e000e100 	.word	0xe000e100

0800273c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	4603      	mov	r3, r0
 8002744:	6039      	str	r1, [r7, #0]
 8002746:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274c:	2b00      	cmp	r3, #0
 800274e:	db0a      	blt.n	8002766 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	b2da      	uxtb	r2, r3
 8002754:	490c      	ldr	r1, [pc, #48]	@ (8002788 <__NVIC_SetPriority+0x4c>)
 8002756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275a:	0112      	lsls	r2, r2, #4
 800275c:	b2d2      	uxtb	r2, r2
 800275e:	440b      	add	r3, r1
 8002760:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002764:	e00a      	b.n	800277c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	b2da      	uxtb	r2, r3
 800276a:	4908      	ldr	r1, [pc, #32]	@ (800278c <__NVIC_SetPriority+0x50>)
 800276c:	79fb      	ldrb	r3, [r7, #7]
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	3b04      	subs	r3, #4
 8002774:	0112      	lsls	r2, r2, #4
 8002776:	b2d2      	uxtb	r2, r2
 8002778:	440b      	add	r3, r1
 800277a:	761a      	strb	r2, [r3, #24]
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	e000e100 	.word	0xe000e100
 800278c:	e000ed00 	.word	0xe000ed00

08002790 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002790:	b480      	push	{r7}
 8002792:	b089      	sub	sp, #36	@ 0x24
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f003 0307 	and.w	r3, r3, #7
 80027a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	f1c3 0307 	rsb	r3, r3, #7
 80027aa:	2b04      	cmp	r3, #4
 80027ac:	bf28      	it	cs
 80027ae:	2304      	movcs	r3, #4
 80027b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	3304      	adds	r3, #4
 80027b6:	2b06      	cmp	r3, #6
 80027b8:	d902      	bls.n	80027c0 <NVIC_EncodePriority+0x30>
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	3b03      	subs	r3, #3
 80027be:	e000      	b.n	80027c2 <NVIC_EncodePriority+0x32>
 80027c0:	2300      	movs	r3, #0
 80027c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027c4:	f04f 32ff 	mov.w	r2, #4294967295
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	43da      	mvns	r2, r3
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	401a      	ands	r2, r3
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027d8:	f04f 31ff 	mov.w	r1, #4294967295
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	fa01 f303 	lsl.w	r3, r1, r3
 80027e2:	43d9      	mvns	r1, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027e8:	4313      	orrs	r3, r2
         );
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3724      	adds	r7, #36	@ 0x24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
	...

080027f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3b01      	subs	r3, #1
 8002804:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002808:	d301      	bcc.n	800280e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800280a:	2301      	movs	r3, #1
 800280c:	e00f      	b.n	800282e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800280e:	4a0a      	ldr	r2, [pc, #40]	@ (8002838 <SysTick_Config+0x40>)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	3b01      	subs	r3, #1
 8002814:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002816:	210f      	movs	r1, #15
 8002818:	f04f 30ff 	mov.w	r0, #4294967295
 800281c:	f7ff ff8e 	bl	800273c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002820:	4b05      	ldr	r3, [pc, #20]	@ (8002838 <SysTick_Config+0x40>)
 8002822:	2200      	movs	r2, #0
 8002824:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002826:	4b04      	ldr	r3, [pc, #16]	@ (8002838 <SysTick_Config+0x40>)
 8002828:	2207      	movs	r2, #7
 800282a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	e000e010 	.word	0xe000e010

0800283c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f7ff ff29 	bl	800269c <__NVIC_SetPriorityGrouping>
}
 800284a:	bf00      	nop
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b086      	sub	sp, #24
 8002856:	af00      	add	r7, sp, #0
 8002858:	4603      	mov	r3, r0
 800285a:	60b9      	str	r1, [r7, #8]
 800285c:	607a      	str	r2, [r7, #4]
 800285e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002860:	2300      	movs	r3, #0
 8002862:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002864:	f7ff ff3e 	bl	80026e4 <__NVIC_GetPriorityGrouping>
 8002868:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	68b9      	ldr	r1, [r7, #8]
 800286e:	6978      	ldr	r0, [r7, #20]
 8002870:	f7ff ff8e 	bl	8002790 <NVIC_EncodePriority>
 8002874:	4602      	mov	r2, r0
 8002876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800287a:	4611      	mov	r1, r2
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff ff5d 	bl	800273c <__NVIC_SetPriority>
}
 8002882:	bf00      	nop
 8002884:	3718      	adds	r7, #24
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b082      	sub	sp, #8
 800288e:	af00      	add	r7, sp, #0
 8002890:	4603      	mov	r3, r0
 8002892:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff ff31 	bl	8002700 <__NVIC_EnableIRQ>
}
 800289e:	bf00      	nop
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b082      	sub	sp, #8
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7ff ffa2 	bl	80027f8 <SysTick_Config>
 80028b4:	4603      	mov	r3, r0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
	...

080028c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b087      	sub	sp, #28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028ca:	2300      	movs	r3, #0
 80028cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028ce:	e154      	b.n	8002b7a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	2101      	movs	r1, #1
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	fa01 f303 	lsl.w	r3, r1, r3
 80028dc:	4013      	ands	r3, r2
 80028de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f000 8146 	beq.w	8002b74 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f003 0303 	and.w	r3, r3, #3
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d005      	beq.n	8002900 <HAL_GPIO_Init+0x40>
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f003 0303 	and.w	r3, r3, #3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d130      	bne.n	8002962 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	2203      	movs	r2, #3
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	43db      	mvns	r3, r3
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	4013      	ands	r3, r2
 8002916:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	68da      	ldr	r2, [r3, #12]
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	4313      	orrs	r3, r2
 8002928:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002936:	2201      	movs	r2, #1
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	43db      	mvns	r3, r3
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	4013      	ands	r3, r2
 8002944:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	091b      	lsrs	r3, r3, #4
 800294c:	f003 0201 	and.w	r2, r3, #1
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	4313      	orrs	r3, r2
 800295a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f003 0303 	and.w	r3, r3, #3
 800296a:	2b03      	cmp	r3, #3
 800296c:	d017      	beq.n	800299e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	2203      	movs	r2, #3
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	43db      	mvns	r3, r3
 8002980:	693a      	ldr	r2, [r7, #16]
 8002982:	4013      	ands	r3, r2
 8002984:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	689a      	ldr	r2, [r3, #8]
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	4313      	orrs	r3, r2
 8002996:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f003 0303 	and.w	r3, r3, #3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d123      	bne.n	80029f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	08da      	lsrs	r2, r3, #3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	3208      	adds	r2, #8
 80029b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	f003 0307 	and.w	r3, r3, #7
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	220f      	movs	r2, #15
 80029c2:	fa02 f303 	lsl.w	r3, r2, r3
 80029c6:	43db      	mvns	r3, r3
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	4013      	ands	r3, r2
 80029cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	691a      	ldr	r2, [r3, #16]
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	f003 0307 	and.w	r3, r3, #7
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	08da      	lsrs	r2, r3, #3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	3208      	adds	r2, #8
 80029ec:	6939      	ldr	r1, [r7, #16]
 80029ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	2203      	movs	r2, #3
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	43db      	mvns	r3, r3
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	4013      	ands	r3, r2
 8002a08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f003 0203 	and.w	r2, r3, #3
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f000 80a0 	beq.w	8002b74 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a34:	4b58      	ldr	r3, [pc, #352]	@ (8002b98 <HAL_GPIO_Init+0x2d8>)
 8002a36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a38:	4a57      	ldr	r2, [pc, #348]	@ (8002b98 <HAL_GPIO_Init+0x2d8>)
 8002a3a:	f043 0301 	orr.w	r3, r3, #1
 8002a3e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a40:	4b55      	ldr	r3, [pc, #340]	@ (8002b98 <HAL_GPIO_Init+0x2d8>)
 8002a42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	60bb      	str	r3, [r7, #8]
 8002a4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a4c:	4a53      	ldr	r2, [pc, #332]	@ (8002b9c <HAL_GPIO_Init+0x2dc>)
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	089b      	lsrs	r3, r3, #2
 8002a52:	3302      	adds	r3, #2
 8002a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	f003 0303 	and.w	r3, r3, #3
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	220f      	movs	r2, #15
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002a76:	d019      	beq.n	8002aac <HAL_GPIO_Init+0x1ec>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a49      	ldr	r2, [pc, #292]	@ (8002ba0 <HAL_GPIO_Init+0x2e0>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d013      	beq.n	8002aa8 <HAL_GPIO_Init+0x1e8>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a48      	ldr	r2, [pc, #288]	@ (8002ba4 <HAL_GPIO_Init+0x2e4>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d00d      	beq.n	8002aa4 <HAL_GPIO_Init+0x1e4>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a47      	ldr	r2, [pc, #284]	@ (8002ba8 <HAL_GPIO_Init+0x2e8>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d007      	beq.n	8002aa0 <HAL_GPIO_Init+0x1e0>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4a46      	ldr	r2, [pc, #280]	@ (8002bac <HAL_GPIO_Init+0x2ec>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d101      	bne.n	8002a9c <HAL_GPIO_Init+0x1dc>
 8002a98:	2304      	movs	r3, #4
 8002a9a:	e008      	b.n	8002aae <HAL_GPIO_Init+0x1ee>
 8002a9c:	2307      	movs	r3, #7
 8002a9e:	e006      	b.n	8002aae <HAL_GPIO_Init+0x1ee>
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e004      	b.n	8002aae <HAL_GPIO_Init+0x1ee>
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	e002      	b.n	8002aae <HAL_GPIO_Init+0x1ee>
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e000      	b.n	8002aae <HAL_GPIO_Init+0x1ee>
 8002aac:	2300      	movs	r3, #0
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	f002 0203 	and.w	r2, r2, #3
 8002ab4:	0092      	lsls	r2, r2, #2
 8002ab6:	4093      	lsls	r3, r2
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002abe:	4937      	ldr	r1, [pc, #220]	@ (8002b9c <HAL_GPIO_Init+0x2dc>)
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	089b      	lsrs	r3, r3, #2
 8002ac4:	3302      	adds	r3, #2
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002acc:	4b38      	ldr	r3, [pc, #224]	@ (8002bb0 <HAL_GPIO_Init+0x2f0>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	43db      	mvns	r3, r3
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d003      	beq.n	8002af0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002af0:	4a2f      	ldr	r2, [pc, #188]	@ (8002bb0 <HAL_GPIO_Init+0x2f0>)
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002af6:	4b2e      	ldr	r3, [pc, #184]	@ (8002bb0 <HAL_GPIO_Init+0x2f0>)
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	43db      	mvns	r3, r3
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	4013      	ands	r3, r2
 8002b04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d003      	beq.n	8002b1a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b1a:	4a25      	ldr	r2, [pc, #148]	@ (8002bb0 <HAL_GPIO_Init+0x2f0>)
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002b20:	4b23      	ldr	r3, [pc, #140]	@ (8002bb0 <HAL_GPIO_Init+0x2f0>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d003      	beq.n	8002b44 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b44:	4a1a      	ldr	r2, [pc, #104]	@ (8002bb0 <HAL_GPIO_Init+0x2f0>)
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002b4a:	4b19      	ldr	r3, [pc, #100]	@ (8002bb0 <HAL_GPIO_Init+0x2f0>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	43db      	mvns	r3, r3
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	4013      	ands	r3, r2
 8002b58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b6e:	4a10      	ldr	r2, [pc, #64]	@ (8002bb0 <HAL_GPIO_Init+0x2f0>)
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	3301      	adds	r3, #1
 8002b78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	fa22 f303 	lsr.w	r3, r2, r3
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f47f aea3 	bne.w	80028d0 <HAL_GPIO_Init+0x10>
  }
}
 8002b8a:	bf00      	nop
 8002b8c:	bf00      	nop
 8002b8e:	371c      	adds	r7, #28
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	40010000 	.word	0x40010000
 8002ba0:	48000400 	.word	0x48000400
 8002ba4:	48000800 	.word	0x48000800
 8002ba8:	48000c00 	.word	0x48000c00
 8002bac:	48001000 	.word	0x48001000
 8002bb0:	40010400 	.word	0x40010400

08002bb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	807b      	strh	r3, [r7, #2]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bc4:	787b      	ldrb	r3, [r7, #1]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bca:	887a      	ldrh	r2, [r7, #2]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002bd0:	e002      	b.n	8002bd8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002bd2:	887a      	ldrh	r2, [r7, #2]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002be8:	4b04      	ldr	r3, [pc, #16]	@ (8002bfc <HAL_PWREx_GetVoltageRange+0x18>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	40007000 	.word	0x40007000

08002c00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c0e:	d130      	bne.n	8002c72 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c10:	4b23      	ldr	r3, [pc, #140]	@ (8002ca0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c1c:	d038      	beq.n	8002c90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c1e:	4b20      	ldr	r3, [pc, #128]	@ (8002ca0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c26:	4a1e      	ldr	r2, [pc, #120]	@ (8002ca0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c28:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c2c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c2e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ca4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2232      	movs	r2, #50	@ 0x32
 8002c34:	fb02 f303 	mul.w	r3, r2, r3
 8002c38:	4a1b      	ldr	r2, [pc, #108]	@ (8002ca8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3e:	0c9b      	lsrs	r3, r3, #18
 8002c40:	3301      	adds	r3, #1
 8002c42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c44:	e002      	b.n	8002c4c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c4c:	4b14      	ldr	r3, [pc, #80]	@ (8002ca0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c4e:	695b      	ldr	r3, [r3, #20]
 8002c50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c58:	d102      	bne.n	8002c60 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1f2      	bne.n	8002c46 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c60:	4b0f      	ldr	r3, [pc, #60]	@ (8002ca0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c62:	695b      	ldr	r3, [r3, #20]
 8002c64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c6c:	d110      	bne.n	8002c90 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e00f      	b.n	8002c92 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c72:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c7e:	d007      	beq.n	8002c90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c80:	4b07      	ldr	r3, [pc, #28]	@ (8002ca0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c88:	4a05      	ldr	r2, [pc, #20]	@ (8002ca0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c8e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3714      	adds	r7, #20
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	40007000 	.word	0x40007000
 8002ca4:	20000000 	.word	0x20000000
 8002ca8:	431bde83 	.word	0x431bde83

08002cac <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b088      	sub	sp, #32
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d102      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	f000 bc02 	b.w	80034c4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cc0:	4b96      	ldr	r3, [pc, #600]	@ (8002f1c <HAL_RCC_OscConfig+0x270>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f003 030c 	and.w	r3, r3, #12
 8002cc8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cca:	4b94      	ldr	r3, [pc, #592]	@ (8002f1c <HAL_RCC_OscConfig+0x270>)
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	f003 0303 	and.w	r3, r3, #3
 8002cd2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0310 	and.w	r3, r3, #16
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 80e4 	beq.w	8002eaa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d007      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x4c>
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	2b0c      	cmp	r3, #12
 8002cec:	f040 808b 	bne.w	8002e06 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	f040 8087 	bne.w	8002e06 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cf8:	4b88      	ldr	r3, [pc, #544]	@ (8002f1c <HAL_RCC_OscConfig+0x270>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d005      	beq.n	8002d10 <HAL_RCC_OscConfig+0x64>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e3d9      	b.n	80034c4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a1a      	ldr	r2, [r3, #32]
 8002d14:	4b81      	ldr	r3, [pc, #516]	@ (8002f1c <HAL_RCC_OscConfig+0x270>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0308 	and.w	r3, r3, #8
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d004      	beq.n	8002d2a <HAL_RCC_OscConfig+0x7e>
 8002d20:	4b7e      	ldr	r3, [pc, #504]	@ (8002f1c <HAL_RCC_OscConfig+0x270>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d28:	e005      	b.n	8002d36 <HAL_RCC_OscConfig+0x8a>
 8002d2a:	4b7c      	ldr	r3, [pc, #496]	@ (8002f1c <HAL_RCC_OscConfig+0x270>)
 8002d2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d30:	091b      	lsrs	r3, r3, #4
 8002d32:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d223      	bcs.n	8002d82 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f000 fd8c 	bl	800385c <RCC_SetFlashLatencyFromMSIRange>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e3ba      	b.n	80034c4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d4e:	4b73      	ldr	r3, [pc, #460]	@ (8002f1c <HAL_RCC_OscConfig+0x270>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a72      	ldr	r2, [pc, #456]	@ (8002f1c <HAL_RCC_OscConfig+0x270>)
 8002d54:	f043 0308 	orr.w	r3, r3, #8
 8002d58:	6013      	str	r3, [r2, #0]
 8002d5a:	4b70      	ldr	r3, [pc, #448]	@ (8002f1c <HAL_RCC_OscConfig+0x270>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	496d      	ldr	r1, [pc, #436]	@ (8002f1c <HAL_RCC_OscConfig+0x270>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d6c:	4b6b      	ldr	r3, [pc, #428]	@ (8002f1c <HAL_RCC_OscConfig+0x270>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	69db      	ldr	r3, [r3, #28]
 8002d78:	021b      	lsls	r3, r3, #8
 8002d7a:	4968      	ldr	r1, [pc, #416]	@ (8002f1c <HAL_RCC_OscConfig+0x270>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	604b      	str	r3, [r1, #4]
 8002d80:	e025      	b.n	8002dce <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d82:	4b66      	ldr	r3, [pc, #408]	@ (8002f1c <HAL_RCC_OscConfig+0x270>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a65      	ldr	r2, [pc, #404]	@ (8002f1c <HAL_RCC_OscConfig+0x270>)
 8002d88:	f043 0308 	orr.w	r3, r3, #8
 8002d8c:	6013      	str	r3, [r2, #0]
 8002d8e:	4b63      	ldr	r3, [pc, #396]	@ (8002f1c <HAL_RCC_OscConfig+0x270>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	4960      	ldr	r1, [pc, #384]	@ (8002f1c <HAL_RCC_OscConfig+0x270>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002da0:	4b5e      	ldr	r3, [pc, #376]	@ (8002f1c <HAL_RCC_OscConfig+0x270>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	69db      	ldr	r3, [r3, #28]
 8002dac:	021b      	lsls	r3, r3, #8
 8002dae:	495b      	ldr	r1, [pc, #364]	@ (8002f1c <HAL_RCC_OscConfig+0x270>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d109      	bne.n	8002dce <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 fd4c 	bl	800385c <RCC_SetFlashLatencyFromMSIRange>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e37a      	b.n	80034c4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002dce:	f000 fc81 	bl	80036d4 <HAL_RCC_GetSysClockFreq>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	4b51      	ldr	r3, [pc, #324]	@ (8002f1c <HAL_RCC_OscConfig+0x270>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	091b      	lsrs	r3, r3, #4
 8002dda:	f003 030f 	and.w	r3, r3, #15
 8002dde:	4950      	ldr	r1, [pc, #320]	@ (8002f20 <HAL_RCC_OscConfig+0x274>)
 8002de0:	5ccb      	ldrb	r3, [r1, r3]
 8002de2:	f003 031f 	and.w	r3, r3, #31
 8002de6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dea:	4a4e      	ldr	r2, [pc, #312]	@ (8002f24 <HAL_RCC_OscConfig+0x278>)
 8002dec:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002dee:	4b4e      	ldr	r3, [pc, #312]	@ (8002f28 <HAL_RCC_OscConfig+0x27c>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7fe f872 	bl	8000edc <HAL_InitTick>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002dfc:	7bfb      	ldrb	r3, [r7, #15]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d052      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002e02:	7bfb      	ldrb	r3, [r7, #15]
 8002e04:	e35e      	b.n	80034c4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d032      	beq.n	8002e74 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e0e:	4b43      	ldr	r3, [pc, #268]	@ (8002f1c <HAL_RCC_OscConfig+0x270>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a42      	ldr	r2, [pc, #264]	@ (8002f1c <HAL_RCC_OscConfig+0x270>)
 8002e14:	f043 0301 	orr.w	r3, r3, #1
 8002e18:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e1a:	f7fe f8af 	bl	8000f7c <HAL_GetTick>
 8002e1e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e20:	e008      	b.n	8002e34 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e22:	f7fe f8ab 	bl	8000f7c <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e347      	b.n	80034c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e34:	4b39      	ldr	r3, [pc, #228]	@ (8002f1c <HAL_RCC_OscConfig+0x270>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d0f0      	beq.n	8002e22 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e40:	4b36      	ldr	r3, [pc, #216]	@ (8002f1c <HAL_RCC_OscConfig+0x270>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a35      	ldr	r2, [pc, #212]	@ (8002f1c <HAL_RCC_OscConfig+0x270>)
 8002e46:	f043 0308 	orr.w	r3, r3, #8
 8002e4a:	6013      	str	r3, [r2, #0]
 8002e4c:	4b33      	ldr	r3, [pc, #204]	@ (8002f1c <HAL_RCC_OscConfig+0x270>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	4930      	ldr	r1, [pc, #192]	@ (8002f1c <HAL_RCC_OscConfig+0x270>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e5e:	4b2f      	ldr	r3, [pc, #188]	@ (8002f1c <HAL_RCC_OscConfig+0x270>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	021b      	lsls	r3, r3, #8
 8002e6c:	492b      	ldr	r1, [pc, #172]	@ (8002f1c <HAL_RCC_OscConfig+0x270>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	604b      	str	r3, [r1, #4]
 8002e72:	e01a      	b.n	8002eaa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e74:	4b29      	ldr	r3, [pc, #164]	@ (8002f1c <HAL_RCC_OscConfig+0x270>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a28      	ldr	r2, [pc, #160]	@ (8002f1c <HAL_RCC_OscConfig+0x270>)
 8002e7a:	f023 0301 	bic.w	r3, r3, #1
 8002e7e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e80:	f7fe f87c 	bl	8000f7c <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e88:	f7fe f878 	bl	8000f7c <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e314      	b.n	80034c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e9a:	4b20      	ldr	r3, [pc, #128]	@ (8002f1c <HAL_RCC_OscConfig+0x270>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1f0      	bne.n	8002e88 <HAL_RCC_OscConfig+0x1dc>
 8002ea6:	e000      	b.n	8002eaa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ea8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d073      	beq.n	8002f9e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	2b08      	cmp	r3, #8
 8002eba:	d005      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x21c>
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	2b0c      	cmp	r3, #12
 8002ec0:	d10e      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	2b03      	cmp	r3, #3
 8002ec6:	d10b      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec8:	4b14      	ldr	r3, [pc, #80]	@ (8002f1c <HAL_RCC_OscConfig+0x270>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d063      	beq.n	8002f9c <HAL_RCC_OscConfig+0x2f0>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d15f      	bne.n	8002f9c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e2f1      	b.n	80034c4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ee8:	d106      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x24c>
 8002eea:	4b0c      	ldr	r3, [pc, #48]	@ (8002f1c <HAL_RCC_OscConfig+0x270>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a0b      	ldr	r2, [pc, #44]	@ (8002f1c <HAL_RCC_OscConfig+0x270>)
 8002ef0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ef4:	6013      	str	r3, [r2, #0]
 8002ef6:	e025      	b.n	8002f44 <HAL_RCC_OscConfig+0x298>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f00:	d114      	bne.n	8002f2c <HAL_RCC_OscConfig+0x280>
 8002f02:	4b06      	ldr	r3, [pc, #24]	@ (8002f1c <HAL_RCC_OscConfig+0x270>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a05      	ldr	r2, [pc, #20]	@ (8002f1c <HAL_RCC_OscConfig+0x270>)
 8002f08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f0c:	6013      	str	r3, [r2, #0]
 8002f0e:	4b03      	ldr	r3, [pc, #12]	@ (8002f1c <HAL_RCC_OscConfig+0x270>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a02      	ldr	r2, [pc, #8]	@ (8002f1c <HAL_RCC_OscConfig+0x270>)
 8002f14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f18:	6013      	str	r3, [r2, #0]
 8002f1a:	e013      	b.n	8002f44 <HAL_RCC_OscConfig+0x298>
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	080069e8 	.word	0x080069e8
 8002f24:	20000000 	.word	0x20000000
 8002f28:	20000004 	.word	0x20000004
 8002f2c:	4ba0      	ldr	r3, [pc, #640]	@ (80031b0 <HAL_RCC_OscConfig+0x504>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a9f      	ldr	r2, [pc, #636]	@ (80031b0 <HAL_RCC_OscConfig+0x504>)
 8002f32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f36:	6013      	str	r3, [r2, #0]
 8002f38:	4b9d      	ldr	r3, [pc, #628]	@ (80031b0 <HAL_RCC_OscConfig+0x504>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a9c      	ldr	r2, [pc, #624]	@ (80031b0 <HAL_RCC_OscConfig+0x504>)
 8002f3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d013      	beq.n	8002f74 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f4c:	f7fe f816 	bl	8000f7c <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f54:	f7fe f812 	bl	8000f7c <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b64      	cmp	r3, #100	@ 0x64
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e2ae      	b.n	80034c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f66:	4b92      	ldr	r3, [pc, #584]	@ (80031b0 <HAL_RCC_OscConfig+0x504>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d0f0      	beq.n	8002f54 <HAL_RCC_OscConfig+0x2a8>
 8002f72:	e014      	b.n	8002f9e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f74:	f7fe f802 	bl	8000f7c <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f7c:	f7fd fffe 	bl	8000f7c <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b64      	cmp	r3, #100	@ 0x64
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e29a      	b.n	80034c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f8e:	4b88      	ldr	r3, [pc, #544]	@ (80031b0 <HAL_RCC_OscConfig+0x504>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1f0      	bne.n	8002f7c <HAL_RCC_OscConfig+0x2d0>
 8002f9a:	e000      	b.n	8002f9e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d060      	beq.n	800306c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	2b04      	cmp	r3, #4
 8002fae:	d005      	beq.n	8002fbc <HAL_RCC_OscConfig+0x310>
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	2b0c      	cmp	r3, #12
 8002fb4:	d119      	bne.n	8002fea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d116      	bne.n	8002fea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fbc:	4b7c      	ldr	r3, [pc, #496]	@ (80031b0 <HAL_RCC_OscConfig+0x504>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d005      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x328>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d101      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e277      	b.n	80034c4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd4:	4b76      	ldr	r3, [pc, #472]	@ (80031b0 <HAL_RCC_OscConfig+0x504>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	061b      	lsls	r3, r3, #24
 8002fe2:	4973      	ldr	r1, [pc, #460]	@ (80031b0 <HAL_RCC_OscConfig+0x504>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fe8:	e040      	b.n	800306c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d023      	beq.n	800303a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ff2:	4b6f      	ldr	r3, [pc, #444]	@ (80031b0 <HAL_RCC_OscConfig+0x504>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a6e      	ldr	r2, [pc, #440]	@ (80031b0 <HAL_RCC_OscConfig+0x504>)
 8002ff8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ffc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffe:	f7fd ffbd 	bl	8000f7c <HAL_GetTick>
 8003002:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003004:	e008      	b.n	8003018 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003006:	f7fd ffb9 	bl	8000f7c <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e255      	b.n	80034c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003018:	4b65      	ldr	r3, [pc, #404]	@ (80031b0 <HAL_RCC_OscConfig+0x504>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003020:	2b00      	cmp	r3, #0
 8003022:	d0f0      	beq.n	8003006 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003024:	4b62      	ldr	r3, [pc, #392]	@ (80031b0 <HAL_RCC_OscConfig+0x504>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	061b      	lsls	r3, r3, #24
 8003032:	495f      	ldr	r1, [pc, #380]	@ (80031b0 <HAL_RCC_OscConfig+0x504>)
 8003034:	4313      	orrs	r3, r2
 8003036:	604b      	str	r3, [r1, #4]
 8003038:	e018      	b.n	800306c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800303a:	4b5d      	ldr	r3, [pc, #372]	@ (80031b0 <HAL_RCC_OscConfig+0x504>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a5c      	ldr	r2, [pc, #368]	@ (80031b0 <HAL_RCC_OscConfig+0x504>)
 8003040:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003044:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003046:	f7fd ff99 	bl	8000f7c <HAL_GetTick>
 800304a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800304c:	e008      	b.n	8003060 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800304e:	f7fd ff95 	bl	8000f7c <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e231      	b.n	80034c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003060:	4b53      	ldr	r3, [pc, #332]	@ (80031b0 <HAL_RCC_OscConfig+0x504>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1f0      	bne.n	800304e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0308 	and.w	r3, r3, #8
 8003074:	2b00      	cmp	r3, #0
 8003076:	d03c      	beq.n	80030f2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	695b      	ldr	r3, [r3, #20]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d01c      	beq.n	80030ba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003080:	4b4b      	ldr	r3, [pc, #300]	@ (80031b0 <HAL_RCC_OscConfig+0x504>)
 8003082:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003086:	4a4a      	ldr	r2, [pc, #296]	@ (80031b0 <HAL_RCC_OscConfig+0x504>)
 8003088:	f043 0301 	orr.w	r3, r3, #1
 800308c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003090:	f7fd ff74 	bl	8000f7c <HAL_GetTick>
 8003094:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003096:	e008      	b.n	80030aa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003098:	f7fd ff70 	bl	8000f7c <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e20c      	b.n	80034c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030aa:	4b41      	ldr	r3, [pc, #260]	@ (80031b0 <HAL_RCC_OscConfig+0x504>)
 80030ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d0ef      	beq.n	8003098 <HAL_RCC_OscConfig+0x3ec>
 80030b8:	e01b      	b.n	80030f2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030ba:	4b3d      	ldr	r3, [pc, #244]	@ (80031b0 <HAL_RCC_OscConfig+0x504>)
 80030bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030c0:	4a3b      	ldr	r2, [pc, #236]	@ (80031b0 <HAL_RCC_OscConfig+0x504>)
 80030c2:	f023 0301 	bic.w	r3, r3, #1
 80030c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ca:	f7fd ff57 	bl	8000f7c <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030d0:	e008      	b.n	80030e4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030d2:	f7fd ff53 	bl	8000f7c <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e1ef      	b.n	80034c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030e4:	4b32      	ldr	r3, [pc, #200]	@ (80031b0 <HAL_RCC_OscConfig+0x504>)
 80030e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1ef      	bne.n	80030d2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0304 	and.w	r3, r3, #4
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f000 80a6 	beq.w	800324c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003100:	2300      	movs	r3, #0
 8003102:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003104:	4b2a      	ldr	r3, [pc, #168]	@ (80031b0 <HAL_RCC_OscConfig+0x504>)
 8003106:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003108:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d10d      	bne.n	800312c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003110:	4b27      	ldr	r3, [pc, #156]	@ (80031b0 <HAL_RCC_OscConfig+0x504>)
 8003112:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003114:	4a26      	ldr	r2, [pc, #152]	@ (80031b0 <HAL_RCC_OscConfig+0x504>)
 8003116:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800311a:	6593      	str	r3, [r2, #88]	@ 0x58
 800311c:	4b24      	ldr	r3, [pc, #144]	@ (80031b0 <HAL_RCC_OscConfig+0x504>)
 800311e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003120:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003124:	60bb      	str	r3, [r7, #8]
 8003126:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003128:	2301      	movs	r3, #1
 800312a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800312c:	4b21      	ldr	r3, [pc, #132]	@ (80031b4 <HAL_RCC_OscConfig+0x508>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003134:	2b00      	cmp	r3, #0
 8003136:	d118      	bne.n	800316a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003138:	4b1e      	ldr	r3, [pc, #120]	@ (80031b4 <HAL_RCC_OscConfig+0x508>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a1d      	ldr	r2, [pc, #116]	@ (80031b4 <HAL_RCC_OscConfig+0x508>)
 800313e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003142:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003144:	f7fd ff1a 	bl	8000f7c <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800314c:	f7fd ff16 	bl	8000f7c <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e1b2      	b.n	80034c4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800315e:	4b15      	ldr	r3, [pc, #84]	@ (80031b4 <HAL_RCC_OscConfig+0x508>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003166:	2b00      	cmp	r3, #0
 8003168:	d0f0      	beq.n	800314c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d108      	bne.n	8003184 <HAL_RCC_OscConfig+0x4d8>
 8003172:	4b0f      	ldr	r3, [pc, #60]	@ (80031b0 <HAL_RCC_OscConfig+0x504>)
 8003174:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003178:	4a0d      	ldr	r2, [pc, #52]	@ (80031b0 <HAL_RCC_OscConfig+0x504>)
 800317a:	f043 0301 	orr.w	r3, r3, #1
 800317e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003182:	e029      	b.n	80031d8 <HAL_RCC_OscConfig+0x52c>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	2b05      	cmp	r3, #5
 800318a:	d115      	bne.n	80031b8 <HAL_RCC_OscConfig+0x50c>
 800318c:	4b08      	ldr	r3, [pc, #32]	@ (80031b0 <HAL_RCC_OscConfig+0x504>)
 800318e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003192:	4a07      	ldr	r2, [pc, #28]	@ (80031b0 <HAL_RCC_OscConfig+0x504>)
 8003194:	f043 0304 	orr.w	r3, r3, #4
 8003198:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800319c:	4b04      	ldr	r3, [pc, #16]	@ (80031b0 <HAL_RCC_OscConfig+0x504>)
 800319e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031a2:	4a03      	ldr	r2, [pc, #12]	@ (80031b0 <HAL_RCC_OscConfig+0x504>)
 80031a4:	f043 0301 	orr.w	r3, r3, #1
 80031a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031ac:	e014      	b.n	80031d8 <HAL_RCC_OscConfig+0x52c>
 80031ae:	bf00      	nop
 80031b0:	40021000 	.word	0x40021000
 80031b4:	40007000 	.word	0x40007000
 80031b8:	4b9a      	ldr	r3, [pc, #616]	@ (8003424 <HAL_RCC_OscConfig+0x778>)
 80031ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031be:	4a99      	ldr	r2, [pc, #612]	@ (8003424 <HAL_RCC_OscConfig+0x778>)
 80031c0:	f023 0301 	bic.w	r3, r3, #1
 80031c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031c8:	4b96      	ldr	r3, [pc, #600]	@ (8003424 <HAL_RCC_OscConfig+0x778>)
 80031ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ce:	4a95      	ldr	r2, [pc, #596]	@ (8003424 <HAL_RCC_OscConfig+0x778>)
 80031d0:	f023 0304 	bic.w	r3, r3, #4
 80031d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d016      	beq.n	800320e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e0:	f7fd fecc 	bl	8000f7c <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031e6:	e00a      	b.n	80031fe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031e8:	f7fd fec8 	bl	8000f7c <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e162      	b.n	80034c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031fe:	4b89      	ldr	r3, [pc, #548]	@ (8003424 <HAL_RCC_OscConfig+0x778>)
 8003200:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d0ed      	beq.n	80031e8 <HAL_RCC_OscConfig+0x53c>
 800320c:	e015      	b.n	800323a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800320e:	f7fd feb5 	bl	8000f7c <HAL_GetTick>
 8003212:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003214:	e00a      	b.n	800322c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003216:	f7fd feb1 	bl	8000f7c <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003224:	4293      	cmp	r3, r2
 8003226:	d901      	bls.n	800322c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e14b      	b.n	80034c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800322c:	4b7d      	ldr	r3, [pc, #500]	@ (8003424 <HAL_RCC_OscConfig+0x778>)
 800322e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1ed      	bne.n	8003216 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800323a:	7ffb      	ldrb	r3, [r7, #31]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d105      	bne.n	800324c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003240:	4b78      	ldr	r3, [pc, #480]	@ (8003424 <HAL_RCC_OscConfig+0x778>)
 8003242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003244:	4a77      	ldr	r2, [pc, #476]	@ (8003424 <HAL_RCC_OscConfig+0x778>)
 8003246:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800324a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0320 	and.w	r3, r3, #32
 8003254:	2b00      	cmp	r3, #0
 8003256:	d03c      	beq.n	80032d2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800325c:	2b00      	cmp	r3, #0
 800325e:	d01c      	beq.n	800329a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003260:	4b70      	ldr	r3, [pc, #448]	@ (8003424 <HAL_RCC_OscConfig+0x778>)
 8003262:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003266:	4a6f      	ldr	r2, [pc, #444]	@ (8003424 <HAL_RCC_OscConfig+0x778>)
 8003268:	f043 0301 	orr.w	r3, r3, #1
 800326c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003270:	f7fd fe84 	bl	8000f7c <HAL_GetTick>
 8003274:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003276:	e008      	b.n	800328a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003278:	f7fd fe80 	bl	8000f7c <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e11c      	b.n	80034c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800328a:	4b66      	ldr	r3, [pc, #408]	@ (8003424 <HAL_RCC_OscConfig+0x778>)
 800328c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d0ef      	beq.n	8003278 <HAL_RCC_OscConfig+0x5cc>
 8003298:	e01b      	b.n	80032d2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800329a:	4b62      	ldr	r3, [pc, #392]	@ (8003424 <HAL_RCC_OscConfig+0x778>)
 800329c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80032a0:	4a60      	ldr	r2, [pc, #384]	@ (8003424 <HAL_RCC_OscConfig+0x778>)
 80032a2:	f023 0301 	bic.w	r3, r3, #1
 80032a6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032aa:	f7fd fe67 	bl	8000f7c <HAL_GetTick>
 80032ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032b0:	e008      	b.n	80032c4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032b2:	f7fd fe63 	bl	8000f7c <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e0ff      	b.n	80034c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032c4:	4b57      	ldr	r3, [pc, #348]	@ (8003424 <HAL_RCC_OscConfig+0x778>)
 80032c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1ef      	bne.n	80032b2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	f000 80f3 	beq.w	80034c2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	f040 80c9 	bne.w	8003478 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80032e6:	4b4f      	ldr	r3, [pc, #316]	@ (8003424 <HAL_RCC_OscConfig+0x778>)
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	f003 0203 	and.w	r2, r3, #3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d12c      	bne.n	8003354 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003304:	3b01      	subs	r3, #1
 8003306:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003308:	429a      	cmp	r2, r3
 800330a:	d123      	bne.n	8003354 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003316:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003318:	429a      	cmp	r2, r3
 800331a:	d11b      	bne.n	8003354 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003326:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003328:	429a      	cmp	r2, r3
 800332a:	d113      	bne.n	8003354 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003336:	085b      	lsrs	r3, r3, #1
 8003338:	3b01      	subs	r3, #1
 800333a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800333c:	429a      	cmp	r2, r3
 800333e:	d109      	bne.n	8003354 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334a:	085b      	lsrs	r3, r3, #1
 800334c:	3b01      	subs	r3, #1
 800334e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003350:	429a      	cmp	r2, r3
 8003352:	d06b      	beq.n	800342c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	2b0c      	cmp	r3, #12
 8003358:	d062      	beq.n	8003420 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800335a:	4b32      	ldr	r3, [pc, #200]	@ (8003424 <HAL_RCC_OscConfig+0x778>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e0ac      	b.n	80034c4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800336a:	4b2e      	ldr	r3, [pc, #184]	@ (8003424 <HAL_RCC_OscConfig+0x778>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a2d      	ldr	r2, [pc, #180]	@ (8003424 <HAL_RCC_OscConfig+0x778>)
 8003370:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003374:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003376:	f7fd fe01 	bl	8000f7c <HAL_GetTick>
 800337a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800337c:	e008      	b.n	8003390 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800337e:	f7fd fdfd 	bl	8000f7c <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b02      	cmp	r3, #2
 800338a:	d901      	bls.n	8003390 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e099      	b.n	80034c4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003390:	4b24      	ldr	r3, [pc, #144]	@ (8003424 <HAL_RCC_OscConfig+0x778>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1f0      	bne.n	800337e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800339c:	4b21      	ldr	r3, [pc, #132]	@ (8003424 <HAL_RCC_OscConfig+0x778>)
 800339e:	68da      	ldr	r2, [r3, #12]
 80033a0:	4b21      	ldr	r3, [pc, #132]	@ (8003428 <HAL_RCC_OscConfig+0x77c>)
 80033a2:	4013      	ands	r3, r2
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80033ac:	3a01      	subs	r2, #1
 80033ae:	0112      	lsls	r2, r2, #4
 80033b0:	4311      	orrs	r1, r2
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80033b6:	0212      	lsls	r2, r2, #8
 80033b8:	4311      	orrs	r1, r2
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80033be:	0852      	lsrs	r2, r2, #1
 80033c0:	3a01      	subs	r2, #1
 80033c2:	0552      	lsls	r2, r2, #21
 80033c4:	4311      	orrs	r1, r2
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80033ca:	0852      	lsrs	r2, r2, #1
 80033cc:	3a01      	subs	r2, #1
 80033ce:	0652      	lsls	r2, r2, #25
 80033d0:	4311      	orrs	r1, r2
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80033d6:	06d2      	lsls	r2, r2, #27
 80033d8:	430a      	orrs	r2, r1
 80033da:	4912      	ldr	r1, [pc, #72]	@ (8003424 <HAL_RCC_OscConfig+0x778>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80033e0:	4b10      	ldr	r3, [pc, #64]	@ (8003424 <HAL_RCC_OscConfig+0x778>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a0f      	ldr	r2, [pc, #60]	@ (8003424 <HAL_RCC_OscConfig+0x778>)
 80033e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033ea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033ec:	4b0d      	ldr	r3, [pc, #52]	@ (8003424 <HAL_RCC_OscConfig+0x778>)
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	4a0c      	ldr	r2, [pc, #48]	@ (8003424 <HAL_RCC_OscConfig+0x778>)
 80033f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033f8:	f7fd fdc0 	bl	8000f7c <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003400:	f7fd fdbc 	bl	8000f7c <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e058      	b.n	80034c4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003412:	4b04      	ldr	r3, [pc, #16]	@ (8003424 <HAL_RCC_OscConfig+0x778>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d0f0      	beq.n	8003400 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800341e:	e050      	b.n	80034c2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e04f      	b.n	80034c4 <HAL_RCC_OscConfig+0x818>
 8003424:	40021000 	.word	0x40021000
 8003428:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800342c:	4b27      	ldr	r3, [pc, #156]	@ (80034cc <HAL_RCC_OscConfig+0x820>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d144      	bne.n	80034c2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003438:	4b24      	ldr	r3, [pc, #144]	@ (80034cc <HAL_RCC_OscConfig+0x820>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a23      	ldr	r2, [pc, #140]	@ (80034cc <HAL_RCC_OscConfig+0x820>)
 800343e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003442:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003444:	4b21      	ldr	r3, [pc, #132]	@ (80034cc <HAL_RCC_OscConfig+0x820>)
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	4a20      	ldr	r2, [pc, #128]	@ (80034cc <HAL_RCC_OscConfig+0x820>)
 800344a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800344e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003450:	f7fd fd94 	bl	8000f7c <HAL_GetTick>
 8003454:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003458:	f7fd fd90 	bl	8000f7c <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e02c      	b.n	80034c4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800346a:	4b18      	ldr	r3, [pc, #96]	@ (80034cc <HAL_RCC_OscConfig+0x820>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d0f0      	beq.n	8003458 <HAL_RCC_OscConfig+0x7ac>
 8003476:	e024      	b.n	80034c2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	2b0c      	cmp	r3, #12
 800347c:	d01f      	beq.n	80034be <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800347e:	4b13      	ldr	r3, [pc, #76]	@ (80034cc <HAL_RCC_OscConfig+0x820>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a12      	ldr	r2, [pc, #72]	@ (80034cc <HAL_RCC_OscConfig+0x820>)
 8003484:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003488:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800348a:	f7fd fd77 	bl	8000f7c <HAL_GetTick>
 800348e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003490:	e008      	b.n	80034a4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003492:	f7fd fd73 	bl	8000f7c <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e00f      	b.n	80034c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034a4:	4b09      	ldr	r3, [pc, #36]	@ (80034cc <HAL_RCC_OscConfig+0x820>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1f0      	bne.n	8003492 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80034b0:	4b06      	ldr	r3, [pc, #24]	@ (80034cc <HAL_RCC_OscConfig+0x820>)
 80034b2:	68da      	ldr	r2, [r3, #12]
 80034b4:	4905      	ldr	r1, [pc, #20]	@ (80034cc <HAL_RCC_OscConfig+0x820>)
 80034b6:	4b06      	ldr	r3, [pc, #24]	@ (80034d0 <HAL_RCC_OscConfig+0x824>)
 80034b8:	4013      	ands	r3, r2
 80034ba:	60cb      	str	r3, [r1, #12]
 80034bc:	e001      	b.n	80034c2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e000      	b.n	80034c4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3720      	adds	r7, #32
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	40021000 	.word	0x40021000
 80034d0:	feeefffc 	.word	0xfeeefffc

080034d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e0e7      	b.n	80036b8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034e8:	4b75      	ldr	r3, [pc, #468]	@ (80036c0 <HAL_RCC_ClockConfig+0x1ec>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0307 	and.w	r3, r3, #7
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d910      	bls.n	8003518 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034f6:	4b72      	ldr	r3, [pc, #456]	@ (80036c0 <HAL_RCC_ClockConfig+0x1ec>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f023 0207 	bic.w	r2, r3, #7
 80034fe:	4970      	ldr	r1, [pc, #448]	@ (80036c0 <HAL_RCC_ClockConfig+0x1ec>)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	4313      	orrs	r3, r2
 8003504:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003506:	4b6e      	ldr	r3, [pc, #440]	@ (80036c0 <HAL_RCC_ClockConfig+0x1ec>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0307 	and.w	r3, r3, #7
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	429a      	cmp	r2, r3
 8003512:	d001      	beq.n	8003518 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e0cf      	b.n	80036b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b00      	cmp	r3, #0
 8003522:	d010      	beq.n	8003546 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	4b66      	ldr	r3, [pc, #408]	@ (80036c4 <HAL_RCC_ClockConfig+0x1f0>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003530:	429a      	cmp	r2, r3
 8003532:	d908      	bls.n	8003546 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003534:	4b63      	ldr	r3, [pc, #396]	@ (80036c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	4960      	ldr	r1, [pc, #384]	@ (80036c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003542:	4313      	orrs	r3, r2
 8003544:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	2b00      	cmp	r3, #0
 8003550:	d04c      	beq.n	80035ec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	2b03      	cmp	r3, #3
 8003558:	d107      	bne.n	800356a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800355a:	4b5a      	ldr	r3, [pc, #360]	@ (80036c4 <HAL_RCC_ClockConfig+0x1f0>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d121      	bne.n	80035aa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e0a6      	b.n	80036b8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	2b02      	cmp	r3, #2
 8003570:	d107      	bne.n	8003582 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003572:	4b54      	ldr	r3, [pc, #336]	@ (80036c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d115      	bne.n	80035aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e09a      	b.n	80036b8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d107      	bne.n	800359a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800358a:	4b4e      	ldr	r3, [pc, #312]	@ (80036c4 <HAL_RCC_ClockConfig+0x1f0>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d109      	bne.n	80035aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e08e      	b.n	80036b8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800359a:	4b4a      	ldr	r3, [pc, #296]	@ (80036c4 <HAL_RCC_ClockConfig+0x1f0>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e086      	b.n	80036b8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035aa:	4b46      	ldr	r3, [pc, #280]	@ (80036c4 <HAL_RCC_ClockConfig+0x1f0>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f023 0203 	bic.w	r2, r3, #3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	4943      	ldr	r1, [pc, #268]	@ (80036c4 <HAL_RCC_ClockConfig+0x1f0>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035bc:	f7fd fcde 	bl	8000f7c <HAL_GetTick>
 80035c0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035c2:	e00a      	b.n	80035da <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035c4:	f7fd fcda 	bl	8000f7c <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e06e      	b.n	80036b8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035da:	4b3a      	ldr	r3, [pc, #232]	@ (80036c4 <HAL_RCC_ClockConfig+0x1f0>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f003 020c 	and.w	r2, r3, #12
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d1eb      	bne.n	80035c4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0302 	and.w	r3, r3, #2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d010      	beq.n	800361a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689a      	ldr	r2, [r3, #8]
 80035fc:	4b31      	ldr	r3, [pc, #196]	@ (80036c4 <HAL_RCC_ClockConfig+0x1f0>)
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003604:	429a      	cmp	r2, r3
 8003606:	d208      	bcs.n	800361a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003608:	4b2e      	ldr	r3, [pc, #184]	@ (80036c4 <HAL_RCC_ClockConfig+0x1f0>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	492b      	ldr	r1, [pc, #172]	@ (80036c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003616:	4313      	orrs	r3, r2
 8003618:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800361a:	4b29      	ldr	r3, [pc, #164]	@ (80036c0 <HAL_RCC_ClockConfig+0x1ec>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0307 	and.w	r3, r3, #7
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	429a      	cmp	r2, r3
 8003626:	d210      	bcs.n	800364a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003628:	4b25      	ldr	r3, [pc, #148]	@ (80036c0 <HAL_RCC_ClockConfig+0x1ec>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f023 0207 	bic.w	r2, r3, #7
 8003630:	4923      	ldr	r1, [pc, #140]	@ (80036c0 <HAL_RCC_ClockConfig+0x1ec>)
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	4313      	orrs	r3, r2
 8003636:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003638:	4b21      	ldr	r3, [pc, #132]	@ (80036c0 <HAL_RCC_ClockConfig+0x1ec>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0307 	and.w	r3, r3, #7
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	429a      	cmp	r2, r3
 8003644:	d001      	beq.n	800364a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e036      	b.n	80036b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0304 	and.w	r3, r3, #4
 8003652:	2b00      	cmp	r3, #0
 8003654:	d008      	beq.n	8003668 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003656:	4b1b      	ldr	r3, [pc, #108]	@ (80036c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	4918      	ldr	r1, [pc, #96]	@ (80036c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003664:	4313      	orrs	r3, r2
 8003666:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0308 	and.w	r3, r3, #8
 8003670:	2b00      	cmp	r3, #0
 8003672:	d009      	beq.n	8003688 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003674:	4b13      	ldr	r3, [pc, #76]	@ (80036c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	00db      	lsls	r3, r3, #3
 8003682:	4910      	ldr	r1, [pc, #64]	@ (80036c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003684:	4313      	orrs	r3, r2
 8003686:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003688:	f000 f824 	bl	80036d4 <HAL_RCC_GetSysClockFreq>
 800368c:	4602      	mov	r2, r0
 800368e:	4b0d      	ldr	r3, [pc, #52]	@ (80036c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	091b      	lsrs	r3, r3, #4
 8003694:	f003 030f 	and.w	r3, r3, #15
 8003698:	490b      	ldr	r1, [pc, #44]	@ (80036c8 <HAL_RCC_ClockConfig+0x1f4>)
 800369a:	5ccb      	ldrb	r3, [r1, r3]
 800369c:	f003 031f 	and.w	r3, r3, #31
 80036a0:	fa22 f303 	lsr.w	r3, r2, r3
 80036a4:	4a09      	ldr	r2, [pc, #36]	@ (80036cc <HAL_RCC_ClockConfig+0x1f8>)
 80036a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80036a8:	4b09      	ldr	r3, [pc, #36]	@ (80036d0 <HAL_RCC_ClockConfig+0x1fc>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7fd fc15 	bl	8000edc <HAL_InitTick>
 80036b2:	4603      	mov	r3, r0
 80036b4:	72fb      	strb	r3, [r7, #11]

  return status;
 80036b6:	7afb      	ldrb	r3, [r7, #11]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3710      	adds	r7, #16
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	40022000 	.word	0x40022000
 80036c4:	40021000 	.word	0x40021000
 80036c8:	080069e8 	.word	0x080069e8
 80036cc:	20000000 	.word	0x20000000
 80036d0:	20000004 	.word	0x20000004

080036d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b089      	sub	sp, #36	@ 0x24
 80036d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80036da:	2300      	movs	r3, #0
 80036dc:	61fb      	str	r3, [r7, #28]
 80036de:	2300      	movs	r3, #0
 80036e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036e2:	4b3e      	ldr	r3, [pc, #248]	@ (80037dc <HAL_RCC_GetSysClockFreq+0x108>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f003 030c 	and.w	r3, r3, #12
 80036ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036ec:	4b3b      	ldr	r3, [pc, #236]	@ (80037dc <HAL_RCC_GetSysClockFreq+0x108>)
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	f003 0303 	and.w	r3, r3, #3
 80036f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d005      	beq.n	8003708 <HAL_RCC_GetSysClockFreq+0x34>
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	2b0c      	cmp	r3, #12
 8003700:	d121      	bne.n	8003746 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d11e      	bne.n	8003746 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003708:	4b34      	ldr	r3, [pc, #208]	@ (80037dc <HAL_RCC_GetSysClockFreq+0x108>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0308 	and.w	r3, r3, #8
 8003710:	2b00      	cmp	r3, #0
 8003712:	d107      	bne.n	8003724 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003714:	4b31      	ldr	r3, [pc, #196]	@ (80037dc <HAL_RCC_GetSysClockFreq+0x108>)
 8003716:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800371a:	0a1b      	lsrs	r3, r3, #8
 800371c:	f003 030f 	and.w	r3, r3, #15
 8003720:	61fb      	str	r3, [r7, #28]
 8003722:	e005      	b.n	8003730 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003724:	4b2d      	ldr	r3, [pc, #180]	@ (80037dc <HAL_RCC_GetSysClockFreq+0x108>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	091b      	lsrs	r3, r3, #4
 800372a:	f003 030f 	and.w	r3, r3, #15
 800372e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003730:	4a2b      	ldr	r2, [pc, #172]	@ (80037e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003738:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10d      	bne.n	800375c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003744:	e00a      	b.n	800375c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	2b04      	cmp	r3, #4
 800374a:	d102      	bne.n	8003752 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800374c:	4b25      	ldr	r3, [pc, #148]	@ (80037e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800374e:	61bb      	str	r3, [r7, #24]
 8003750:	e004      	b.n	800375c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	2b08      	cmp	r3, #8
 8003756:	d101      	bne.n	800375c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003758:	4b23      	ldr	r3, [pc, #140]	@ (80037e8 <HAL_RCC_GetSysClockFreq+0x114>)
 800375a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	2b0c      	cmp	r3, #12
 8003760:	d134      	bne.n	80037cc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003762:	4b1e      	ldr	r3, [pc, #120]	@ (80037dc <HAL_RCC_GetSysClockFreq+0x108>)
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	f003 0303 	and.w	r3, r3, #3
 800376a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	2b02      	cmp	r3, #2
 8003770:	d003      	beq.n	800377a <HAL_RCC_GetSysClockFreq+0xa6>
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	2b03      	cmp	r3, #3
 8003776:	d003      	beq.n	8003780 <HAL_RCC_GetSysClockFreq+0xac>
 8003778:	e005      	b.n	8003786 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800377a:	4b1a      	ldr	r3, [pc, #104]	@ (80037e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800377c:	617b      	str	r3, [r7, #20]
      break;
 800377e:	e005      	b.n	800378c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003780:	4b19      	ldr	r3, [pc, #100]	@ (80037e8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003782:	617b      	str	r3, [r7, #20]
      break;
 8003784:	e002      	b.n	800378c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	617b      	str	r3, [r7, #20]
      break;
 800378a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800378c:	4b13      	ldr	r3, [pc, #76]	@ (80037dc <HAL_RCC_GetSysClockFreq+0x108>)
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	091b      	lsrs	r3, r3, #4
 8003792:	f003 0307 	and.w	r3, r3, #7
 8003796:	3301      	adds	r3, #1
 8003798:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800379a:	4b10      	ldr	r3, [pc, #64]	@ (80037dc <HAL_RCC_GetSysClockFreq+0x108>)
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	0a1b      	lsrs	r3, r3, #8
 80037a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	fb03 f202 	mul.w	r2, r3, r2
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037b2:	4b0a      	ldr	r3, [pc, #40]	@ (80037dc <HAL_RCC_GetSysClockFreq+0x108>)
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	0e5b      	lsrs	r3, r3, #25
 80037b8:	f003 0303 	and.w	r3, r3, #3
 80037bc:	3301      	adds	r3, #1
 80037be:	005b      	lsls	r3, r3, #1
 80037c0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80037cc:	69bb      	ldr	r3, [r7, #24]
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3724      	adds	r7, #36	@ 0x24
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	40021000 	.word	0x40021000
 80037e0:	08006a00 	.word	0x08006a00
 80037e4:	00f42400 	.word	0x00f42400
 80037e8:	007a1200 	.word	0x007a1200

080037ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037f0:	4b03      	ldr	r3, [pc, #12]	@ (8003800 <HAL_RCC_GetHCLKFreq+0x14>)
 80037f2:	681b      	ldr	r3, [r3, #0]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	20000000 	.word	0x20000000

08003804 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003808:	f7ff fff0 	bl	80037ec <HAL_RCC_GetHCLKFreq>
 800380c:	4602      	mov	r2, r0
 800380e:	4b06      	ldr	r3, [pc, #24]	@ (8003828 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	0a1b      	lsrs	r3, r3, #8
 8003814:	f003 0307 	and.w	r3, r3, #7
 8003818:	4904      	ldr	r1, [pc, #16]	@ (800382c <HAL_RCC_GetPCLK1Freq+0x28>)
 800381a:	5ccb      	ldrb	r3, [r1, r3]
 800381c:	f003 031f 	and.w	r3, r3, #31
 8003820:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003824:	4618      	mov	r0, r3
 8003826:	bd80      	pop	{r7, pc}
 8003828:	40021000 	.word	0x40021000
 800382c:	080069f8 	.word	0x080069f8

08003830 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003834:	f7ff ffda 	bl	80037ec <HAL_RCC_GetHCLKFreq>
 8003838:	4602      	mov	r2, r0
 800383a:	4b06      	ldr	r3, [pc, #24]	@ (8003854 <HAL_RCC_GetPCLK2Freq+0x24>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	0adb      	lsrs	r3, r3, #11
 8003840:	f003 0307 	and.w	r3, r3, #7
 8003844:	4904      	ldr	r1, [pc, #16]	@ (8003858 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003846:	5ccb      	ldrb	r3, [r1, r3]
 8003848:	f003 031f 	and.w	r3, r3, #31
 800384c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003850:	4618      	mov	r0, r3
 8003852:	bd80      	pop	{r7, pc}
 8003854:	40021000 	.word	0x40021000
 8003858:	080069f8 	.word	0x080069f8

0800385c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003864:	2300      	movs	r3, #0
 8003866:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003868:	4b2a      	ldr	r3, [pc, #168]	@ (8003914 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800386a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800386c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d003      	beq.n	800387c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003874:	f7ff f9b6 	bl	8002be4 <HAL_PWREx_GetVoltageRange>
 8003878:	6178      	str	r0, [r7, #20]
 800387a:	e014      	b.n	80038a6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800387c:	4b25      	ldr	r3, [pc, #148]	@ (8003914 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800387e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003880:	4a24      	ldr	r2, [pc, #144]	@ (8003914 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003882:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003886:	6593      	str	r3, [r2, #88]	@ 0x58
 8003888:	4b22      	ldr	r3, [pc, #136]	@ (8003914 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800388a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800388c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003890:	60fb      	str	r3, [r7, #12]
 8003892:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003894:	f7ff f9a6 	bl	8002be4 <HAL_PWREx_GetVoltageRange>
 8003898:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800389a:	4b1e      	ldr	r3, [pc, #120]	@ (8003914 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800389c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800389e:	4a1d      	ldr	r2, [pc, #116]	@ (8003914 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038a4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038ac:	d10b      	bne.n	80038c6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2b80      	cmp	r3, #128	@ 0x80
 80038b2:	d919      	bls.n	80038e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2ba0      	cmp	r3, #160	@ 0xa0
 80038b8:	d902      	bls.n	80038c0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038ba:	2302      	movs	r3, #2
 80038bc:	613b      	str	r3, [r7, #16]
 80038be:	e013      	b.n	80038e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038c0:	2301      	movs	r3, #1
 80038c2:	613b      	str	r3, [r7, #16]
 80038c4:	e010      	b.n	80038e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2b80      	cmp	r3, #128	@ 0x80
 80038ca:	d902      	bls.n	80038d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80038cc:	2303      	movs	r3, #3
 80038ce:	613b      	str	r3, [r7, #16]
 80038d0:	e00a      	b.n	80038e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b80      	cmp	r3, #128	@ 0x80
 80038d6:	d102      	bne.n	80038de <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038d8:	2302      	movs	r3, #2
 80038da:	613b      	str	r3, [r7, #16]
 80038dc:	e004      	b.n	80038e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2b70      	cmp	r3, #112	@ 0x70
 80038e2:	d101      	bne.n	80038e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038e4:	2301      	movs	r3, #1
 80038e6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80038e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003918 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f023 0207 	bic.w	r2, r3, #7
 80038f0:	4909      	ldr	r1, [pc, #36]	@ (8003918 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80038f8:	4b07      	ldr	r3, [pc, #28]	@ (8003918 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0307 	and.w	r3, r3, #7
 8003900:	693a      	ldr	r2, [r7, #16]
 8003902:	429a      	cmp	r2, r3
 8003904:	d001      	beq.n	800390a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e000      	b.n	800390c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3718      	adds	r7, #24
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	40021000 	.word	0x40021000
 8003918:	40022000 	.word	0x40022000

0800391c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b086      	sub	sp, #24
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003924:	2300      	movs	r3, #0
 8003926:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003928:	2300      	movs	r3, #0
 800392a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003934:	2b00      	cmp	r3, #0
 8003936:	d031      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800393c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003940:	d01a      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003942:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003946:	d814      	bhi.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003948:	2b00      	cmp	r3, #0
 800394a:	d009      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800394c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003950:	d10f      	bne.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003952:	4b5d      	ldr	r3, [pc, #372]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	4a5c      	ldr	r2, [pc, #368]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003958:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800395c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800395e:	e00c      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	3304      	adds	r3, #4
 8003964:	2100      	movs	r1, #0
 8003966:	4618      	mov	r0, r3
 8003968:	f000 fa44 	bl	8003df4 <RCCEx_PLLSAI1_Config>
 800396c:	4603      	mov	r3, r0
 800396e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003970:	e003      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	74fb      	strb	r3, [r7, #19]
      break;
 8003976:	e000      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003978:	bf00      	nop
    }

    if(ret == HAL_OK)
 800397a:	7cfb      	ldrb	r3, [r7, #19]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d10b      	bne.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003980:	4b51      	ldr	r3, [pc, #324]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003986:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800398e:	494e      	ldr	r1, [pc, #312]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003990:	4313      	orrs	r3, r2
 8003992:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003996:	e001      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003998:	7cfb      	ldrb	r3, [r7, #19]
 800399a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f000 809e 	beq.w	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039aa:	2300      	movs	r3, #0
 80039ac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80039ae:	4b46      	ldr	r3, [pc, #280]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80039ba:	2301      	movs	r3, #1
 80039bc:	e000      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80039be:	2300      	movs	r3, #0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00d      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039c4:	4b40      	ldr	r3, [pc, #256]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039c8:	4a3f      	ldr	r2, [pc, #252]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80039d0:	4b3d      	ldr	r3, [pc, #244]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039d8:	60bb      	str	r3, [r7, #8]
 80039da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039dc:	2301      	movs	r3, #1
 80039de:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039e0:	4b3a      	ldr	r3, [pc, #232]	@ (8003acc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a39      	ldr	r2, [pc, #228]	@ (8003acc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80039e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039ec:	f7fd fac6 	bl	8000f7c <HAL_GetTick>
 80039f0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80039f2:	e009      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039f4:	f7fd fac2 	bl	8000f7c <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d902      	bls.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	74fb      	strb	r3, [r7, #19]
        break;
 8003a06:	e005      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a08:	4b30      	ldr	r3, [pc, #192]	@ (8003acc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d0ef      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003a14:	7cfb      	ldrb	r3, [r7, #19]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d15a      	bne.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a1a:	4b2b      	ldr	r3, [pc, #172]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a24:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d01e      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d019      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a36:	4b24      	ldr	r3, [pc, #144]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a40:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a42:	4b21      	ldr	r3, [pc, #132]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a48:	4a1f      	ldr	r2, [pc, #124]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a4e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a52:	4b1d      	ldr	r3, [pc, #116]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a58:	4a1b      	ldr	r2, [pc, #108]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a5e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a62:	4a19      	ldr	r2, [pc, #100]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	f003 0301 	and.w	r3, r3, #1
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d016      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a74:	f7fd fa82 	bl	8000f7c <HAL_GetTick>
 8003a78:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a7a:	e00b      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a7c:	f7fd fa7e 	bl	8000f7c <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d902      	bls.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	74fb      	strb	r3, [r7, #19]
            break;
 8003a92:	e006      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a94:	4b0c      	ldr	r3, [pc, #48]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d0ec      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003aa2:	7cfb      	ldrb	r3, [r7, #19]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d10b      	bne.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003aa8:	4b07      	ldr	r3, [pc, #28]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aae:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ab6:	4904      	ldr	r1, [pc, #16]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003abe:	e009      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ac0:	7cfb      	ldrb	r3, [r7, #19]
 8003ac2:	74bb      	strb	r3, [r7, #18]
 8003ac4:	e006      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003ac6:	bf00      	nop
 8003ac8:	40021000 	.word	0x40021000
 8003acc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ad0:	7cfb      	ldrb	r3, [r7, #19]
 8003ad2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ad4:	7c7b      	ldrb	r3, [r7, #17]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d105      	bne.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ada:	4b9e      	ldr	r3, [pc, #632]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ade:	4a9d      	ldr	r2, [pc, #628]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ae0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ae4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00a      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003af2:	4b98      	ldr	r3, [pc, #608]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003af8:	f023 0203 	bic.w	r2, r3, #3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a1b      	ldr	r3, [r3, #32]
 8003b00:	4994      	ldr	r1, [pc, #592]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00a      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b14:	4b8f      	ldr	r3, [pc, #572]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b1a:	f023 020c 	bic.w	r2, r3, #12
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b22:	498c      	ldr	r1, [pc, #560]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0304 	and.w	r3, r3, #4
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00a      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b36:	4b87      	ldr	r3, [pc, #540]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b3c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b44:	4983      	ldr	r1, [pc, #524]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0308 	and.w	r3, r3, #8
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00a      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b58:	4b7e      	ldr	r3, [pc, #504]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b5e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b66:	497b      	ldr	r1, [pc, #492]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0320 	and.w	r3, r3, #32
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00a      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b7a:	4b76      	ldr	r3, [pc, #472]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b80:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b88:	4972      	ldr	r1, [pc, #456]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d00a      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b9c:	4b6d      	ldr	r3, [pc, #436]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ba2:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003baa:	496a      	ldr	r1, [pc, #424]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00a      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003bbe:	4b65      	ldr	r3, [pc, #404]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bc4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bcc:	4961      	ldr	r1, [pc, #388]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00a      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003be0:	4b5c      	ldr	r3, [pc, #368]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003be6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bee:	4959      	ldr	r1, [pc, #356]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00a      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c02:	4b54      	ldr	r3, [pc, #336]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c08:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c10:	4950      	ldr	r1, [pc, #320]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00a      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c24:	4b4b      	ldr	r3, [pc, #300]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c2a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c32:	4948      	ldr	r1, [pc, #288]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00a      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c46:	4b43      	ldr	r3, [pc, #268]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c48:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003c4c:	f023 0203 	bic.w	r2, r3, #3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c54:	493f      	ldr	r1, [pc, #252]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d028      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c68:	4b3a      	ldr	r3, [pc, #232]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c6e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c76:	4937      	ldr	r1, [pc, #220]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c86:	d106      	bne.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c88:	4b32      	ldr	r3, [pc, #200]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	4a31      	ldr	r2, [pc, #196]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c92:	60d3      	str	r3, [r2, #12]
 8003c94:	e011      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c9a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c9e:	d10c      	bne.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	3304      	adds	r3, #4
 8003ca4:	2101      	movs	r1, #1
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f000 f8a4 	bl	8003df4 <RCCEx_PLLSAI1_Config>
 8003cac:	4603      	mov	r3, r0
 8003cae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003cb0:	7cfb      	ldrb	r3, [r7, #19]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8003cb6:	7cfb      	ldrb	r3, [r7, #19]
 8003cb8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d028      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003cc6:	4b23      	ldr	r3, [pc, #140]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ccc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cd4:	491f      	ldr	r1, [pc, #124]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ce0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ce4:	d106      	bne.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ce6:	4b1b      	ldr	r3, [pc, #108]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	4a1a      	ldr	r2, [pc, #104]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003cec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cf0:	60d3      	str	r3, [r2, #12]
 8003cf2:	e011      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cf8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003cfc:	d10c      	bne.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	3304      	adds	r3, #4
 8003d02:	2101      	movs	r1, #1
 8003d04:	4618      	mov	r0, r3
 8003d06:	f000 f875 	bl	8003df4 <RCCEx_PLLSAI1_Config>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d0e:	7cfb      	ldrb	r3, [r7, #19]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d001      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8003d14:	7cfb      	ldrb	r3, [r7, #19]
 8003d16:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d02b      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d24:	4b0b      	ldr	r3, [pc, #44]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d2a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d32:	4908      	ldr	r1, [pc, #32]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d42:	d109      	bne.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d44:	4b03      	ldr	r3, [pc, #12]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	4a02      	ldr	r2, [pc, #8]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d4e:	60d3      	str	r3, [r2, #12]
 8003d50:	e014      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x460>
 8003d52:	bf00      	nop
 8003d54:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d5c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d60:	d10c      	bne.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	3304      	adds	r3, #4
 8003d66:	2101      	movs	r1, #1
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 f843 	bl	8003df4 <RCCEx_PLLSAI1_Config>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d72:	7cfb      	ldrb	r3, [r7, #19]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8003d78:	7cfb      	ldrb	r3, [r7, #19]
 8003d7a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d01c      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d88:	4b19      	ldr	r3, [pc, #100]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d8e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d96:	4916      	ldr	r1, [pc, #88]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003da2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003da6:	d10c      	bne.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	3304      	adds	r3, #4
 8003dac:	2102      	movs	r1, #2
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 f820 	bl	8003df4 <RCCEx_PLLSAI1_Config>
 8003db4:	4603      	mov	r3, r0
 8003db6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003db8:	7cfb      	ldrb	r3, [r7, #19]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d001      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8003dbe:	7cfb      	ldrb	r3, [r7, #19]
 8003dc0:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00a      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003dce:	4b08      	ldr	r3, [pc, #32]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dd4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ddc:	4904      	ldr	r1, [pc, #16]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003de4:	7cbb      	ldrb	r3, [r7, #18]
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3718      	adds	r7, #24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	40021000 	.word	0x40021000

08003df4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e02:	4b74      	ldr	r3, [pc, #464]	@ (8003fd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	f003 0303 	and.w	r3, r3, #3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d018      	beq.n	8003e40 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003e0e:	4b71      	ldr	r3, [pc, #452]	@ (8003fd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	f003 0203 	and.w	r2, r3, #3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d10d      	bne.n	8003e3a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
       ||
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d009      	beq.n	8003e3a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003e26:	4b6b      	ldr	r3, [pc, #428]	@ (8003fd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	091b      	lsrs	r3, r3, #4
 8003e2c:	f003 0307 	and.w	r3, r3, #7
 8003e30:	1c5a      	adds	r2, r3, #1
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
       ||
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d047      	beq.n	8003eca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	73fb      	strb	r3, [r7, #15]
 8003e3e:	e044      	b.n	8003eca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2b03      	cmp	r3, #3
 8003e46:	d018      	beq.n	8003e7a <RCCEx_PLLSAI1_Config+0x86>
 8003e48:	2b03      	cmp	r3, #3
 8003e4a:	d825      	bhi.n	8003e98 <RCCEx_PLLSAI1_Config+0xa4>
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d002      	beq.n	8003e56 <RCCEx_PLLSAI1_Config+0x62>
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d009      	beq.n	8003e68 <RCCEx_PLLSAI1_Config+0x74>
 8003e54:	e020      	b.n	8003e98 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e56:	4b5f      	ldr	r3, [pc, #380]	@ (8003fd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d11d      	bne.n	8003e9e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e66:	e01a      	b.n	8003e9e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e68:	4b5a      	ldr	r3, [pc, #360]	@ (8003fd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d116      	bne.n	8003ea2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e78:	e013      	b.n	8003ea2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e7a:	4b56      	ldr	r3, [pc, #344]	@ (8003fd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10f      	bne.n	8003ea6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e86:	4b53      	ldr	r3, [pc, #332]	@ (8003fd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d109      	bne.n	8003ea6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e96:	e006      	b.n	8003ea6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e9c:	e004      	b.n	8003ea8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e9e:	bf00      	nop
 8003ea0:	e002      	b.n	8003ea8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ea2:	bf00      	nop
 8003ea4:	e000      	b.n	8003ea8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ea6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ea8:	7bfb      	ldrb	r3, [r7, #15]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10d      	bne.n	8003eca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003eae:	4b49      	ldr	r3, [pc, #292]	@ (8003fd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6819      	ldr	r1, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	011b      	lsls	r3, r3, #4
 8003ec2:	430b      	orrs	r3, r1
 8003ec4:	4943      	ldr	r1, [pc, #268]	@ (8003fd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003eca:	7bfb      	ldrb	r3, [r7, #15]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d17c      	bne.n	8003fca <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003ed0:	4b40      	ldr	r3, [pc, #256]	@ (8003fd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a3f      	ldr	r2, [pc, #252]	@ (8003fd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ed6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003eda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003edc:	f7fd f84e 	bl	8000f7c <HAL_GetTick>
 8003ee0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ee2:	e009      	b.n	8003ef8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ee4:	f7fd f84a 	bl	8000f7c <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d902      	bls.n	8003ef8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	73fb      	strb	r3, [r7, #15]
        break;
 8003ef6:	e005      	b.n	8003f04 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ef8:	4b36      	ldr	r3, [pc, #216]	@ (8003fd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1ef      	bne.n	8003ee4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f04:	7bfb      	ldrb	r3, [r7, #15]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d15f      	bne.n	8003fca <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d110      	bne.n	8003f32 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f10:	4b30      	ldr	r3, [pc, #192]	@ (8003fd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003f18:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	6892      	ldr	r2, [r2, #8]
 8003f20:	0211      	lsls	r1, r2, #8
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	68d2      	ldr	r2, [r2, #12]
 8003f26:	06d2      	lsls	r2, r2, #27
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	492a      	ldr	r1, [pc, #168]	@ (8003fd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	610b      	str	r3, [r1, #16]
 8003f30:	e027      	b.n	8003f82 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d112      	bne.n	8003f5e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f38:	4b26      	ldr	r3, [pc, #152]	@ (8003fd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003f40:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	6892      	ldr	r2, [r2, #8]
 8003f48:	0211      	lsls	r1, r2, #8
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	6912      	ldr	r2, [r2, #16]
 8003f4e:	0852      	lsrs	r2, r2, #1
 8003f50:	3a01      	subs	r2, #1
 8003f52:	0552      	lsls	r2, r2, #21
 8003f54:	430a      	orrs	r2, r1
 8003f56:	491f      	ldr	r1, [pc, #124]	@ (8003fd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	610b      	str	r3, [r1, #16]
 8003f5c:	e011      	b.n	8003f82 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f5e:	4b1d      	ldr	r3, [pc, #116]	@ (8003fd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003f66:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	6892      	ldr	r2, [r2, #8]
 8003f6e:	0211      	lsls	r1, r2, #8
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	6952      	ldr	r2, [r2, #20]
 8003f74:	0852      	lsrs	r2, r2, #1
 8003f76:	3a01      	subs	r2, #1
 8003f78:	0652      	lsls	r2, r2, #25
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	4915      	ldr	r1, [pc, #84]	@ (8003fd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003f82:	4b14      	ldr	r3, [pc, #80]	@ (8003fd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a13      	ldr	r2, [pc, #76]	@ (8003fd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f88:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003f8c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f8e:	f7fc fff5 	bl	8000f7c <HAL_GetTick>
 8003f92:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f94:	e009      	b.n	8003faa <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f96:	f7fc fff1 	bl	8000f7c <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d902      	bls.n	8003faa <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	73fb      	strb	r3, [r7, #15]
          break;
 8003fa8:	e005      	b.n	8003fb6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003faa:	4b0a      	ldr	r3, [pc, #40]	@ (8003fd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d0ef      	beq.n	8003f96 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003fb6:	7bfb      	ldrb	r3, [r7, #15]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d106      	bne.n	8003fca <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003fbc:	4b05      	ldr	r3, [pc, #20]	@ (8003fd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fbe:	691a      	ldr	r2, [r3, #16]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	4903      	ldr	r1, [pc, #12]	@ (8003fd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	40021000 	.word	0x40021000

08003fd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e049      	b.n	800407e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d106      	bne.n	8004004 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7fc fde6 	bl	8000bd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2202      	movs	r2, #2
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3304      	adds	r3, #4
 8004014:	4619      	mov	r1, r3
 8004016:	4610      	mov	r0, r2
 8004018:	f000 fdfe 	bl	8004c18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3708      	adds	r7, #8
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b082      	sub	sp, #8
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d101      	bne.n	8004098 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e049      	b.n	800412c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d106      	bne.n	80040b2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 f841 	bl	8004134 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2202      	movs	r2, #2
 80040b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	3304      	adds	r3, #4
 80040c2:	4619      	mov	r1, r3
 80040c4:	4610      	mov	r0, r2
 80040c6:	f000 fda7 	bl	8004c18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2201      	movs	r2, #1
 8004106:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2201      	movs	r2, #1
 8004126:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3708      	adds	r7, #8
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004152:	2300      	movs	r3, #0
 8004154:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d109      	bne.n	8004170 <HAL_TIM_PWM_Start_IT+0x28>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b01      	cmp	r3, #1
 8004166:	bf14      	ite	ne
 8004168:	2301      	movne	r3, #1
 800416a:	2300      	moveq	r3, #0
 800416c:	b2db      	uxtb	r3, r3
 800416e:	e03c      	b.n	80041ea <HAL_TIM_PWM_Start_IT+0xa2>
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	2b04      	cmp	r3, #4
 8004174:	d109      	bne.n	800418a <HAL_TIM_PWM_Start_IT+0x42>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b01      	cmp	r3, #1
 8004180:	bf14      	ite	ne
 8004182:	2301      	movne	r3, #1
 8004184:	2300      	moveq	r3, #0
 8004186:	b2db      	uxtb	r3, r3
 8004188:	e02f      	b.n	80041ea <HAL_TIM_PWM_Start_IT+0xa2>
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	2b08      	cmp	r3, #8
 800418e:	d109      	bne.n	80041a4 <HAL_TIM_PWM_Start_IT+0x5c>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004196:	b2db      	uxtb	r3, r3
 8004198:	2b01      	cmp	r3, #1
 800419a:	bf14      	ite	ne
 800419c:	2301      	movne	r3, #1
 800419e:	2300      	moveq	r3, #0
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	e022      	b.n	80041ea <HAL_TIM_PWM_Start_IT+0xa2>
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	2b0c      	cmp	r3, #12
 80041a8:	d109      	bne.n	80041be <HAL_TIM_PWM_Start_IT+0x76>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	bf14      	ite	ne
 80041b6:	2301      	movne	r3, #1
 80041b8:	2300      	moveq	r3, #0
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	e015      	b.n	80041ea <HAL_TIM_PWM_Start_IT+0xa2>
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	2b10      	cmp	r3, #16
 80041c2:	d109      	bne.n	80041d8 <HAL_TIM_PWM_Start_IT+0x90>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	bf14      	ite	ne
 80041d0:	2301      	movne	r3, #1
 80041d2:	2300      	moveq	r3, #0
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	e008      	b.n	80041ea <HAL_TIM_PWM_Start_IT+0xa2>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	bf14      	ite	ne
 80041e4:	2301      	movne	r3, #1
 80041e6:	2300      	moveq	r3, #0
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e0ce      	b.n	8004390 <HAL_TIM_PWM_Start_IT+0x248>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d104      	bne.n	8004202 <HAL_TIM_PWM_Start_IT+0xba>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2202      	movs	r2, #2
 80041fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004200:	e023      	b.n	800424a <HAL_TIM_PWM_Start_IT+0x102>
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	2b04      	cmp	r3, #4
 8004206:	d104      	bne.n	8004212 <HAL_TIM_PWM_Start_IT+0xca>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2202      	movs	r2, #2
 800420c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004210:	e01b      	b.n	800424a <HAL_TIM_PWM_Start_IT+0x102>
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	2b08      	cmp	r3, #8
 8004216:	d104      	bne.n	8004222 <HAL_TIM_PWM_Start_IT+0xda>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2202      	movs	r2, #2
 800421c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004220:	e013      	b.n	800424a <HAL_TIM_PWM_Start_IT+0x102>
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	2b0c      	cmp	r3, #12
 8004226:	d104      	bne.n	8004232 <HAL_TIM_PWM_Start_IT+0xea>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2202      	movs	r2, #2
 800422c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004230:	e00b      	b.n	800424a <HAL_TIM_PWM_Start_IT+0x102>
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	2b10      	cmp	r3, #16
 8004236:	d104      	bne.n	8004242 <HAL_TIM_PWM_Start_IT+0xfa>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2202      	movs	r2, #2
 800423c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004240:	e003      	b.n	800424a <HAL_TIM_PWM_Start_IT+0x102>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2202      	movs	r2, #2
 8004246:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2b0c      	cmp	r3, #12
 800424e:	d841      	bhi.n	80042d4 <HAL_TIM_PWM_Start_IT+0x18c>
 8004250:	a201      	add	r2, pc, #4	@ (adr r2, 8004258 <HAL_TIM_PWM_Start_IT+0x110>)
 8004252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004256:	bf00      	nop
 8004258:	0800428d 	.word	0x0800428d
 800425c:	080042d5 	.word	0x080042d5
 8004260:	080042d5 	.word	0x080042d5
 8004264:	080042d5 	.word	0x080042d5
 8004268:	0800429f 	.word	0x0800429f
 800426c:	080042d5 	.word	0x080042d5
 8004270:	080042d5 	.word	0x080042d5
 8004274:	080042d5 	.word	0x080042d5
 8004278:	080042b1 	.word	0x080042b1
 800427c:	080042d5 	.word	0x080042d5
 8004280:	080042d5 	.word	0x080042d5
 8004284:	080042d5 	.word	0x080042d5
 8004288:	080042c3 	.word	0x080042c3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68da      	ldr	r2, [r3, #12]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f042 0202 	orr.w	r2, r2, #2
 800429a:	60da      	str	r2, [r3, #12]
      break;
 800429c:	e01d      	b.n	80042da <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68da      	ldr	r2, [r3, #12]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f042 0204 	orr.w	r2, r2, #4
 80042ac:	60da      	str	r2, [r3, #12]
      break;
 80042ae:	e014      	b.n	80042da <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68da      	ldr	r2, [r3, #12]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f042 0208 	orr.w	r2, r2, #8
 80042be:	60da      	str	r2, [r3, #12]
      break;
 80042c0:	e00b      	b.n	80042da <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68da      	ldr	r2, [r3, #12]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f042 0210 	orr.w	r2, r2, #16
 80042d0:	60da      	str	r2, [r3, #12]
      break;
 80042d2:	e002      	b.n	80042da <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	73fb      	strb	r3, [r7, #15]
      break;
 80042d8:	bf00      	nop
  }

  if (status == HAL_OK)
 80042da:	7bfb      	ldrb	r3, [r7, #15]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d156      	bne.n	800438e <HAL_TIM_PWM_Start_IT+0x246>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2201      	movs	r2, #1
 80042e6:	6839      	ldr	r1, [r7, #0]
 80042e8:	4618      	mov	r0, r3
 80042ea:	f001 f81b 	bl	8005324 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a29      	ldr	r2, [pc, #164]	@ (8004398 <HAL_TIM_PWM_Start_IT+0x250>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d009      	beq.n	800430c <HAL_TIM_PWM_Start_IT+0x1c4>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a27      	ldr	r2, [pc, #156]	@ (800439c <HAL_TIM_PWM_Start_IT+0x254>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d004      	beq.n	800430c <HAL_TIM_PWM_Start_IT+0x1c4>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a26      	ldr	r2, [pc, #152]	@ (80043a0 <HAL_TIM_PWM_Start_IT+0x258>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d101      	bne.n	8004310 <HAL_TIM_PWM_Start_IT+0x1c8>
 800430c:	2301      	movs	r3, #1
 800430e:	e000      	b.n	8004312 <HAL_TIM_PWM_Start_IT+0x1ca>
 8004310:	2300      	movs	r3, #0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d007      	beq.n	8004326 <HAL_TIM_PWM_Start_IT+0x1de>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004324:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a1b      	ldr	r2, [pc, #108]	@ (8004398 <HAL_TIM_PWM_Start_IT+0x250>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d00e      	beq.n	800434e <HAL_TIM_PWM_Start_IT+0x206>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004338:	d009      	beq.n	800434e <HAL_TIM_PWM_Start_IT+0x206>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a19      	ldr	r2, [pc, #100]	@ (80043a4 <HAL_TIM_PWM_Start_IT+0x25c>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d004      	beq.n	800434e <HAL_TIM_PWM_Start_IT+0x206>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a14      	ldr	r2, [pc, #80]	@ (800439c <HAL_TIM_PWM_Start_IT+0x254>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d115      	bne.n	800437a <HAL_TIM_PWM_Start_IT+0x232>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	689a      	ldr	r2, [r3, #8]
 8004354:	4b14      	ldr	r3, [pc, #80]	@ (80043a8 <HAL_TIM_PWM_Start_IT+0x260>)
 8004356:	4013      	ands	r3, r2
 8004358:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	2b06      	cmp	r3, #6
 800435e:	d015      	beq.n	800438c <HAL_TIM_PWM_Start_IT+0x244>
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004366:	d011      	beq.n	800438c <HAL_TIM_PWM_Start_IT+0x244>
      {
        __HAL_TIM_ENABLE(htim);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f042 0201 	orr.w	r2, r2, #1
 8004376:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004378:	e008      	b.n	800438c <HAL_TIM_PWM_Start_IT+0x244>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f042 0201 	orr.w	r2, r2, #1
 8004388:	601a      	str	r2, [r3, #0]
 800438a:	e000      	b.n	800438e <HAL_TIM_PWM_Start_IT+0x246>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800438c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800438e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004390:	4618      	mov	r0, r3
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	40012c00 	.word	0x40012c00
 800439c:	40014000 	.word	0x40014000
 80043a0:	40014400 	.word	0x40014400
 80043a4:	40000400 	.word	0x40000400
 80043a8:	00010007 	.word	0x00010007

080043ac <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043b6:	2300      	movs	r3, #0
 80043b8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	2b0c      	cmp	r3, #12
 80043be:	d841      	bhi.n	8004444 <HAL_TIM_PWM_Stop_IT+0x98>
 80043c0:	a201      	add	r2, pc, #4	@ (adr r2, 80043c8 <HAL_TIM_PWM_Stop_IT+0x1c>)
 80043c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c6:	bf00      	nop
 80043c8:	080043fd 	.word	0x080043fd
 80043cc:	08004445 	.word	0x08004445
 80043d0:	08004445 	.word	0x08004445
 80043d4:	08004445 	.word	0x08004445
 80043d8:	0800440f 	.word	0x0800440f
 80043dc:	08004445 	.word	0x08004445
 80043e0:	08004445 	.word	0x08004445
 80043e4:	08004445 	.word	0x08004445
 80043e8:	08004421 	.word	0x08004421
 80043ec:	08004445 	.word	0x08004445
 80043f0:	08004445 	.word	0x08004445
 80043f4:	08004445 	.word	0x08004445
 80043f8:	08004433 	.word	0x08004433
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68da      	ldr	r2, [r3, #12]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f022 0202 	bic.w	r2, r2, #2
 800440a:	60da      	str	r2, [r3, #12]
      break;
 800440c:	e01d      	b.n	800444a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68da      	ldr	r2, [r3, #12]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f022 0204 	bic.w	r2, r2, #4
 800441c:	60da      	str	r2, [r3, #12]
      break;
 800441e:	e014      	b.n	800444a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68da      	ldr	r2, [r3, #12]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f022 0208 	bic.w	r2, r2, #8
 800442e:	60da      	str	r2, [r3, #12]
      break;
 8004430:	e00b      	b.n	800444a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68da      	ldr	r2, [r3, #12]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f022 0210 	bic.w	r2, r2, #16
 8004440:	60da      	str	r2, [r3, #12]
      break;
 8004442:	e002      	b.n	800444a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	73fb      	strb	r3, [r7, #15]
      break;
 8004448:	bf00      	nop
  }

  if (status == HAL_OK)
 800444a:	7bfb      	ldrb	r3, [r7, #15]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d176      	bne.n	800453e <HAL_TIM_PWM_Stop_IT+0x192>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2200      	movs	r2, #0
 8004456:	6839      	ldr	r1, [r7, #0]
 8004458:	4618      	mov	r0, r3
 800445a:	f000 ff63 	bl	8005324 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a39      	ldr	r2, [pc, #228]	@ (8004548 <HAL_TIM_PWM_Stop_IT+0x19c>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d009      	beq.n	800447c <HAL_TIM_PWM_Stop_IT+0xd0>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a37      	ldr	r2, [pc, #220]	@ (800454c <HAL_TIM_PWM_Stop_IT+0x1a0>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d004      	beq.n	800447c <HAL_TIM_PWM_Stop_IT+0xd0>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a36      	ldr	r2, [pc, #216]	@ (8004550 <HAL_TIM_PWM_Stop_IT+0x1a4>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d101      	bne.n	8004480 <HAL_TIM_PWM_Stop_IT+0xd4>
 800447c:	2301      	movs	r3, #1
 800447e:	e000      	b.n	8004482 <HAL_TIM_PWM_Stop_IT+0xd6>
 8004480:	2300      	movs	r3, #0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d017      	beq.n	80044b6 <HAL_TIM_PWM_Stop_IT+0x10a>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	6a1a      	ldr	r2, [r3, #32]
 800448c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004490:	4013      	ands	r3, r2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10f      	bne.n	80044b6 <HAL_TIM_PWM_Stop_IT+0x10a>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	6a1a      	ldr	r2, [r3, #32]
 800449c:	f240 4344 	movw	r3, #1092	@ 0x444
 80044a0:	4013      	ands	r3, r2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d107      	bne.n	80044b6 <HAL_TIM_PWM_Stop_IT+0x10a>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80044b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	6a1a      	ldr	r2, [r3, #32]
 80044bc:	f241 1311 	movw	r3, #4369	@ 0x1111
 80044c0:	4013      	ands	r3, r2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10f      	bne.n	80044e6 <HAL_TIM_PWM_Stop_IT+0x13a>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	6a1a      	ldr	r2, [r3, #32]
 80044cc:	f240 4344 	movw	r3, #1092	@ 0x444
 80044d0:	4013      	ands	r3, r2
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d107      	bne.n	80044e6 <HAL_TIM_PWM_Stop_IT+0x13a>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f022 0201 	bic.w	r2, r2, #1
 80044e4:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d104      	bne.n	80044f6 <HAL_TIM_PWM_Stop_IT+0x14a>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044f4:	e023      	b.n	800453e <HAL_TIM_PWM_Stop_IT+0x192>
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	2b04      	cmp	r3, #4
 80044fa:	d104      	bne.n	8004506 <HAL_TIM_PWM_Stop_IT+0x15a>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004504:	e01b      	b.n	800453e <HAL_TIM_PWM_Stop_IT+0x192>
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	2b08      	cmp	r3, #8
 800450a:	d104      	bne.n	8004516 <HAL_TIM_PWM_Stop_IT+0x16a>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004514:	e013      	b.n	800453e <HAL_TIM_PWM_Stop_IT+0x192>
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	2b0c      	cmp	r3, #12
 800451a:	d104      	bne.n	8004526 <HAL_TIM_PWM_Stop_IT+0x17a>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004524:	e00b      	b.n	800453e <HAL_TIM_PWM_Stop_IT+0x192>
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b10      	cmp	r3, #16
 800452a:	d104      	bne.n	8004536 <HAL_TIM_PWM_Stop_IT+0x18a>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004534:	e003      	b.n	800453e <HAL_TIM_PWM_Stop_IT+0x192>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2201      	movs	r2, #1
 800453a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 800453e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004540:	4618      	mov	r0, r3
 8004542:	3710      	adds	r7, #16
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	40012c00 	.word	0x40012c00
 800454c:	40014000 	.word	0x40014000
 8004550:	40014400 	.word	0x40014400

08004554 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d101      	bne.n	8004568 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e041      	b.n	80045ec <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800456e:	b2db      	uxtb	r3, r3
 8004570:	2b00      	cmp	r3, #0
 8004572:	d106      	bne.n	8004582 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 f839 	bl	80045f4 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2202      	movs	r2, #2
 8004586:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	3304      	adds	r3, #4
 8004592:	4619      	mov	r1, r3
 8004594:	4610      	mov	r0, r2
 8004596:	f000 fb3f 	bl	8004c18 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f022 0208 	bic.w	r2, r2, #8
 80045a8:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	6819      	ldr	r1, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	683a      	ldr	r2, [r7, #0]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2201      	movs	r2, #1
 80045ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2201      	movs	r2, #1
 80045d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3708      	adds	r7, #8
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d020      	beq.n	800466c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d01b      	beq.n	800466c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f06f 0202 	mvn.w	r2, #2
 800463c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2201      	movs	r2, #1
 8004642:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	f003 0303 	and.w	r3, r3, #3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d003      	beq.n	800465a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 facb 	bl	8004bee <HAL_TIM_IC_CaptureCallback>
 8004658:	e005      	b.n	8004666 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 fabd 	bl	8004bda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f7fb ffd3 	bl	800060c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	f003 0304 	and.w	r3, r3, #4
 8004672:	2b00      	cmp	r3, #0
 8004674:	d020      	beq.n	80046b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f003 0304 	and.w	r3, r3, #4
 800467c:	2b00      	cmp	r3, #0
 800467e:	d01b      	beq.n	80046b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f06f 0204 	mvn.w	r2, #4
 8004688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2202      	movs	r2, #2
 800468e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800469a:	2b00      	cmp	r3, #0
 800469c:	d003      	beq.n	80046a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 faa5 	bl	8004bee <HAL_TIM_IC_CaptureCallback>
 80046a4:	e005      	b.n	80046b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 fa97 	bl	8004bda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f7fb ffad 	bl	800060c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	f003 0308 	and.w	r3, r3, #8
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d020      	beq.n	8004704 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f003 0308 	and.w	r3, r3, #8
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d01b      	beq.n	8004704 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f06f 0208 	mvn.w	r2, #8
 80046d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2204      	movs	r2, #4
 80046da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	69db      	ldr	r3, [r3, #28]
 80046e2:	f003 0303 	and.w	r3, r3, #3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 fa7f 	bl	8004bee <HAL_TIM_IC_CaptureCallback>
 80046f0:	e005      	b.n	80046fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 fa71 	bl	8004bda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f7fb ff87 	bl	800060c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	f003 0310 	and.w	r3, r3, #16
 800470a:	2b00      	cmp	r3, #0
 800470c:	d020      	beq.n	8004750 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f003 0310 	and.w	r3, r3, #16
 8004714:	2b00      	cmp	r3, #0
 8004716:	d01b      	beq.n	8004750 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f06f 0210 	mvn.w	r2, #16
 8004720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2208      	movs	r2, #8
 8004726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	69db      	ldr	r3, [r3, #28]
 800472e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004732:	2b00      	cmp	r3, #0
 8004734:	d003      	beq.n	800473e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 fa59 	bl	8004bee <HAL_TIM_IC_CaptureCallback>
 800473c:	e005      	b.n	800474a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 fa4b 	bl	8004bda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f7fb ff61 	bl	800060c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00c      	beq.n	8004774 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f003 0301 	and.w	r3, r3, #1
 8004760:	2b00      	cmp	r3, #0
 8004762:	d007      	beq.n	8004774 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f06f 0201 	mvn.w	r2, #1
 800476c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 fa29 	bl	8004bc6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00c      	beq.n	8004798 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004784:	2b00      	cmp	r3, #0
 8004786:	d007      	beq.n	8004798 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 fedc 	bl	8005550 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00c      	beq.n	80047bc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d007      	beq.n	80047bc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80047b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 fed4 	bl	8005564 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00c      	beq.n	80047e0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d007      	beq.n	80047e0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80047d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 fa11 	bl	8004c02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	f003 0320 	and.w	r3, r3, #32
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00c      	beq.n	8004804 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f003 0320 	and.w	r3, r3, #32
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d007      	beq.n	8004804 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f06f 0220 	mvn.w	r2, #32
 80047fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 fe9c 	bl	800553c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004804:	bf00      	nop
 8004806:	3710      	adds	r7, #16
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b086      	sub	sp, #24
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004818:	2300      	movs	r3, #0
 800481a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004822:	2b01      	cmp	r3, #1
 8004824:	d101      	bne.n	800482a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004826:	2302      	movs	r3, #2
 8004828:	e0ff      	b.n	8004a2a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2b14      	cmp	r3, #20
 8004836:	f200 80f0 	bhi.w	8004a1a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800483a:	a201      	add	r2, pc, #4	@ (adr r2, 8004840 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800483c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004840:	08004895 	.word	0x08004895
 8004844:	08004a1b 	.word	0x08004a1b
 8004848:	08004a1b 	.word	0x08004a1b
 800484c:	08004a1b 	.word	0x08004a1b
 8004850:	080048d5 	.word	0x080048d5
 8004854:	08004a1b 	.word	0x08004a1b
 8004858:	08004a1b 	.word	0x08004a1b
 800485c:	08004a1b 	.word	0x08004a1b
 8004860:	08004917 	.word	0x08004917
 8004864:	08004a1b 	.word	0x08004a1b
 8004868:	08004a1b 	.word	0x08004a1b
 800486c:	08004a1b 	.word	0x08004a1b
 8004870:	08004957 	.word	0x08004957
 8004874:	08004a1b 	.word	0x08004a1b
 8004878:	08004a1b 	.word	0x08004a1b
 800487c:	08004a1b 	.word	0x08004a1b
 8004880:	08004999 	.word	0x08004999
 8004884:	08004a1b 	.word	0x08004a1b
 8004888:	08004a1b 	.word	0x08004a1b
 800488c:	08004a1b 	.word	0x08004a1b
 8004890:	080049d9 	.word	0x080049d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68b9      	ldr	r1, [r7, #8]
 800489a:	4618      	mov	r0, r3
 800489c:	f000 fa2a 	bl	8004cf4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	699a      	ldr	r2, [r3, #24]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f042 0208 	orr.w	r2, r2, #8
 80048ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	699a      	ldr	r2, [r3, #24]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f022 0204 	bic.w	r2, r2, #4
 80048be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	6999      	ldr	r1, [r3, #24]
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	691a      	ldr	r2, [r3, #16]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	619a      	str	r2, [r3, #24]
      break;
 80048d2:	e0a5      	b.n	8004a20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68b9      	ldr	r1, [r7, #8]
 80048da:	4618      	mov	r0, r3
 80048dc:	f000 fa86 	bl	8004dec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	699a      	ldr	r2, [r3, #24]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	699a      	ldr	r2, [r3, #24]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6999      	ldr	r1, [r3, #24]
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	021a      	lsls	r2, r3, #8
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	430a      	orrs	r2, r1
 8004912:	619a      	str	r2, [r3, #24]
      break;
 8004914:	e084      	b.n	8004a20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68b9      	ldr	r1, [r7, #8]
 800491c:	4618      	mov	r0, r3
 800491e:	f000 fadf 	bl	8004ee0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	69da      	ldr	r2, [r3, #28]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f042 0208 	orr.w	r2, r2, #8
 8004930:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	69da      	ldr	r2, [r3, #28]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f022 0204 	bic.w	r2, r2, #4
 8004940:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	69d9      	ldr	r1, [r3, #28]
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	691a      	ldr	r2, [r3, #16]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	430a      	orrs	r2, r1
 8004952:	61da      	str	r2, [r3, #28]
      break;
 8004954:	e064      	b.n	8004a20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68b9      	ldr	r1, [r7, #8]
 800495c:	4618      	mov	r0, r3
 800495e:	f000 fb37 	bl	8004fd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	69da      	ldr	r2, [r3, #28]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004970:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	69da      	ldr	r2, [r3, #28]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004980:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	69d9      	ldr	r1, [r3, #28]
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	021a      	lsls	r2, r3, #8
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	430a      	orrs	r2, r1
 8004994:	61da      	str	r2, [r3, #28]
      break;
 8004996:	e043      	b.n	8004a20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68b9      	ldr	r1, [r7, #8]
 800499e:	4618      	mov	r0, r3
 80049a0:	f000 fb74 	bl	800508c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f042 0208 	orr.w	r2, r2, #8
 80049b2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f022 0204 	bic.w	r2, r2, #4
 80049c2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	691a      	ldr	r2, [r3, #16]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	430a      	orrs	r2, r1
 80049d4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80049d6:	e023      	b.n	8004a20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68b9      	ldr	r1, [r7, #8]
 80049de:	4618      	mov	r0, r3
 80049e0:	f000 fbac 	bl	800513c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049f2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a02:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	021a      	lsls	r2, r3, #8
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	430a      	orrs	r2, r1
 8004a16:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004a18:	e002      	b.n	8004a20 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	75fb      	strb	r3, [r7, #23]
      break;
 8004a1e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a28:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3718      	adds	r7, #24
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop

08004a34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d101      	bne.n	8004a50 <HAL_TIM_ConfigClockSource+0x1c>
 8004a4c:	2302      	movs	r3, #2
 8004a4e:	e0b6      	b.n	8004bbe <HAL_TIM_ConfigClockSource+0x18a>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a6e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004a72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a8c:	d03e      	beq.n	8004b0c <HAL_TIM_ConfigClockSource+0xd8>
 8004a8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a92:	f200 8087 	bhi.w	8004ba4 <HAL_TIM_ConfigClockSource+0x170>
 8004a96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a9a:	f000 8086 	beq.w	8004baa <HAL_TIM_ConfigClockSource+0x176>
 8004a9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004aa2:	d87f      	bhi.n	8004ba4 <HAL_TIM_ConfigClockSource+0x170>
 8004aa4:	2b70      	cmp	r3, #112	@ 0x70
 8004aa6:	d01a      	beq.n	8004ade <HAL_TIM_ConfigClockSource+0xaa>
 8004aa8:	2b70      	cmp	r3, #112	@ 0x70
 8004aaa:	d87b      	bhi.n	8004ba4 <HAL_TIM_ConfigClockSource+0x170>
 8004aac:	2b60      	cmp	r3, #96	@ 0x60
 8004aae:	d050      	beq.n	8004b52 <HAL_TIM_ConfigClockSource+0x11e>
 8004ab0:	2b60      	cmp	r3, #96	@ 0x60
 8004ab2:	d877      	bhi.n	8004ba4 <HAL_TIM_ConfigClockSource+0x170>
 8004ab4:	2b50      	cmp	r3, #80	@ 0x50
 8004ab6:	d03c      	beq.n	8004b32 <HAL_TIM_ConfigClockSource+0xfe>
 8004ab8:	2b50      	cmp	r3, #80	@ 0x50
 8004aba:	d873      	bhi.n	8004ba4 <HAL_TIM_ConfigClockSource+0x170>
 8004abc:	2b40      	cmp	r3, #64	@ 0x40
 8004abe:	d058      	beq.n	8004b72 <HAL_TIM_ConfigClockSource+0x13e>
 8004ac0:	2b40      	cmp	r3, #64	@ 0x40
 8004ac2:	d86f      	bhi.n	8004ba4 <HAL_TIM_ConfigClockSource+0x170>
 8004ac4:	2b30      	cmp	r3, #48	@ 0x30
 8004ac6:	d064      	beq.n	8004b92 <HAL_TIM_ConfigClockSource+0x15e>
 8004ac8:	2b30      	cmp	r3, #48	@ 0x30
 8004aca:	d86b      	bhi.n	8004ba4 <HAL_TIM_ConfigClockSource+0x170>
 8004acc:	2b20      	cmp	r3, #32
 8004ace:	d060      	beq.n	8004b92 <HAL_TIM_ConfigClockSource+0x15e>
 8004ad0:	2b20      	cmp	r3, #32
 8004ad2:	d867      	bhi.n	8004ba4 <HAL_TIM_ConfigClockSource+0x170>
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d05c      	beq.n	8004b92 <HAL_TIM_ConfigClockSource+0x15e>
 8004ad8:	2b10      	cmp	r3, #16
 8004ada:	d05a      	beq.n	8004b92 <HAL_TIM_ConfigClockSource+0x15e>
 8004adc:	e062      	b.n	8004ba4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004aee:	f000 fbf9 	bl	80052e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004b00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	609a      	str	r2, [r3, #8]
      break;
 8004b0a:	e04f      	b.n	8004bac <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b1c:	f000 fbe2 	bl	80052e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689a      	ldr	r2, [r3, #8]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b2e:	609a      	str	r2, [r3, #8]
      break;
 8004b30:	e03c      	b.n	8004bac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b3e:	461a      	mov	r2, r3
 8004b40:	f000 fb56 	bl	80051f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2150      	movs	r1, #80	@ 0x50
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f000 fbaf 	bl	80052ae <TIM_ITRx_SetConfig>
      break;
 8004b50:	e02c      	b.n	8004bac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b5e:	461a      	mov	r2, r3
 8004b60:	f000 fb75 	bl	800524e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2160      	movs	r1, #96	@ 0x60
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f000 fb9f 	bl	80052ae <TIM_ITRx_SetConfig>
      break;
 8004b70:	e01c      	b.n	8004bac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b7e:	461a      	mov	r2, r3
 8004b80:	f000 fb36 	bl	80051f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2140      	movs	r1, #64	@ 0x40
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f000 fb8f 	bl	80052ae <TIM_ITRx_SetConfig>
      break;
 8004b90:	e00c      	b.n	8004bac <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	4610      	mov	r0, r2
 8004b9e:	f000 fb86 	bl	80052ae <TIM_ITRx_SetConfig>
      break;
 8004ba2:	e003      	b.n	8004bac <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ba8:	e000      	b.n	8004bac <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004baa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3710      	adds	r7, #16
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}

08004bc6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bc6:	b480      	push	{r7}
 8004bc8:	b083      	sub	sp, #12
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004bce:	bf00      	nop
 8004bd0:	370c      	adds	r7, #12
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr

08004bda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bda:	b480      	push	{r7}
 8004bdc:	b083      	sub	sp, #12
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004be2:	bf00      	nop
 8004be4:	370c      	adds	r7, #12
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr

08004bee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004bee:	b480      	push	{r7}
 8004bf0:	b083      	sub	sp, #12
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004bf6:	bf00      	nop
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr

08004c02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c02:	b480      	push	{r7}
 8004c04:	b083      	sub	sp, #12
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c0a:	bf00      	nop
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
	...

08004c18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a2e      	ldr	r2, [pc, #184]	@ (8004ce4 <TIM_Base_SetConfig+0xcc>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d007      	beq.n	8004c40 <TIM_Base_SetConfig+0x28>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c36:	d003      	beq.n	8004c40 <TIM_Base_SetConfig+0x28>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a2b      	ldr	r2, [pc, #172]	@ (8004ce8 <TIM_Base_SetConfig+0xd0>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d108      	bne.n	8004c52 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	68fa      	ldr	r2, [r7, #12]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a23      	ldr	r2, [pc, #140]	@ (8004ce4 <TIM_Base_SetConfig+0xcc>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d00f      	beq.n	8004c7a <TIM_Base_SetConfig+0x62>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c60:	d00b      	beq.n	8004c7a <TIM_Base_SetConfig+0x62>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a20      	ldr	r2, [pc, #128]	@ (8004ce8 <TIM_Base_SetConfig+0xd0>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d007      	beq.n	8004c7a <TIM_Base_SetConfig+0x62>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a1f      	ldr	r2, [pc, #124]	@ (8004cec <TIM_Base_SetConfig+0xd4>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d003      	beq.n	8004c7a <TIM_Base_SetConfig+0x62>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a1e      	ldr	r2, [pc, #120]	@ (8004cf0 <TIM_Base_SetConfig+0xd8>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d108      	bne.n	8004c8c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	689a      	ldr	r2, [r3, #8]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4a0c      	ldr	r2, [pc, #48]	@ (8004ce4 <TIM_Base_SetConfig+0xcc>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d007      	beq.n	8004cc8 <TIM_Base_SetConfig+0xb0>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4a0c      	ldr	r2, [pc, #48]	@ (8004cec <TIM_Base_SetConfig+0xd4>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d003      	beq.n	8004cc8 <TIM_Base_SetConfig+0xb0>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a0b      	ldr	r2, [pc, #44]	@ (8004cf0 <TIM_Base_SetConfig+0xd8>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d103      	bne.n	8004cd0 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	691a      	ldr	r2, [r3, #16]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	615a      	str	r2, [r3, #20]
}
 8004cd6:	bf00      	nop
 8004cd8:	3714      	adds	r7, #20
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	40012c00 	.word	0x40012c00
 8004ce8:	40000400 	.word	0x40000400
 8004cec:	40014000 	.word	0x40014000
 8004cf0:	40014400 	.word	0x40014400

08004cf4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b087      	sub	sp, #28
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a1b      	ldr	r3, [r3, #32]
 8004d08:	f023 0201 	bic.w	r2, r3, #1
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f023 0303 	bic.w	r3, r3, #3
 8004d2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	f023 0302 	bic.w	r3, r3, #2
 8004d40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a24      	ldr	r2, [pc, #144]	@ (8004de0 <TIM_OC1_SetConfig+0xec>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d007      	beq.n	8004d64 <TIM_OC1_SetConfig+0x70>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a23      	ldr	r2, [pc, #140]	@ (8004de4 <TIM_OC1_SetConfig+0xf0>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d003      	beq.n	8004d64 <TIM_OC1_SetConfig+0x70>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a22      	ldr	r2, [pc, #136]	@ (8004de8 <TIM_OC1_SetConfig+0xf4>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d10c      	bne.n	8004d7e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	f023 0308 	bic.w	r3, r3, #8
 8004d6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	697a      	ldr	r2, [r7, #20]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	f023 0304 	bic.w	r3, r3, #4
 8004d7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a17      	ldr	r2, [pc, #92]	@ (8004de0 <TIM_OC1_SetConfig+0xec>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d007      	beq.n	8004d96 <TIM_OC1_SetConfig+0xa2>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a16      	ldr	r2, [pc, #88]	@ (8004de4 <TIM_OC1_SetConfig+0xf0>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d003      	beq.n	8004d96 <TIM_OC1_SetConfig+0xa2>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a15      	ldr	r2, [pc, #84]	@ (8004de8 <TIM_OC1_SetConfig+0xf4>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d111      	bne.n	8004dba <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004da4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	693a      	ldr	r2, [r7, #16]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	685a      	ldr	r2, [r3, #4]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	621a      	str	r2, [r3, #32]
}
 8004dd4:	bf00      	nop
 8004dd6:	371c      	adds	r7, #28
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr
 8004de0:	40012c00 	.word	0x40012c00
 8004de4:	40014000 	.word	0x40014000
 8004de8:	40014400 	.word	0x40014400

08004dec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b087      	sub	sp, #28
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a1b      	ldr	r3, [r3, #32]
 8004e00:	f023 0210 	bic.w	r2, r3, #16
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	021b      	lsls	r3, r3, #8
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	f023 0320 	bic.w	r3, r3, #32
 8004e3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	011b      	lsls	r3, r3, #4
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a22      	ldr	r2, [pc, #136]	@ (8004ed4 <TIM_OC2_SetConfig+0xe8>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d10d      	bne.n	8004e6c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	011b      	lsls	r3, r3, #4
 8004e5e:	697a      	ldr	r2, [r7, #20]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a19      	ldr	r2, [pc, #100]	@ (8004ed4 <TIM_OC2_SetConfig+0xe8>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d007      	beq.n	8004e84 <TIM_OC2_SetConfig+0x98>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a18      	ldr	r2, [pc, #96]	@ (8004ed8 <TIM_OC2_SetConfig+0xec>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d003      	beq.n	8004e84 <TIM_OC2_SetConfig+0x98>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a17      	ldr	r2, [pc, #92]	@ (8004edc <TIM_OC2_SetConfig+0xf0>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d113      	bne.n	8004eac <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	695b      	ldr	r3, [r3, #20]
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	693a      	ldr	r2, [r7, #16]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	685a      	ldr	r2, [r3, #4]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	697a      	ldr	r2, [r7, #20]
 8004ec4:	621a      	str	r2, [r3, #32]
}
 8004ec6:	bf00      	nop
 8004ec8:	371c      	adds	r7, #28
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	40012c00 	.word	0x40012c00
 8004ed8:	40014000 	.word	0x40014000
 8004edc:	40014400 	.word	0x40014400

08004ee0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b087      	sub	sp, #28
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a1b      	ldr	r3, [r3, #32]
 8004ef4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	69db      	ldr	r3, [r3, #28]
 8004f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f023 0303 	bic.w	r3, r3, #3
 8004f1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	021b      	lsls	r3, r3, #8
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a21      	ldr	r2, [pc, #132]	@ (8004fc4 <TIM_OC3_SetConfig+0xe4>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d10d      	bne.n	8004f5e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	021b      	lsls	r3, r3, #8
 8004f50:	697a      	ldr	r2, [r7, #20]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a18      	ldr	r2, [pc, #96]	@ (8004fc4 <TIM_OC3_SetConfig+0xe4>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d007      	beq.n	8004f76 <TIM_OC3_SetConfig+0x96>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a17      	ldr	r2, [pc, #92]	@ (8004fc8 <TIM_OC3_SetConfig+0xe8>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d003      	beq.n	8004f76 <TIM_OC3_SetConfig+0x96>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a16      	ldr	r2, [pc, #88]	@ (8004fcc <TIM_OC3_SetConfig+0xec>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d113      	bne.n	8004f9e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	011b      	lsls	r3, r3, #4
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	011b      	lsls	r3, r3, #4
 8004f98:	693a      	ldr	r2, [r7, #16]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	685a      	ldr	r2, [r3, #4]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	697a      	ldr	r2, [r7, #20]
 8004fb6:	621a      	str	r2, [r3, #32]
}
 8004fb8:	bf00      	nop
 8004fba:	371c      	adds	r7, #28
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr
 8004fc4:	40012c00 	.word	0x40012c00
 8004fc8:	40014000 	.word	0x40014000
 8004fcc:	40014400 	.word	0x40014400

08004fd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b087      	sub	sp, #28
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a1b      	ldr	r3, [r3, #32]
 8004fe4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	69db      	ldr	r3, [r3, #28]
 8004ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ffe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800500a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	021b      	lsls	r3, r3, #8
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	4313      	orrs	r3, r2
 8005016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800501e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	031b      	lsls	r3, r3, #12
 8005026:	693a      	ldr	r2, [r7, #16]
 8005028:	4313      	orrs	r3, r2
 800502a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a14      	ldr	r2, [pc, #80]	@ (8005080 <TIM_OC4_SetConfig+0xb0>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d007      	beq.n	8005044 <TIM_OC4_SetConfig+0x74>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a13      	ldr	r2, [pc, #76]	@ (8005084 <TIM_OC4_SetConfig+0xb4>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d003      	beq.n	8005044 <TIM_OC4_SetConfig+0x74>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a12      	ldr	r2, [pc, #72]	@ (8005088 <TIM_OC4_SetConfig+0xb8>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d109      	bne.n	8005058 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800504a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	695b      	ldr	r3, [r3, #20]
 8005050:	019b      	lsls	r3, r3, #6
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	4313      	orrs	r3, r2
 8005056:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	697a      	ldr	r2, [r7, #20]
 800505c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685a      	ldr	r2, [r3, #4]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	621a      	str	r2, [r3, #32]
}
 8005072:	bf00      	nop
 8005074:	371c      	adds	r7, #28
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	40012c00 	.word	0x40012c00
 8005084:	40014000 	.word	0x40014000
 8005088:	40014400 	.word	0x40014400

0800508c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800508c:	b480      	push	{r7}
 800508e:	b087      	sub	sp, #28
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a1b      	ldr	r3, [r3, #32]
 800509a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a1b      	ldr	r3, [r3, #32]
 80050a0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80050d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	041b      	lsls	r3, r3, #16
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	4313      	orrs	r3, r2
 80050dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a13      	ldr	r2, [pc, #76]	@ (8005130 <TIM_OC5_SetConfig+0xa4>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d007      	beq.n	80050f6 <TIM_OC5_SetConfig+0x6a>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a12      	ldr	r2, [pc, #72]	@ (8005134 <TIM_OC5_SetConfig+0xa8>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d003      	beq.n	80050f6 <TIM_OC5_SetConfig+0x6a>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a11      	ldr	r2, [pc, #68]	@ (8005138 <TIM_OC5_SetConfig+0xac>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d109      	bne.n	800510a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	021b      	lsls	r3, r3, #8
 8005104:	697a      	ldr	r2, [r7, #20]
 8005106:	4313      	orrs	r3, r2
 8005108:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	697a      	ldr	r2, [r7, #20]
 800510e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	685a      	ldr	r2, [r3, #4]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	693a      	ldr	r2, [r7, #16]
 8005122:	621a      	str	r2, [r3, #32]
}
 8005124:	bf00      	nop
 8005126:	371c      	adds	r7, #28
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr
 8005130:	40012c00 	.word	0x40012c00
 8005134:	40014000 	.word	0x40014000
 8005138:	40014400 	.word	0x40014400

0800513c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800513c:	b480      	push	{r7}
 800513e:	b087      	sub	sp, #28
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a1b      	ldr	r3, [r3, #32]
 800514a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a1b      	ldr	r3, [r3, #32]
 8005150:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800516a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800516e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	021b      	lsls	r3, r3, #8
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	4313      	orrs	r3, r2
 800517a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005182:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	051b      	lsls	r3, r3, #20
 800518a:	693a      	ldr	r2, [r7, #16]
 800518c:	4313      	orrs	r3, r2
 800518e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a14      	ldr	r2, [pc, #80]	@ (80051e4 <TIM_OC6_SetConfig+0xa8>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d007      	beq.n	80051a8 <TIM_OC6_SetConfig+0x6c>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a13      	ldr	r2, [pc, #76]	@ (80051e8 <TIM_OC6_SetConfig+0xac>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d003      	beq.n	80051a8 <TIM_OC6_SetConfig+0x6c>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a12      	ldr	r2, [pc, #72]	@ (80051ec <TIM_OC6_SetConfig+0xb0>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d109      	bne.n	80051bc <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80051ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	695b      	ldr	r3, [r3, #20]
 80051b4:	029b      	lsls	r3, r3, #10
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	693a      	ldr	r2, [r7, #16]
 80051d4:	621a      	str	r2, [r3, #32]
}
 80051d6:	bf00      	nop
 80051d8:	371c      	adds	r7, #28
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	40012c00 	.word	0x40012c00
 80051e8:	40014000 	.word	0x40014000
 80051ec:	40014400 	.word	0x40014400

080051f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b087      	sub	sp, #28
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6a1b      	ldr	r3, [r3, #32]
 8005200:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	f023 0201 	bic.w	r2, r3, #1
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800521a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	011b      	lsls	r3, r3, #4
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	4313      	orrs	r3, r2
 8005224:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	f023 030a 	bic.w	r3, r3, #10
 800522c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	4313      	orrs	r3, r2
 8005234:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	621a      	str	r2, [r3, #32]
}
 8005242:	bf00      	nop
 8005244:	371c      	adds	r7, #28
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr

0800524e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800524e:	b480      	push	{r7}
 8005250:	b087      	sub	sp, #28
 8005252:	af00      	add	r7, sp, #0
 8005254:	60f8      	str	r0, [r7, #12]
 8005256:	60b9      	str	r1, [r7, #8]
 8005258:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6a1b      	ldr	r3, [r3, #32]
 8005264:	f023 0210 	bic.w	r2, r3, #16
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	699b      	ldr	r3, [r3, #24]
 8005270:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005278:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	031b      	lsls	r3, r3, #12
 800527e:	693a      	ldr	r2, [r7, #16]
 8005280:	4313      	orrs	r3, r2
 8005282:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800528a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	011b      	lsls	r3, r3, #4
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	4313      	orrs	r3, r2
 8005294:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	621a      	str	r2, [r3, #32]
}
 80052a2:	bf00      	nop
 80052a4:	371c      	adds	r7, #28
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr

080052ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052ae:	b480      	push	{r7}
 80052b0:	b085      	sub	sp, #20
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
 80052b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052c6:	683a      	ldr	r2, [r7, #0]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	f043 0307 	orr.w	r3, r3, #7
 80052d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	609a      	str	r2, [r3, #8]
}
 80052d8:	bf00      	nop
 80052da:	3714      	adds	r7, #20
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b087      	sub	sp, #28
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
 80052f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80052fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	021a      	lsls	r2, r3, #8
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	431a      	orrs	r2, r3
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	4313      	orrs	r3, r2
 800530c:	697a      	ldr	r2, [r7, #20]
 800530e:	4313      	orrs	r3, r2
 8005310:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	609a      	str	r2, [r3, #8]
}
 8005318:	bf00      	nop
 800531a:	371c      	adds	r7, #28
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005324:	b480      	push	{r7}
 8005326:	b087      	sub	sp, #28
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	f003 031f 	and.w	r3, r3, #31
 8005336:	2201      	movs	r2, #1
 8005338:	fa02 f303 	lsl.w	r3, r2, r3
 800533c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6a1a      	ldr	r2, [r3, #32]
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	43db      	mvns	r3, r3
 8005346:	401a      	ands	r2, r3
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6a1a      	ldr	r2, [r3, #32]
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	f003 031f 	and.w	r3, r3, #31
 8005356:	6879      	ldr	r1, [r7, #4]
 8005358:	fa01 f303 	lsl.w	r3, r1, r3
 800535c:	431a      	orrs	r2, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	621a      	str	r2, [r3, #32]
}
 8005362:	bf00      	nop
 8005364:	371c      	adds	r7, #28
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
	...

08005370 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005380:	2b01      	cmp	r3, #1
 8005382:	d101      	bne.n	8005388 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005384:	2302      	movs	r3, #2
 8005386:	e054      	b.n	8005432 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2202      	movs	r2, #2
 8005394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a24      	ldr	r2, [pc, #144]	@ (8005440 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d108      	bne.n	80053c4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80053b8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a17      	ldr	r2, [pc, #92]	@ (8005440 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d00e      	beq.n	8005406 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053f0:	d009      	beq.n	8005406 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a13      	ldr	r2, [pc, #76]	@ (8005444 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d004      	beq.n	8005406 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a11      	ldr	r2, [pc, #68]	@ (8005448 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d10c      	bne.n	8005420 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800540c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	68ba      	ldr	r2, [r7, #8]
 8005414:	4313      	orrs	r3, r2
 8005416:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68ba      	ldr	r2, [r7, #8]
 800541e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3714      	adds	r7, #20
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	40012c00 	.word	0x40012c00
 8005444:	40000400 	.word	0x40000400
 8005448:	40014000 	.word	0x40014000

0800544c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800544c:	b480      	push	{r7}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005456:	2300      	movs	r3, #0
 8005458:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005460:	2b01      	cmp	r3, #1
 8005462:	d101      	bne.n	8005468 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005464:	2302      	movs	r3, #2
 8005466:	e060      	b.n	800552a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	4313      	orrs	r3, r2
 800547c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	4313      	orrs	r3, r2
 800548a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	4313      	orrs	r3, r2
 8005498:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	695b      	ldr	r3, [r3, #20]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ce:	4313      	orrs	r3, r2
 80054d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	041b      	lsls	r3, r3, #16
 80054de:	4313      	orrs	r3, r2
 80054e0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a14      	ldr	r2, [pc, #80]	@ (8005538 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d115      	bne.n	8005518 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f6:	051b      	lsls	r3, r3, #20
 80054f8:	4313      	orrs	r3, r2
 80054fa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	69db      	ldr	r3, [r3, #28]
 8005506:	4313      	orrs	r3, r2
 8005508:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	6a1b      	ldr	r3, [r3, #32]
 8005514:	4313      	orrs	r3, r2
 8005516:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	3714      	adds	r7, #20
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	40012c00 	.word	0x40012c00

0800553c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005558:	bf00      	nop
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d101      	bne.n	800558a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e040      	b.n	800560c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800558e:	2b00      	cmp	r3, #0
 8005590:	d106      	bne.n	80055a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f7fb fb74 	bl	8000c88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2224      	movs	r2, #36	@ 0x24
 80055a4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f022 0201 	bic.w	r2, r2, #1
 80055b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d002      	beq.n	80055c4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 fb38 	bl	8005c34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 f8af 	bl	8005728 <UART_SetConfig>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d101      	bne.n	80055d4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e01b      	b.n	800560c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	685a      	ldr	r2, [r3, #4]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80055e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	689a      	ldr	r2, [r3, #8]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80055f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f042 0201 	orr.w	r2, r2, #1
 8005602:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 fbb7 	bl	8005d78 <UART_CheckIdleState>
 800560a:	4603      	mov	r3, r0
}
 800560c:	4618      	mov	r0, r3
 800560e:	3708      	adds	r7, #8
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b08a      	sub	sp, #40	@ 0x28
 8005618:	af02      	add	r7, sp, #8
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	603b      	str	r3, [r7, #0]
 8005620:	4613      	mov	r3, r2
 8005622:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005628:	2b20      	cmp	r3, #32
 800562a:	d177      	bne.n	800571c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d002      	beq.n	8005638 <HAL_UART_Transmit+0x24>
 8005632:	88fb      	ldrh	r3, [r7, #6]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d101      	bne.n	800563c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e070      	b.n	800571e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2200      	movs	r2, #0
 8005640:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2221      	movs	r2, #33	@ 0x21
 8005648:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800564a:	f7fb fc97 	bl	8000f7c <HAL_GetTick>
 800564e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	88fa      	ldrh	r2, [r7, #6]
 8005654:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	88fa      	ldrh	r2, [r7, #6]
 800565c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005668:	d108      	bne.n	800567c <HAL_UART_Transmit+0x68>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d104      	bne.n	800567c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005672:	2300      	movs	r3, #0
 8005674:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	61bb      	str	r3, [r7, #24]
 800567a:	e003      	b.n	8005684 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005680:	2300      	movs	r3, #0
 8005682:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005684:	e02f      	b.n	80056e6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	9300      	str	r3, [sp, #0]
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	2200      	movs	r2, #0
 800568e:	2180      	movs	r1, #128	@ 0x80
 8005690:	68f8      	ldr	r0, [r7, #12]
 8005692:	f000 fc19 	bl	8005ec8 <UART_WaitOnFlagUntilTimeout>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d004      	beq.n	80056a6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2220      	movs	r2, #32
 80056a0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e03b      	b.n	800571e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d10b      	bne.n	80056c4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	881a      	ldrh	r2, [r3, #0]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056b8:	b292      	uxth	r2, r2
 80056ba:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	3302      	adds	r3, #2
 80056c0:	61bb      	str	r3, [r7, #24]
 80056c2:	e007      	b.n	80056d4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	781a      	ldrb	r2, [r3, #0]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	3301      	adds	r3, #1
 80056d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80056da:	b29b      	uxth	r3, r3
 80056dc:	3b01      	subs	r3, #1
 80056de:	b29a      	uxth	r2, r3
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d1c9      	bne.n	8005686 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	9300      	str	r3, [sp, #0]
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	2200      	movs	r2, #0
 80056fa:	2140      	movs	r1, #64	@ 0x40
 80056fc:	68f8      	ldr	r0, [r7, #12]
 80056fe:	f000 fbe3 	bl	8005ec8 <UART_WaitOnFlagUntilTimeout>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d004      	beq.n	8005712 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2220      	movs	r2, #32
 800570c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e005      	b.n	800571e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2220      	movs	r2, #32
 8005716:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005718:	2300      	movs	r3, #0
 800571a:	e000      	b.n	800571e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800571c:	2302      	movs	r3, #2
  }
}
 800571e:	4618      	mov	r0, r3
 8005720:	3720      	adds	r7, #32
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
	...

08005728 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800572c:	b08a      	sub	sp, #40	@ 0x28
 800572e:	af00      	add	r7, sp, #0
 8005730:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005732:	2300      	movs	r3, #0
 8005734:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	689a      	ldr	r2, [r3, #8]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	431a      	orrs	r2, r3
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	695b      	ldr	r3, [r3, #20]
 8005746:	431a      	orrs	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	69db      	ldr	r3, [r3, #28]
 800574c:	4313      	orrs	r3, r2
 800574e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	4ba5      	ldr	r3, [pc, #660]	@ (80059ec <UART_SetConfig+0x2c4>)
 8005758:	4013      	ands	r3, r2
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	6812      	ldr	r2, [r2, #0]
 800575e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005760:	430b      	orrs	r3, r1
 8005762:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	68da      	ldr	r2, [r3, #12]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	430a      	orrs	r2, r1
 8005778:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a9a      	ldr	r2, [pc, #616]	@ (80059f0 <UART_SetConfig+0x2c8>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d004      	beq.n	8005794 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6a1b      	ldr	r3, [r3, #32]
 800578e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005790:	4313      	orrs	r3, r2
 8005792:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057a4:	430a      	orrs	r2, r1
 80057a6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a91      	ldr	r2, [pc, #580]	@ (80059f4 <UART_SetConfig+0x2cc>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d126      	bne.n	8005800 <UART_SetConfig+0xd8>
 80057b2:	4b91      	ldr	r3, [pc, #580]	@ (80059f8 <UART_SetConfig+0x2d0>)
 80057b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057b8:	f003 0303 	and.w	r3, r3, #3
 80057bc:	2b03      	cmp	r3, #3
 80057be:	d81b      	bhi.n	80057f8 <UART_SetConfig+0xd0>
 80057c0:	a201      	add	r2, pc, #4	@ (adr r2, 80057c8 <UART_SetConfig+0xa0>)
 80057c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c6:	bf00      	nop
 80057c8:	080057d9 	.word	0x080057d9
 80057cc:	080057e9 	.word	0x080057e9
 80057d0:	080057e1 	.word	0x080057e1
 80057d4:	080057f1 	.word	0x080057f1
 80057d8:	2301      	movs	r3, #1
 80057da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057de:	e0d6      	b.n	800598e <UART_SetConfig+0x266>
 80057e0:	2302      	movs	r3, #2
 80057e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057e6:	e0d2      	b.n	800598e <UART_SetConfig+0x266>
 80057e8:	2304      	movs	r3, #4
 80057ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057ee:	e0ce      	b.n	800598e <UART_SetConfig+0x266>
 80057f0:	2308      	movs	r3, #8
 80057f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057f6:	e0ca      	b.n	800598e <UART_SetConfig+0x266>
 80057f8:	2310      	movs	r3, #16
 80057fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057fe:	e0c6      	b.n	800598e <UART_SetConfig+0x266>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a7d      	ldr	r2, [pc, #500]	@ (80059fc <UART_SetConfig+0x2d4>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d138      	bne.n	800587c <UART_SetConfig+0x154>
 800580a:	4b7b      	ldr	r3, [pc, #492]	@ (80059f8 <UART_SetConfig+0x2d0>)
 800580c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005810:	f003 030c 	and.w	r3, r3, #12
 8005814:	2b0c      	cmp	r3, #12
 8005816:	d82d      	bhi.n	8005874 <UART_SetConfig+0x14c>
 8005818:	a201      	add	r2, pc, #4	@ (adr r2, 8005820 <UART_SetConfig+0xf8>)
 800581a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800581e:	bf00      	nop
 8005820:	08005855 	.word	0x08005855
 8005824:	08005875 	.word	0x08005875
 8005828:	08005875 	.word	0x08005875
 800582c:	08005875 	.word	0x08005875
 8005830:	08005865 	.word	0x08005865
 8005834:	08005875 	.word	0x08005875
 8005838:	08005875 	.word	0x08005875
 800583c:	08005875 	.word	0x08005875
 8005840:	0800585d 	.word	0x0800585d
 8005844:	08005875 	.word	0x08005875
 8005848:	08005875 	.word	0x08005875
 800584c:	08005875 	.word	0x08005875
 8005850:	0800586d 	.word	0x0800586d
 8005854:	2300      	movs	r3, #0
 8005856:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800585a:	e098      	b.n	800598e <UART_SetConfig+0x266>
 800585c:	2302      	movs	r3, #2
 800585e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005862:	e094      	b.n	800598e <UART_SetConfig+0x266>
 8005864:	2304      	movs	r3, #4
 8005866:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800586a:	e090      	b.n	800598e <UART_SetConfig+0x266>
 800586c:	2308      	movs	r3, #8
 800586e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005872:	e08c      	b.n	800598e <UART_SetConfig+0x266>
 8005874:	2310      	movs	r3, #16
 8005876:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800587a:	e088      	b.n	800598e <UART_SetConfig+0x266>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a5f      	ldr	r2, [pc, #380]	@ (8005a00 <UART_SetConfig+0x2d8>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d125      	bne.n	80058d2 <UART_SetConfig+0x1aa>
 8005886:	4b5c      	ldr	r3, [pc, #368]	@ (80059f8 <UART_SetConfig+0x2d0>)
 8005888:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800588c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005890:	2b30      	cmp	r3, #48	@ 0x30
 8005892:	d016      	beq.n	80058c2 <UART_SetConfig+0x19a>
 8005894:	2b30      	cmp	r3, #48	@ 0x30
 8005896:	d818      	bhi.n	80058ca <UART_SetConfig+0x1a2>
 8005898:	2b20      	cmp	r3, #32
 800589a:	d00a      	beq.n	80058b2 <UART_SetConfig+0x18a>
 800589c:	2b20      	cmp	r3, #32
 800589e:	d814      	bhi.n	80058ca <UART_SetConfig+0x1a2>
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d002      	beq.n	80058aa <UART_SetConfig+0x182>
 80058a4:	2b10      	cmp	r3, #16
 80058a6:	d008      	beq.n	80058ba <UART_SetConfig+0x192>
 80058a8:	e00f      	b.n	80058ca <UART_SetConfig+0x1a2>
 80058aa:	2300      	movs	r3, #0
 80058ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058b0:	e06d      	b.n	800598e <UART_SetConfig+0x266>
 80058b2:	2302      	movs	r3, #2
 80058b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058b8:	e069      	b.n	800598e <UART_SetConfig+0x266>
 80058ba:	2304      	movs	r3, #4
 80058bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058c0:	e065      	b.n	800598e <UART_SetConfig+0x266>
 80058c2:	2308      	movs	r3, #8
 80058c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058c8:	e061      	b.n	800598e <UART_SetConfig+0x266>
 80058ca:	2310      	movs	r3, #16
 80058cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058d0:	e05d      	b.n	800598e <UART_SetConfig+0x266>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a4b      	ldr	r2, [pc, #300]	@ (8005a04 <UART_SetConfig+0x2dc>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d125      	bne.n	8005928 <UART_SetConfig+0x200>
 80058dc:	4b46      	ldr	r3, [pc, #280]	@ (80059f8 <UART_SetConfig+0x2d0>)
 80058de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058e2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80058e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80058e8:	d016      	beq.n	8005918 <UART_SetConfig+0x1f0>
 80058ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80058ec:	d818      	bhi.n	8005920 <UART_SetConfig+0x1f8>
 80058ee:	2b80      	cmp	r3, #128	@ 0x80
 80058f0:	d00a      	beq.n	8005908 <UART_SetConfig+0x1e0>
 80058f2:	2b80      	cmp	r3, #128	@ 0x80
 80058f4:	d814      	bhi.n	8005920 <UART_SetConfig+0x1f8>
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d002      	beq.n	8005900 <UART_SetConfig+0x1d8>
 80058fa:	2b40      	cmp	r3, #64	@ 0x40
 80058fc:	d008      	beq.n	8005910 <UART_SetConfig+0x1e8>
 80058fe:	e00f      	b.n	8005920 <UART_SetConfig+0x1f8>
 8005900:	2300      	movs	r3, #0
 8005902:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005906:	e042      	b.n	800598e <UART_SetConfig+0x266>
 8005908:	2302      	movs	r3, #2
 800590a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800590e:	e03e      	b.n	800598e <UART_SetConfig+0x266>
 8005910:	2304      	movs	r3, #4
 8005912:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005916:	e03a      	b.n	800598e <UART_SetConfig+0x266>
 8005918:	2308      	movs	r3, #8
 800591a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800591e:	e036      	b.n	800598e <UART_SetConfig+0x266>
 8005920:	2310      	movs	r3, #16
 8005922:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005926:	e032      	b.n	800598e <UART_SetConfig+0x266>
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a30      	ldr	r2, [pc, #192]	@ (80059f0 <UART_SetConfig+0x2c8>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d12a      	bne.n	8005988 <UART_SetConfig+0x260>
 8005932:	4b31      	ldr	r3, [pc, #196]	@ (80059f8 <UART_SetConfig+0x2d0>)
 8005934:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005938:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800593c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005940:	d01a      	beq.n	8005978 <UART_SetConfig+0x250>
 8005942:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005946:	d81b      	bhi.n	8005980 <UART_SetConfig+0x258>
 8005948:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800594c:	d00c      	beq.n	8005968 <UART_SetConfig+0x240>
 800594e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005952:	d815      	bhi.n	8005980 <UART_SetConfig+0x258>
 8005954:	2b00      	cmp	r3, #0
 8005956:	d003      	beq.n	8005960 <UART_SetConfig+0x238>
 8005958:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800595c:	d008      	beq.n	8005970 <UART_SetConfig+0x248>
 800595e:	e00f      	b.n	8005980 <UART_SetConfig+0x258>
 8005960:	2300      	movs	r3, #0
 8005962:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005966:	e012      	b.n	800598e <UART_SetConfig+0x266>
 8005968:	2302      	movs	r3, #2
 800596a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800596e:	e00e      	b.n	800598e <UART_SetConfig+0x266>
 8005970:	2304      	movs	r3, #4
 8005972:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005976:	e00a      	b.n	800598e <UART_SetConfig+0x266>
 8005978:	2308      	movs	r3, #8
 800597a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800597e:	e006      	b.n	800598e <UART_SetConfig+0x266>
 8005980:	2310      	movs	r3, #16
 8005982:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005986:	e002      	b.n	800598e <UART_SetConfig+0x266>
 8005988:	2310      	movs	r3, #16
 800598a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a17      	ldr	r2, [pc, #92]	@ (80059f0 <UART_SetConfig+0x2c8>)
 8005994:	4293      	cmp	r3, r2
 8005996:	f040 808b 	bne.w	8005ab0 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800599a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800599e:	2b08      	cmp	r3, #8
 80059a0:	d834      	bhi.n	8005a0c <UART_SetConfig+0x2e4>
 80059a2:	a201      	add	r2, pc, #4	@ (adr r2, 80059a8 <UART_SetConfig+0x280>)
 80059a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a8:	080059cd 	.word	0x080059cd
 80059ac:	08005a0d 	.word	0x08005a0d
 80059b0:	080059d5 	.word	0x080059d5
 80059b4:	08005a0d 	.word	0x08005a0d
 80059b8:	080059db 	.word	0x080059db
 80059bc:	08005a0d 	.word	0x08005a0d
 80059c0:	08005a0d 	.word	0x08005a0d
 80059c4:	08005a0d 	.word	0x08005a0d
 80059c8:	080059e3 	.word	0x080059e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059cc:	f7fd ff1a 	bl	8003804 <HAL_RCC_GetPCLK1Freq>
 80059d0:	61f8      	str	r0, [r7, #28]
        break;
 80059d2:	e021      	b.n	8005a18 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059d4:	4b0c      	ldr	r3, [pc, #48]	@ (8005a08 <UART_SetConfig+0x2e0>)
 80059d6:	61fb      	str	r3, [r7, #28]
        break;
 80059d8:	e01e      	b.n	8005a18 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059da:	f7fd fe7b 	bl	80036d4 <HAL_RCC_GetSysClockFreq>
 80059de:	61f8      	str	r0, [r7, #28]
        break;
 80059e0:	e01a      	b.n	8005a18 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059e6:	61fb      	str	r3, [r7, #28]
        break;
 80059e8:	e016      	b.n	8005a18 <UART_SetConfig+0x2f0>
 80059ea:	bf00      	nop
 80059ec:	efff69f3 	.word	0xefff69f3
 80059f0:	40008000 	.word	0x40008000
 80059f4:	40013800 	.word	0x40013800
 80059f8:	40021000 	.word	0x40021000
 80059fc:	40004400 	.word	0x40004400
 8005a00:	40004800 	.word	0x40004800
 8005a04:	40004c00 	.word	0x40004c00
 8005a08:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005a16:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	f000 80fa 	beq.w	8005c14 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	685a      	ldr	r2, [r3, #4]
 8005a24:	4613      	mov	r3, r2
 8005a26:	005b      	lsls	r3, r3, #1
 8005a28:	4413      	add	r3, r2
 8005a2a:	69fa      	ldr	r2, [r7, #28]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d305      	bcc.n	8005a3c <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005a36:	69fa      	ldr	r2, [r7, #28]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d903      	bls.n	8005a44 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005a42:	e0e7      	b.n	8005c14 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	2200      	movs	r2, #0
 8005a48:	461c      	mov	r4, r3
 8005a4a:	4615      	mov	r5, r2
 8005a4c:	f04f 0200 	mov.w	r2, #0
 8005a50:	f04f 0300 	mov.w	r3, #0
 8005a54:	022b      	lsls	r3, r5, #8
 8005a56:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005a5a:	0222      	lsls	r2, r4, #8
 8005a5c:	68f9      	ldr	r1, [r7, #12]
 8005a5e:	6849      	ldr	r1, [r1, #4]
 8005a60:	0849      	lsrs	r1, r1, #1
 8005a62:	2000      	movs	r0, #0
 8005a64:	4688      	mov	r8, r1
 8005a66:	4681      	mov	r9, r0
 8005a68:	eb12 0a08 	adds.w	sl, r2, r8
 8005a6c:	eb43 0b09 	adc.w	fp, r3, r9
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	603b      	str	r3, [r7, #0]
 8005a78:	607a      	str	r2, [r7, #4]
 8005a7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a7e:	4650      	mov	r0, sl
 8005a80:	4659      	mov	r1, fp
 8005a82:	f7fa fc05 	bl	8000290 <__aeabi_uldivmod>
 8005a86:	4602      	mov	r2, r0
 8005a88:	460b      	mov	r3, r1
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a94:	d308      	bcc.n	8005aa8 <UART_SetConfig+0x380>
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a9c:	d204      	bcs.n	8005aa8 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	69ba      	ldr	r2, [r7, #24]
 8005aa4:	60da      	str	r2, [r3, #12]
 8005aa6:	e0b5      	b.n	8005c14 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005aae:	e0b1      	b.n	8005c14 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	69db      	ldr	r3, [r3, #28]
 8005ab4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ab8:	d15d      	bne.n	8005b76 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8005aba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005abe:	2b08      	cmp	r3, #8
 8005ac0:	d827      	bhi.n	8005b12 <UART_SetConfig+0x3ea>
 8005ac2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ac8 <UART_SetConfig+0x3a0>)
 8005ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac8:	08005aed 	.word	0x08005aed
 8005acc:	08005af5 	.word	0x08005af5
 8005ad0:	08005afd 	.word	0x08005afd
 8005ad4:	08005b13 	.word	0x08005b13
 8005ad8:	08005b03 	.word	0x08005b03
 8005adc:	08005b13 	.word	0x08005b13
 8005ae0:	08005b13 	.word	0x08005b13
 8005ae4:	08005b13 	.word	0x08005b13
 8005ae8:	08005b0b 	.word	0x08005b0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005aec:	f7fd fe8a 	bl	8003804 <HAL_RCC_GetPCLK1Freq>
 8005af0:	61f8      	str	r0, [r7, #28]
        break;
 8005af2:	e014      	b.n	8005b1e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005af4:	f7fd fe9c 	bl	8003830 <HAL_RCC_GetPCLK2Freq>
 8005af8:	61f8      	str	r0, [r7, #28]
        break;
 8005afa:	e010      	b.n	8005b1e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005afc:	4b4c      	ldr	r3, [pc, #304]	@ (8005c30 <UART_SetConfig+0x508>)
 8005afe:	61fb      	str	r3, [r7, #28]
        break;
 8005b00:	e00d      	b.n	8005b1e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b02:	f7fd fde7 	bl	80036d4 <HAL_RCC_GetSysClockFreq>
 8005b06:	61f8      	str	r0, [r7, #28]
        break;
 8005b08:	e009      	b.n	8005b1e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b0e:	61fb      	str	r3, [r7, #28]
        break;
 8005b10:	e005      	b.n	8005b1e <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8005b12:	2300      	movs	r3, #0
 8005b14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005b1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d077      	beq.n	8005c14 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	005a      	lsls	r2, r3, #1
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	085b      	lsrs	r3, r3, #1
 8005b2e:	441a      	add	r2, r3
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b38:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	2b0f      	cmp	r3, #15
 8005b3e:	d916      	bls.n	8005b6e <UART_SetConfig+0x446>
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b46:	d212      	bcs.n	8005b6e <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	f023 030f 	bic.w	r3, r3, #15
 8005b50:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	085b      	lsrs	r3, r3, #1
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	f003 0307 	and.w	r3, r3, #7
 8005b5c:	b29a      	uxth	r2, r3
 8005b5e:	8afb      	ldrh	r3, [r7, #22]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	8afa      	ldrh	r2, [r7, #22]
 8005b6a:	60da      	str	r2, [r3, #12]
 8005b6c:	e052      	b.n	8005c14 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005b74:	e04e      	b.n	8005c14 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b76:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005b7a:	2b08      	cmp	r3, #8
 8005b7c:	d827      	bhi.n	8005bce <UART_SetConfig+0x4a6>
 8005b7e:	a201      	add	r2, pc, #4	@ (adr r2, 8005b84 <UART_SetConfig+0x45c>)
 8005b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b84:	08005ba9 	.word	0x08005ba9
 8005b88:	08005bb1 	.word	0x08005bb1
 8005b8c:	08005bb9 	.word	0x08005bb9
 8005b90:	08005bcf 	.word	0x08005bcf
 8005b94:	08005bbf 	.word	0x08005bbf
 8005b98:	08005bcf 	.word	0x08005bcf
 8005b9c:	08005bcf 	.word	0x08005bcf
 8005ba0:	08005bcf 	.word	0x08005bcf
 8005ba4:	08005bc7 	.word	0x08005bc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ba8:	f7fd fe2c 	bl	8003804 <HAL_RCC_GetPCLK1Freq>
 8005bac:	61f8      	str	r0, [r7, #28]
        break;
 8005bae:	e014      	b.n	8005bda <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bb0:	f7fd fe3e 	bl	8003830 <HAL_RCC_GetPCLK2Freq>
 8005bb4:	61f8      	str	r0, [r7, #28]
        break;
 8005bb6:	e010      	b.n	8005bda <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bb8:	4b1d      	ldr	r3, [pc, #116]	@ (8005c30 <UART_SetConfig+0x508>)
 8005bba:	61fb      	str	r3, [r7, #28]
        break;
 8005bbc:	e00d      	b.n	8005bda <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bbe:	f7fd fd89 	bl	80036d4 <HAL_RCC_GetSysClockFreq>
 8005bc2:	61f8      	str	r0, [r7, #28]
        break;
 8005bc4:	e009      	b.n	8005bda <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bca:	61fb      	str	r3, [r7, #28]
        break;
 8005bcc:	e005      	b.n	8005bda <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005bd8:	bf00      	nop
    }

    if (pclk != 0U)
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d019      	beq.n	8005c14 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	085a      	lsrs	r2, r3, #1
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	441a      	add	r2, r3
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bf2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	2b0f      	cmp	r3, #15
 8005bf8:	d909      	bls.n	8005c0e <UART_SetConfig+0x4e6>
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c00:	d205      	bcs.n	8005c0e <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	b29a      	uxth	r2, r3
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	60da      	str	r2, [r3, #12]
 8005c0c:	e002      	b.n	8005c14 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005c20:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3728      	adds	r7, #40	@ 0x28
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c2e:	bf00      	nop
 8005c30:	00f42400 	.word	0x00f42400

08005c34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c40:	f003 0308 	and.w	r3, r3, #8
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00a      	beq.n	8005c5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	430a      	orrs	r2, r1
 8005c5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c62:	f003 0301 	and.w	r3, r3, #1
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00a      	beq.n	8005c80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	430a      	orrs	r2, r1
 8005c7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c84:	f003 0302 	and.w	r3, r3, #2
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00a      	beq.n	8005ca2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	430a      	orrs	r2, r1
 8005ca0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ca6:	f003 0304 	and.w	r3, r3, #4
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00a      	beq.n	8005cc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	430a      	orrs	r2, r1
 8005cc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cc8:	f003 0310 	and.w	r3, r3, #16
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d00a      	beq.n	8005ce6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	430a      	orrs	r2, r1
 8005ce4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cea:	f003 0320 	and.w	r3, r3, #32
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00a      	beq.n	8005d08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	430a      	orrs	r2, r1
 8005d06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d01a      	beq.n	8005d4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	430a      	orrs	r2, r1
 8005d28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d32:	d10a      	bne.n	8005d4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	430a      	orrs	r2, r1
 8005d48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00a      	beq.n	8005d6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	430a      	orrs	r2, r1
 8005d6a:	605a      	str	r2, [r3, #4]
  }
}
 8005d6c:	bf00      	nop
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b098      	sub	sp, #96	@ 0x60
 8005d7c:	af02      	add	r7, sp, #8
 8005d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d88:	f7fb f8f8 	bl	8000f7c <HAL_GetTick>
 8005d8c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 0308 	and.w	r3, r3, #8
 8005d98:	2b08      	cmp	r3, #8
 8005d9a:	d12e      	bne.n	8005dfa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d9c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005da0:	9300      	str	r3, [sp, #0]
 8005da2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005da4:	2200      	movs	r2, #0
 8005da6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 f88c 	bl	8005ec8 <UART_WaitOnFlagUntilTimeout>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d021      	beq.n	8005dfa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dbe:	e853 3f00 	ldrex	r3, [r3]
 8005dc2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005dc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005dca:	653b      	str	r3, [r7, #80]	@ 0x50
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005dd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dd6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005dda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ddc:	e841 2300 	strex	r3, r2, [r1]
 8005de0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005de2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1e6      	bne.n	8005db6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2220      	movs	r2, #32
 8005dec:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005df6:	2303      	movs	r3, #3
 8005df8:	e062      	b.n	8005ec0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0304 	and.w	r3, r3, #4
 8005e04:	2b04      	cmp	r3, #4
 8005e06:	d149      	bne.n	8005e9c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e08:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005e0c:	9300      	str	r3, [sp, #0]
 8005e0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e10:	2200      	movs	r2, #0
 8005e12:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 f856 	bl	8005ec8 <UART_WaitOnFlagUntilTimeout>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d03c      	beq.n	8005e9c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e2a:	e853 3f00 	ldrex	r3, [r3]
 8005e2e:	623b      	str	r3, [r7, #32]
   return(result);
 8005e30:	6a3b      	ldr	r3, [r7, #32]
 8005e32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e40:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e42:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e44:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e48:	e841 2300 	strex	r3, r2, [r1]
 8005e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d1e6      	bne.n	8005e22 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	3308      	adds	r3, #8
 8005e5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	e853 3f00 	ldrex	r3, [r3]
 8005e62:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f023 0301 	bic.w	r3, r3, #1
 8005e6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	3308      	adds	r3, #8
 8005e72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e74:	61fa      	str	r2, [r7, #28]
 8005e76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e78:	69b9      	ldr	r1, [r7, #24]
 8005e7a:	69fa      	ldr	r2, [r7, #28]
 8005e7c:	e841 2300 	strex	r3, r2, [r1]
 8005e80:	617b      	str	r3, [r7, #20]
   return(result);
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d1e5      	bne.n	8005e54 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2220      	movs	r2, #32
 8005e8c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	e011      	b.n	8005ec0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2220      	movs	r2, #32
 8005ea0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2220      	movs	r2, #32
 8005ea6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3758      	adds	r7, #88	@ 0x58
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	603b      	str	r3, [r7, #0]
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ed8:	e049      	b.n	8005f6e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee0:	d045      	beq.n	8005f6e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ee2:	f7fb f84b 	bl	8000f7c <HAL_GetTick>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	69ba      	ldr	r2, [r7, #24]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d302      	bcc.n	8005ef8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d101      	bne.n	8005efc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ef8:	2303      	movs	r3, #3
 8005efa:	e048      	b.n	8005f8e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 0304 	and.w	r3, r3, #4
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d031      	beq.n	8005f6e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	69db      	ldr	r3, [r3, #28]
 8005f10:	f003 0308 	and.w	r3, r3, #8
 8005f14:	2b08      	cmp	r3, #8
 8005f16:	d110      	bne.n	8005f3a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2208      	movs	r2, #8
 8005f1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f20:	68f8      	ldr	r0, [r7, #12]
 8005f22:	f000 f838 	bl	8005f96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2208      	movs	r2, #8
 8005f2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e029      	b.n	8005f8e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	69db      	ldr	r3, [r3, #28]
 8005f40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f48:	d111      	bne.n	8005f6e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005f52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f54:	68f8      	ldr	r0, [r7, #12]
 8005f56:	f000 f81e 	bl	8005f96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2220      	movs	r2, #32
 8005f5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e00f      	b.n	8005f8e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	69da      	ldr	r2, [r3, #28]
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	4013      	ands	r3, r2
 8005f78:	68ba      	ldr	r2, [r7, #8]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	bf0c      	ite	eq
 8005f7e:	2301      	moveq	r3, #1
 8005f80:	2300      	movne	r3, #0
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	461a      	mov	r2, r3
 8005f86:	79fb      	ldrb	r3, [r7, #7]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d0a6      	beq.n	8005eda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3710      	adds	r7, #16
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f96:	b480      	push	{r7}
 8005f98:	b095      	sub	sp, #84	@ 0x54
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fa6:	e853 3f00 	ldrex	r3, [r3]
 8005faa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005fb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	461a      	mov	r2, r3
 8005fba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fbc:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fbe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005fc2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005fc4:	e841 2300 	strex	r3, r2, [r1]
 8005fc8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d1e6      	bne.n	8005f9e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	3308      	adds	r3, #8
 8005fd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd8:	6a3b      	ldr	r3, [r7, #32]
 8005fda:	e853 3f00 	ldrex	r3, [r3]
 8005fde:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	f023 0301 	bic.w	r3, r3, #1
 8005fe6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	3308      	adds	r3, #8
 8005fee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ff0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ff2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ff6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ff8:	e841 2300 	strex	r3, r2, [r1]
 8005ffc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006000:	2b00      	cmp	r3, #0
 8006002:	d1e5      	bne.n	8005fd0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006008:	2b01      	cmp	r3, #1
 800600a:	d118      	bne.n	800603e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	e853 3f00 	ldrex	r3, [r3]
 8006018:	60bb      	str	r3, [r7, #8]
   return(result);
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	f023 0310 	bic.w	r3, r3, #16
 8006020:	647b      	str	r3, [r7, #68]	@ 0x44
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	461a      	mov	r2, r3
 8006028:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800602a:	61bb      	str	r3, [r7, #24]
 800602c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602e:	6979      	ldr	r1, [r7, #20]
 8006030:	69ba      	ldr	r2, [r7, #24]
 8006032:	e841 2300 	strex	r3, r2, [r1]
 8006036:	613b      	str	r3, [r7, #16]
   return(result);
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d1e6      	bne.n	800600c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2220      	movs	r2, #32
 8006042:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006052:	bf00      	nop
 8006054:	3754      	adds	r7, #84	@ 0x54
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr
	...

08006060 <sniprintf>:
 8006060:	b40c      	push	{r2, r3}
 8006062:	b530      	push	{r4, r5, lr}
 8006064:	4b17      	ldr	r3, [pc, #92]	@ (80060c4 <sniprintf+0x64>)
 8006066:	1e0c      	subs	r4, r1, #0
 8006068:	681d      	ldr	r5, [r3, #0]
 800606a:	b09d      	sub	sp, #116	@ 0x74
 800606c:	da08      	bge.n	8006080 <sniprintf+0x20>
 800606e:	238b      	movs	r3, #139	@ 0x8b
 8006070:	602b      	str	r3, [r5, #0]
 8006072:	f04f 30ff 	mov.w	r0, #4294967295
 8006076:	b01d      	add	sp, #116	@ 0x74
 8006078:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800607c:	b002      	add	sp, #8
 800607e:	4770      	bx	lr
 8006080:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006084:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006088:	bf14      	ite	ne
 800608a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800608e:	4623      	moveq	r3, r4
 8006090:	9304      	str	r3, [sp, #16]
 8006092:	9307      	str	r3, [sp, #28]
 8006094:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006098:	9002      	str	r0, [sp, #8]
 800609a:	9006      	str	r0, [sp, #24]
 800609c:	f8ad 3016 	strh.w	r3, [sp, #22]
 80060a0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80060a2:	ab21      	add	r3, sp, #132	@ 0x84
 80060a4:	a902      	add	r1, sp, #8
 80060a6:	4628      	mov	r0, r5
 80060a8:	9301      	str	r3, [sp, #4]
 80060aa:	f000 f995 	bl	80063d8 <_svfiprintf_r>
 80060ae:	1c43      	adds	r3, r0, #1
 80060b0:	bfbc      	itt	lt
 80060b2:	238b      	movlt	r3, #139	@ 0x8b
 80060b4:	602b      	strlt	r3, [r5, #0]
 80060b6:	2c00      	cmp	r4, #0
 80060b8:	d0dd      	beq.n	8006076 <sniprintf+0x16>
 80060ba:	9b02      	ldr	r3, [sp, #8]
 80060bc:	2200      	movs	r2, #0
 80060be:	701a      	strb	r2, [r3, #0]
 80060c0:	e7d9      	b.n	8006076 <sniprintf+0x16>
 80060c2:	bf00      	nop
 80060c4:	2000000c 	.word	0x2000000c

080060c8 <memset>:
 80060c8:	4402      	add	r2, r0
 80060ca:	4603      	mov	r3, r0
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d100      	bne.n	80060d2 <memset+0xa>
 80060d0:	4770      	bx	lr
 80060d2:	f803 1b01 	strb.w	r1, [r3], #1
 80060d6:	e7f9      	b.n	80060cc <memset+0x4>

080060d8 <__errno>:
 80060d8:	4b01      	ldr	r3, [pc, #4]	@ (80060e0 <__errno+0x8>)
 80060da:	6818      	ldr	r0, [r3, #0]
 80060dc:	4770      	bx	lr
 80060de:	bf00      	nop
 80060e0:	2000000c 	.word	0x2000000c

080060e4 <__libc_init_array>:
 80060e4:	b570      	push	{r4, r5, r6, lr}
 80060e6:	4d0d      	ldr	r5, [pc, #52]	@ (800611c <__libc_init_array+0x38>)
 80060e8:	4c0d      	ldr	r4, [pc, #52]	@ (8006120 <__libc_init_array+0x3c>)
 80060ea:	1b64      	subs	r4, r4, r5
 80060ec:	10a4      	asrs	r4, r4, #2
 80060ee:	2600      	movs	r6, #0
 80060f0:	42a6      	cmp	r6, r4
 80060f2:	d109      	bne.n	8006108 <__libc_init_array+0x24>
 80060f4:	4d0b      	ldr	r5, [pc, #44]	@ (8006124 <__libc_init_array+0x40>)
 80060f6:	4c0c      	ldr	r4, [pc, #48]	@ (8006128 <__libc_init_array+0x44>)
 80060f8:	f000 fc66 	bl	80069c8 <_init>
 80060fc:	1b64      	subs	r4, r4, r5
 80060fe:	10a4      	asrs	r4, r4, #2
 8006100:	2600      	movs	r6, #0
 8006102:	42a6      	cmp	r6, r4
 8006104:	d105      	bne.n	8006112 <__libc_init_array+0x2e>
 8006106:	bd70      	pop	{r4, r5, r6, pc}
 8006108:	f855 3b04 	ldr.w	r3, [r5], #4
 800610c:	4798      	blx	r3
 800610e:	3601      	adds	r6, #1
 8006110:	e7ee      	b.n	80060f0 <__libc_init_array+0xc>
 8006112:	f855 3b04 	ldr.w	r3, [r5], #4
 8006116:	4798      	blx	r3
 8006118:	3601      	adds	r6, #1
 800611a:	e7f2      	b.n	8006102 <__libc_init_array+0x1e>
 800611c:	08006a6c 	.word	0x08006a6c
 8006120:	08006a6c 	.word	0x08006a6c
 8006124:	08006a6c 	.word	0x08006a6c
 8006128:	08006a70 	.word	0x08006a70

0800612c <__retarget_lock_acquire_recursive>:
 800612c:	4770      	bx	lr

0800612e <__retarget_lock_release_recursive>:
 800612e:	4770      	bx	lr

08006130 <_free_r>:
 8006130:	b538      	push	{r3, r4, r5, lr}
 8006132:	4605      	mov	r5, r0
 8006134:	2900      	cmp	r1, #0
 8006136:	d041      	beq.n	80061bc <_free_r+0x8c>
 8006138:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800613c:	1f0c      	subs	r4, r1, #4
 800613e:	2b00      	cmp	r3, #0
 8006140:	bfb8      	it	lt
 8006142:	18e4      	addlt	r4, r4, r3
 8006144:	f000 f8e0 	bl	8006308 <__malloc_lock>
 8006148:	4a1d      	ldr	r2, [pc, #116]	@ (80061c0 <_free_r+0x90>)
 800614a:	6813      	ldr	r3, [r2, #0]
 800614c:	b933      	cbnz	r3, 800615c <_free_r+0x2c>
 800614e:	6063      	str	r3, [r4, #4]
 8006150:	6014      	str	r4, [r2, #0]
 8006152:	4628      	mov	r0, r5
 8006154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006158:	f000 b8dc 	b.w	8006314 <__malloc_unlock>
 800615c:	42a3      	cmp	r3, r4
 800615e:	d908      	bls.n	8006172 <_free_r+0x42>
 8006160:	6820      	ldr	r0, [r4, #0]
 8006162:	1821      	adds	r1, r4, r0
 8006164:	428b      	cmp	r3, r1
 8006166:	bf01      	itttt	eq
 8006168:	6819      	ldreq	r1, [r3, #0]
 800616a:	685b      	ldreq	r3, [r3, #4]
 800616c:	1809      	addeq	r1, r1, r0
 800616e:	6021      	streq	r1, [r4, #0]
 8006170:	e7ed      	b.n	800614e <_free_r+0x1e>
 8006172:	461a      	mov	r2, r3
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	b10b      	cbz	r3, 800617c <_free_r+0x4c>
 8006178:	42a3      	cmp	r3, r4
 800617a:	d9fa      	bls.n	8006172 <_free_r+0x42>
 800617c:	6811      	ldr	r1, [r2, #0]
 800617e:	1850      	adds	r0, r2, r1
 8006180:	42a0      	cmp	r0, r4
 8006182:	d10b      	bne.n	800619c <_free_r+0x6c>
 8006184:	6820      	ldr	r0, [r4, #0]
 8006186:	4401      	add	r1, r0
 8006188:	1850      	adds	r0, r2, r1
 800618a:	4283      	cmp	r3, r0
 800618c:	6011      	str	r1, [r2, #0]
 800618e:	d1e0      	bne.n	8006152 <_free_r+0x22>
 8006190:	6818      	ldr	r0, [r3, #0]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	6053      	str	r3, [r2, #4]
 8006196:	4408      	add	r0, r1
 8006198:	6010      	str	r0, [r2, #0]
 800619a:	e7da      	b.n	8006152 <_free_r+0x22>
 800619c:	d902      	bls.n	80061a4 <_free_r+0x74>
 800619e:	230c      	movs	r3, #12
 80061a0:	602b      	str	r3, [r5, #0]
 80061a2:	e7d6      	b.n	8006152 <_free_r+0x22>
 80061a4:	6820      	ldr	r0, [r4, #0]
 80061a6:	1821      	adds	r1, r4, r0
 80061a8:	428b      	cmp	r3, r1
 80061aa:	bf04      	itt	eq
 80061ac:	6819      	ldreq	r1, [r3, #0]
 80061ae:	685b      	ldreq	r3, [r3, #4]
 80061b0:	6063      	str	r3, [r4, #4]
 80061b2:	bf04      	itt	eq
 80061b4:	1809      	addeq	r1, r1, r0
 80061b6:	6021      	streq	r1, [r4, #0]
 80061b8:	6054      	str	r4, [r2, #4]
 80061ba:	e7ca      	b.n	8006152 <_free_r+0x22>
 80061bc:	bd38      	pop	{r3, r4, r5, pc}
 80061be:	bf00      	nop
 80061c0:	20000348 	.word	0x20000348

080061c4 <sbrk_aligned>:
 80061c4:	b570      	push	{r4, r5, r6, lr}
 80061c6:	4e0f      	ldr	r6, [pc, #60]	@ (8006204 <sbrk_aligned+0x40>)
 80061c8:	460c      	mov	r4, r1
 80061ca:	6831      	ldr	r1, [r6, #0]
 80061cc:	4605      	mov	r5, r0
 80061ce:	b911      	cbnz	r1, 80061d6 <sbrk_aligned+0x12>
 80061d0:	f000 fba6 	bl	8006920 <_sbrk_r>
 80061d4:	6030      	str	r0, [r6, #0]
 80061d6:	4621      	mov	r1, r4
 80061d8:	4628      	mov	r0, r5
 80061da:	f000 fba1 	bl	8006920 <_sbrk_r>
 80061de:	1c43      	adds	r3, r0, #1
 80061e0:	d103      	bne.n	80061ea <sbrk_aligned+0x26>
 80061e2:	f04f 34ff 	mov.w	r4, #4294967295
 80061e6:	4620      	mov	r0, r4
 80061e8:	bd70      	pop	{r4, r5, r6, pc}
 80061ea:	1cc4      	adds	r4, r0, #3
 80061ec:	f024 0403 	bic.w	r4, r4, #3
 80061f0:	42a0      	cmp	r0, r4
 80061f2:	d0f8      	beq.n	80061e6 <sbrk_aligned+0x22>
 80061f4:	1a21      	subs	r1, r4, r0
 80061f6:	4628      	mov	r0, r5
 80061f8:	f000 fb92 	bl	8006920 <_sbrk_r>
 80061fc:	3001      	adds	r0, #1
 80061fe:	d1f2      	bne.n	80061e6 <sbrk_aligned+0x22>
 8006200:	e7ef      	b.n	80061e2 <sbrk_aligned+0x1e>
 8006202:	bf00      	nop
 8006204:	20000344 	.word	0x20000344

08006208 <_malloc_r>:
 8006208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800620c:	1ccd      	adds	r5, r1, #3
 800620e:	f025 0503 	bic.w	r5, r5, #3
 8006212:	3508      	adds	r5, #8
 8006214:	2d0c      	cmp	r5, #12
 8006216:	bf38      	it	cc
 8006218:	250c      	movcc	r5, #12
 800621a:	2d00      	cmp	r5, #0
 800621c:	4606      	mov	r6, r0
 800621e:	db01      	blt.n	8006224 <_malloc_r+0x1c>
 8006220:	42a9      	cmp	r1, r5
 8006222:	d904      	bls.n	800622e <_malloc_r+0x26>
 8006224:	230c      	movs	r3, #12
 8006226:	6033      	str	r3, [r6, #0]
 8006228:	2000      	movs	r0, #0
 800622a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800622e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006304 <_malloc_r+0xfc>
 8006232:	f000 f869 	bl	8006308 <__malloc_lock>
 8006236:	f8d8 3000 	ldr.w	r3, [r8]
 800623a:	461c      	mov	r4, r3
 800623c:	bb44      	cbnz	r4, 8006290 <_malloc_r+0x88>
 800623e:	4629      	mov	r1, r5
 8006240:	4630      	mov	r0, r6
 8006242:	f7ff ffbf 	bl	80061c4 <sbrk_aligned>
 8006246:	1c43      	adds	r3, r0, #1
 8006248:	4604      	mov	r4, r0
 800624a:	d158      	bne.n	80062fe <_malloc_r+0xf6>
 800624c:	f8d8 4000 	ldr.w	r4, [r8]
 8006250:	4627      	mov	r7, r4
 8006252:	2f00      	cmp	r7, #0
 8006254:	d143      	bne.n	80062de <_malloc_r+0xd6>
 8006256:	2c00      	cmp	r4, #0
 8006258:	d04b      	beq.n	80062f2 <_malloc_r+0xea>
 800625a:	6823      	ldr	r3, [r4, #0]
 800625c:	4639      	mov	r1, r7
 800625e:	4630      	mov	r0, r6
 8006260:	eb04 0903 	add.w	r9, r4, r3
 8006264:	f000 fb5c 	bl	8006920 <_sbrk_r>
 8006268:	4581      	cmp	r9, r0
 800626a:	d142      	bne.n	80062f2 <_malloc_r+0xea>
 800626c:	6821      	ldr	r1, [r4, #0]
 800626e:	1a6d      	subs	r5, r5, r1
 8006270:	4629      	mov	r1, r5
 8006272:	4630      	mov	r0, r6
 8006274:	f7ff ffa6 	bl	80061c4 <sbrk_aligned>
 8006278:	3001      	adds	r0, #1
 800627a:	d03a      	beq.n	80062f2 <_malloc_r+0xea>
 800627c:	6823      	ldr	r3, [r4, #0]
 800627e:	442b      	add	r3, r5
 8006280:	6023      	str	r3, [r4, #0]
 8006282:	f8d8 3000 	ldr.w	r3, [r8]
 8006286:	685a      	ldr	r2, [r3, #4]
 8006288:	bb62      	cbnz	r2, 80062e4 <_malloc_r+0xdc>
 800628a:	f8c8 7000 	str.w	r7, [r8]
 800628e:	e00f      	b.n	80062b0 <_malloc_r+0xa8>
 8006290:	6822      	ldr	r2, [r4, #0]
 8006292:	1b52      	subs	r2, r2, r5
 8006294:	d420      	bmi.n	80062d8 <_malloc_r+0xd0>
 8006296:	2a0b      	cmp	r2, #11
 8006298:	d917      	bls.n	80062ca <_malloc_r+0xc2>
 800629a:	1961      	adds	r1, r4, r5
 800629c:	42a3      	cmp	r3, r4
 800629e:	6025      	str	r5, [r4, #0]
 80062a0:	bf18      	it	ne
 80062a2:	6059      	strne	r1, [r3, #4]
 80062a4:	6863      	ldr	r3, [r4, #4]
 80062a6:	bf08      	it	eq
 80062a8:	f8c8 1000 	streq.w	r1, [r8]
 80062ac:	5162      	str	r2, [r4, r5]
 80062ae:	604b      	str	r3, [r1, #4]
 80062b0:	4630      	mov	r0, r6
 80062b2:	f000 f82f 	bl	8006314 <__malloc_unlock>
 80062b6:	f104 000b 	add.w	r0, r4, #11
 80062ba:	1d23      	adds	r3, r4, #4
 80062bc:	f020 0007 	bic.w	r0, r0, #7
 80062c0:	1ac2      	subs	r2, r0, r3
 80062c2:	bf1c      	itt	ne
 80062c4:	1a1b      	subne	r3, r3, r0
 80062c6:	50a3      	strne	r3, [r4, r2]
 80062c8:	e7af      	b.n	800622a <_malloc_r+0x22>
 80062ca:	6862      	ldr	r2, [r4, #4]
 80062cc:	42a3      	cmp	r3, r4
 80062ce:	bf0c      	ite	eq
 80062d0:	f8c8 2000 	streq.w	r2, [r8]
 80062d4:	605a      	strne	r2, [r3, #4]
 80062d6:	e7eb      	b.n	80062b0 <_malloc_r+0xa8>
 80062d8:	4623      	mov	r3, r4
 80062da:	6864      	ldr	r4, [r4, #4]
 80062dc:	e7ae      	b.n	800623c <_malloc_r+0x34>
 80062de:	463c      	mov	r4, r7
 80062e0:	687f      	ldr	r7, [r7, #4]
 80062e2:	e7b6      	b.n	8006252 <_malloc_r+0x4a>
 80062e4:	461a      	mov	r2, r3
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	42a3      	cmp	r3, r4
 80062ea:	d1fb      	bne.n	80062e4 <_malloc_r+0xdc>
 80062ec:	2300      	movs	r3, #0
 80062ee:	6053      	str	r3, [r2, #4]
 80062f0:	e7de      	b.n	80062b0 <_malloc_r+0xa8>
 80062f2:	230c      	movs	r3, #12
 80062f4:	6033      	str	r3, [r6, #0]
 80062f6:	4630      	mov	r0, r6
 80062f8:	f000 f80c 	bl	8006314 <__malloc_unlock>
 80062fc:	e794      	b.n	8006228 <_malloc_r+0x20>
 80062fe:	6005      	str	r5, [r0, #0]
 8006300:	e7d6      	b.n	80062b0 <_malloc_r+0xa8>
 8006302:	bf00      	nop
 8006304:	20000348 	.word	0x20000348

08006308 <__malloc_lock>:
 8006308:	4801      	ldr	r0, [pc, #4]	@ (8006310 <__malloc_lock+0x8>)
 800630a:	f7ff bf0f 	b.w	800612c <__retarget_lock_acquire_recursive>
 800630e:	bf00      	nop
 8006310:	20000340 	.word	0x20000340

08006314 <__malloc_unlock>:
 8006314:	4801      	ldr	r0, [pc, #4]	@ (800631c <__malloc_unlock+0x8>)
 8006316:	f7ff bf0a 	b.w	800612e <__retarget_lock_release_recursive>
 800631a:	bf00      	nop
 800631c:	20000340 	.word	0x20000340

08006320 <__ssputs_r>:
 8006320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006324:	688e      	ldr	r6, [r1, #8]
 8006326:	461f      	mov	r7, r3
 8006328:	42be      	cmp	r6, r7
 800632a:	680b      	ldr	r3, [r1, #0]
 800632c:	4682      	mov	sl, r0
 800632e:	460c      	mov	r4, r1
 8006330:	4690      	mov	r8, r2
 8006332:	d82d      	bhi.n	8006390 <__ssputs_r+0x70>
 8006334:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006338:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800633c:	d026      	beq.n	800638c <__ssputs_r+0x6c>
 800633e:	6965      	ldr	r5, [r4, #20]
 8006340:	6909      	ldr	r1, [r1, #16]
 8006342:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006346:	eba3 0901 	sub.w	r9, r3, r1
 800634a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800634e:	1c7b      	adds	r3, r7, #1
 8006350:	444b      	add	r3, r9
 8006352:	106d      	asrs	r5, r5, #1
 8006354:	429d      	cmp	r5, r3
 8006356:	bf38      	it	cc
 8006358:	461d      	movcc	r5, r3
 800635a:	0553      	lsls	r3, r2, #21
 800635c:	d527      	bpl.n	80063ae <__ssputs_r+0x8e>
 800635e:	4629      	mov	r1, r5
 8006360:	f7ff ff52 	bl	8006208 <_malloc_r>
 8006364:	4606      	mov	r6, r0
 8006366:	b360      	cbz	r0, 80063c2 <__ssputs_r+0xa2>
 8006368:	6921      	ldr	r1, [r4, #16]
 800636a:	464a      	mov	r2, r9
 800636c:	f000 fae8 	bl	8006940 <memcpy>
 8006370:	89a3      	ldrh	r3, [r4, #12]
 8006372:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006376:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800637a:	81a3      	strh	r3, [r4, #12]
 800637c:	6126      	str	r6, [r4, #16]
 800637e:	6165      	str	r5, [r4, #20]
 8006380:	444e      	add	r6, r9
 8006382:	eba5 0509 	sub.w	r5, r5, r9
 8006386:	6026      	str	r6, [r4, #0]
 8006388:	60a5      	str	r5, [r4, #8]
 800638a:	463e      	mov	r6, r7
 800638c:	42be      	cmp	r6, r7
 800638e:	d900      	bls.n	8006392 <__ssputs_r+0x72>
 8006390:	463e      	mov	r6, r7
 8006392:	6820      	ldr	r0, [r4, #0]
 8006394:	4632      	mov	r2, r6
 8006396:	4641      	mov	r1, r8
 8006398:	f000 faa8 	bl	80068ec <memmove>
 800639c:	68a3      	ldr	r3, [r4, #8]
 800639e:	1b9b      	subs	r3, r3, r6
 80063a0:	60a3      	str	r3, [r4, #8]
 80063a2:	6823      	ldr	r3, [r4, #0]
 80063a4:	4433      	add	r3, r6
 80063a6:	6023      	str	r3, [r4, #0]
 80063a8:	2000      	movs	r0, #0
 80063aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063ae:	462a      	mov	r2, r5
 80063b0:	f000 fad4 	bl	800695c <_realloc_r>
 80063b4:	4606      	mov	r6, r0
 80063b6:	2800      	cmp	r0, #0
 80063b8:	d1e0      	bne.n	800637c <__ssputs_r+0x5c>
 80063ba:	6921      	ldr	r1, [r4, #16]
 80063bc:	4650      	mov	r0, sl
 80063be:	f7ff feb7 	bl	8006130 <_free_r>
 80063c2:	230c      	movs	r3, #12
 80063c4:	f8ca 3000 	str.w	r3, [sl]
 80063c8:	89a3      	ldrh	r3, [r4, #12]
 80063ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063ce:	81a3      	strh	r3, [r4, #12]
 80063d0:	f04f 30ff 	mov.w	r0, #4294967295
 80063d4:	e7e9      	b.n	80063aa <__ssputs_r+0x8a>
	...

080063d8 <_svfiprintf_r>:
 80063d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063dc:	4698      	mov	r8, r3
 80063de:	898b      	ldrh	r3, [r1, #12]
 80063e0:	061b      	lsls	r3, r3, #24
 80063e2:	b09d      	sub	sp, #116	@ 0x74
 80063e4:	4607      	mov	r7, r0
 80063e6:	460d      	mov	r5, r1
 80063e8:	4614      	mov	r4, r2
 80063ea:	d510      	bpl.n	800640e <_svfiprintf_r+0x36>
 80063ec:	690b      	ldr	r3, [r1, #16]
 80063ee:	b973      	cbnz	r3, 800640e <_svfiprintf_r+0x36>
 80063f0:	2140      	movs	r1, #64	@ 0x40
 80063f2:	f7ff ff09 	bl	8006208 <_malloc_r>
 80063f6:	6028      	str	r0, [r5, #0]
 80063f8:	6128      	str	r0, [r5, #16]
 80063fa:	b930      	cbnz	r0, 800640a <_svfiprintf_r+0x32>
 80063fc:	230c      	movs	r3, #12
 80063fe:	603b      	str	r3, [r7, #0]
 8006400:	f04f 30ff 	mov.w	r0, #4294967295
 8006404:	b01d      	add	sp, #116	@ 0x74
 8006406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800640a:	2340      	movs	r3, #64	@ 0x40
 800640c:	616b      	str	r3, [r5, #20]
 800640e:	2300      	movs	r3, #0
 8006410:	9309      	str	r3, [sp, #36]	@ 0x24
 8006412:	2320      	movs	r3, #32
 8006414:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006418:	f8cd 800c 	str.w	r8, [sp, #12]
 800641c:	2330      	movs	r3, #48	@ 0x30
 800641e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80065bc <_svfiprintf_r+0x1e4>
 8006422:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006426:	f04f 0901 	mov.w	r9, #1
 800642a:	4623      	mov	r3, r4
 800642c:	469a      	mov	sl, r3
 800642e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006432:	b10a      	cbz	r2, 8006438 <_svfiprintf_r+0x60>
 8006434:	2a25      	cmp	r2, #37	@ 0x25
 8006436:	d1f9      	bne.n	800642c <_svfiprintf_r+0x54>
 8006438:	ebba 0b04 	subs.w	fp, sl, r4
 800643c:	d00b      	beq.n	8006456 <_svfiprintf_r+0x7e>
 800643e:	465b      	mov	r3, fp
 8006440:	4622      	mov	r2, r4
 8006442:	4629      	mov	r1, r5
 8006444:	4638      	mov	r0, r7
 8006446:	f7ff ff6b 	bl	8006320 <__ssputs_r>
 800644a:	3001      	adds	r0, #1
 800644c:	f000 80a7 	beq.w	800659e <_svfiprintf_r+0x1c6>
 8006450:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006452:	445a      	add	r2, fp
 8006454:	9209      	str	r2, [sp, #36]	@ 0x24
 8006456:	f89a 3000 	ldrb.w	r3, [sl]
 800645a:	2b00      	cmp	r3, #0
 800645c:	f000 809f 	beq.w	800659e <_svfiprintf_r+0x1c6>
 8006460:	2300      	movs	r3, #0
 8006462:	f04f 32ff 	mov.w	r2, #4294967295
 8006466:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800646a:	f10a 0a01 	add.w	sl, sl, #1
 800646e:	9304      	str	r3, [sp, #16]
 8006470:	9307      	str	r3, [sp, #28]
 8006472:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006476:	931a      	str	r3, [sp, #104]	@ 0x68
 8006478:	4654      	mov	r4, sl
 800647a:	2205      	movs	r2, #5
 800647c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006480:	484e      	ldr	r0, [pc, #312]	@ (80065bc <_svfiprintf_r+0x1e4>)
 8006482:	f7f9 feb5 	bl	80001f0 <memchr>
 8006486:	9a04      	ldr	r2, [sp, #16]
 8006488:	b9d8      	cbnz	r0, 80064c2 <_svfiprintf_r+0xea>
 800648a:	06d0      	lsls	r0, r2, #27
 800648c:	bf44      	itt	mi
 800648e:	2320      	movmi	r3, #32
 8006490:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006494:	0711      	lsls	r1, r2, #28
 8006496:	bf44      	itt	mi
 8006498:	232b      	movmi	r3, #43	@ 0x2b
 800649a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800649e:	f89a 3000 	ldrb.w	r3, [sl]
 80064a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80064a4:	d015      	beq.n	80064d2 <_svfiprintf_r+0xfa>
 80064a6:	9a07      	ldr	r2, [sp, #28]
 80064a8:	4654      	mov	r4, sl
 80064aa:	2000      	movs	r0, #0
 80064ac:	f04f 0c0a 	mov.w	ip, #10
 80064b0:	4621      	mov	r1, r4
 80064b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064b6:	3b30      	subs	r3, #48	@ 0x30
 80064b8:	2b09      	cmp	r3, #9
 80064ba:	d94b      	bls.n	8006554 <_svfiprintf_r+0x17c>
 80064bc:	b1b0      	cbz	r0, 80064ec <_svfiprintf_r+0x114>
 80064be:	9207      	str	r2, [sp, #28]
 80064c0:	e014      	b.n	80064ec <_svfiprintf_r+0x114>
 80064c2:	eba0 0308 	sub.w	r3, r0, r8
 80064c6:	fa09 f303 	lsl.w	r3, r9, r3
 80064ca:	4313      	orrs	r3, r2
 80064cc:	9304      	str	r3, [sp, #16]
 80064ce:	46a2      	mov	sl, r4
 80064d0:	e7d2      	b.n	8006478 <_svfiprintf_r+0xa0>
 80064d2:	9b03      	ldr	r3, [sp, #12]
 80064d4:	1d19      	adds	r1, r3, #4
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	9103      	str	r1, [sp, #12]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	bfbb      	ittet	lt
 80064de:	425b      	neglt	r3, r3
 80064e0:	f042 0202 	orrlt.w	r2, r2, #2
 80064e4:	9307      	strge	r3, [sp, #28]
 80064e6:	9307      	strlt	r3, [sp, #28]
 80064e8:	bfb8      	it	lt
 80064ea:	9204      	strlt	r2, [sp, #16]
 80064ec:	7823      	ldrb	r3, [r4, #0]
 80064ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80064f0:	d10a      	bne.n	8006508 <_svfiprintf_r+0x130>
 80064f2:	7863      	ldrb	r3, [r4, #1]
 80064f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80064f6:	d132      	bne.n	800655e <_svfiprintf_r+0x186>
 80064f8:	9b03      	ldr	r3, [sp, #12]
 80064fa:	1d1a      	adds	r2, r3, #4
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	9203      	str	r2, [sp, #12]
 8006500:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006504:	3402      	adds	r4, #2
 8006506:	9305      	str	r3, [sp, #20]
 8006508:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80065cc <_svfiprintf_r+0x1f4>
 800650c:	7821      	ldrb	r1, [r4, #0]
 800650e:	2203      	movs	r2, #3
 8006510:	4650      	mov	r0, sl
 8006512:	f7f9 fe6d 	bl	80001f0 <memchr>
 8006516:	b138      	cbz	r0, 8006528 <_svfiprintf_r+0x150>
 8006518:	9b04      	ldr	r3, [sp, #16]
 800651a:	eba0 000a 	sub.w	r0, r0, sl
 800651e:	2240      	movs	r2, #64	@ 0x40
 8006520:	4082      	lsls	r2, r0
 8006522:	4313      	orrs	r3, r2
 8006524:	3401      	adds	r4, #1
 8006526:	9304      	str	r3, [sp, #16]
 8006528:	f814 1b01 	ldrb.w	r1, [r4], #1
 800652c:	4824      	ldr	r0, [pc, #144]	@ (80065c0 <_svfiprintf_r+0x1e8>)
 800652e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006532:	2206      	movs	r2, #6
 8006534:	f7f9 fe5c 	bl	80001f0 <memchr>
 8006538:	2800      	cmp	r0, #0
 800653a:	d036      	beq.n	80065aa <_svfiprintf_r+0x1d2>
 800653c:	4b21      	ldr	r3, [pc, #132]	@ (80065c4 <_svfiprintf_r+0x1ec>)
 800653e:	bb1b      	cbnz	r3, 8006588 <_svfiprintf_r+0x1b0>
 8006540:	9b03      	ldr	r3, [sp, #12]
 8006542:	3307      	adds	r3, #7
 8006544:	f023 0307 	bic.w	r3, r3, #7
 8006548:	3308      	adds	r3, #8
 800654a:	9303      	str	r3, [sp, #12]
 800654c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800654e:	4433      	add	r3, r6
 8006550:	9309      	str	r3, [sp, #36]	@ 0x24
 8006552:	e76a      	b.n	800642a <_svfiprintf_r+0x52>
 8006554:	fb0c 3202 	mla	r2, ip, r2, r3
 8006558:	460c      	mov	r4, r1
 800655a:	2001      	movs	r0, #1
 800655c:	e7a8      	b.n	80064b0 <_svfiprintf_r+0xd8>
 800655e:	2300      	movs	r3, #0
 8006560:	3401      	adds	r4, #1
 8006562:	9305      	str	r3, [sp, #20]
 8006564:	4619      	mov	r1, r3
 8006566:	f04f 0c0a 	mov.w	ip, #10
 800656a:	4620      	mov	r0, r4
 800656c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006570:	3a30      	subs	r2, #48	@ 0x30
 8006572:	2a09      	cmp	r2, #9
 8006574:	d903      	bls.n	800657e <_svfiprintf_r+0x1a6>
 8006576:	2b00      	cmp	r3, #0
 8006578:	d0c6      	beq.n	8006508 <_svfiprintf_r+0x130>
 800657a:	9105      	str	r1, [sp, #20]
 800657c:	e7c4      	b.n	8006508 <_svfiprintf_r+0x130>
 800657e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006582:	4604      	mov	r4, r0
 8006584:	2301      	movs	r3, #1
 8006586:	e7f0      	b.n	800656a <_svfiprintf_r+0x192>
 8006588:	ab03      	add	r3, sp, #12
 800658a:	9300      	str	r3, [sp, #0]
 800658c:	462a      	mov	r2, r5
 800658e:	4b0e      	ldr	r3, [pc, #56]	@ (80065c8 <_svfiprintf_r+0x1f0>)
 8006590:	a904      	add	r1, sp, #16
 8006592:	4638      	mov	r0, r7
 8006594:	f3af 8000 	nop.w
 8006598:	1c42      	adds	r2, r0, #1
 800659a:	4606      	mov	r6, r0
 800659c:	d1d6      	bne.n	800654c <_svfiprintf_r+0x174>
 800659e:	89ab      	ldrh	r3, [r5, #12]
 80065a0:	065b      	lsls	r3, r3, #25
 80065a2:	f53f af2d 	bmi.w	8006400 <_svfiprintf_r+0x28>
 80065a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80065a8:	e72c      	b.n	8006404 <_svfiprintf_r+0x2c>
 80065aa:	ab03      	add	r3, sp, #12
 80065ac:	9300      	str	r3, [sp, #0]
 80065ae:	462a      	mov	r2, r5
 80065b0:	4b05      	ldr	r3, [pc, #20]	@ (80065c8 <_svfiprintf_r+0x1f0>)
 80065b2:	a904      	add	r1, sp, #16
 80065b4:	4638      	mov	r0, r7
 80065b6:	f000 f879 	bl	80066ac <_printf_i>
 80065ba:	e7ed      	b.n	8006598 <_svfiprintf_r+0x1c0>
 80065bc:	08006a30 	.word	0x08006a30
 80065c0:	08006a3a 	.word	0x08006a3a
 80065c4:	00000000 	.word	0x00000000
 80065c8:	08006321 	.word	0x08006321
 80065cc:	08006a36 	.word	0x08006a36

080065d0 <_printf_common>:
 80065d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065d4:	4616      	mov	r6, r2
 80065d6:	4698      	mov	r8, r3
 80065d8:	688a      	ldr	r2, [r1, #8]
 80065da:	690b      	ldr	r3, [r1, #16]
 80065dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80065e0:	4293      	cmp	r3, r2
 80065e2:	bfb8      	it	lt
 80065e4:	4613      	movlt	r3, r2
 80065e6:	6033      	str	r3, [r6, #0]
 80065e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80065ec:	4607      	mov	r7, r0
 80065ee:	460c      	mov	r4, r1
 80065f0:	b10a      	cbz	r2, 80065f6 <_printf_common+0x26>
 80065f2:	3301      	adds	r3, #1
 80065f4:	6033      	str	r3, [r6, #0]
 80065f6:	6823      	ldr	r3, [r4, #0]
 80065f8:	0699      	lsls	r1, r3, #26
 80065fa:	bf42      	ittt	mi
 80065fc:	6833      	ldrmi	r3, [r6, #0]
 80065fe:	3302      	addmi	r3, #2
 8006600:	6033      	strmi	r3, [r6, #0]
 8006602:	6825      	ldr	r5, [r4, #0]
 8006604:	f015 0506 	ands.w	r5, r5, #6
 8006608:	d106      	bne.n	8006618 <_printf_common+0x48>
 800660a:	f104 0a19 	add.w	sl, r4, #25
 800660e:	68e3      	ldr	r3, [r4, #12]
 8006610:	6832      	ldr	r2, [r6, #0]
 8006612:	1a9b      	subs	r3, r3, r2
 8006614:	42ab      	cmp	r3, r5
 8006616:	dc26      	bgt.n	8006666 <_printf_common+0x96>
 8006618:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800661c:	6822      	ldr	r2, [r4, #0]
 800661e:	3b00      	subs	r3, #0
 8006620:	bf18      	it	ne
 8006622:	2301      	movne	r3, #1
 8006624:	0692      	lsls	r2, r2, #26
 8006626:	d42b      	bmi.n	8006680 <_printf_common+0xb0>
 8006628:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800662c:	4641      	mov	r1, r8
 800662e:	4638      	mov	r0, r7
 8006630:	47c8      	blx	r9
 8006632:	3001      	adds	r0, #1
 8006634:	d01e      	beq.n	8006674 <_printf_common+0xa4>
 8006636:	6823      	ldr	r3, [r4, #0]
 8006638:	6922      	ldr	r2, [r4, #16]
 800663a:	f003 0306 	and.w	r3, r3, #6
 800663e:	2b04      	cmp	r3, #4
 8006640:	bf02      	ittt	eq
 8006642:	68e5      	ldreq	r5, [r4, #12]
 8006644:	6833      	ldreq	r3, [r6, #0]
 8006646:	1aed      	subeq	r5, r5, r3
 8006648:	68a3      	ldr	r3, [r4, #8]
 800664a:	bf0c      	ite	eq
 800664c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006650:	2500      	movne	r5, #0
 8006652:	4293      	cmp	r3, r2
 8006654:	bfc4      	itt	gt
 8006656:	1a9b      	subgt	r3, r3, r2
 8006658:	18ed      	addgt	r5, r5, r3
 800665a:	2600      	movs	r6, #0
 800665c:	341a      	adds	r4, #26
 800665e:	42b5      	cmp	r5, r6
 8006660:	d11a      	bne.n	8006698 <_printf_common+0xc8>
 8006662:	2000      	movs	r0, #0
 8006664:	e008      	b.n	8006678 <_printf_common+0xa8>
 8006666:	2301      	movs	r3, #1
 8006668:	4652      	mov	r2, sl
 800666a:	4641      	mov	r1, r8
 800666c:	4638      	mov	r0, r7
 800666e:	47c8      	blx	r9
 8006670:	3001      	adds	r0, #1
 8006672:	d103      	bne.n	800667c <_printf_common+0xac>
 8006674:	f04f 30ff 	mov.w	r0, #4294967295
 8006678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800667c:	3501      	adds	r5, #1
 800667e:	e7c6      	b.n	800660e <_printf_common+0x3e>
 8006680:	18e1      	adds	r1, r4, r3
 8006682:	1c5a      	adds	r2, r3, #1
 8006684:	2030      	movs	r0, #48	@ 0x30
 8006686:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800668a:	4422      	add	r2, r4
 800668c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006690:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006694:	3302      	adds	r3, #2
 8006696:	e7c7      	b.n	8006628 <_printf_common+0x58>
 8006698:	2301      	movs	r3, #1
 800669a:	4622      	mov	r2, r4
 800669c:	4641      	mov	r1, r8
 800669e:	4638      	mov	r0, r7
 80066a0:	47c8      	blx	r9
 80066a2:	3001      	adds	r0, #1
 80066a4:	d0e6      	beq.n	8006674 <_printf_common+0xa4>
 80066a6:	3601      	adds	r6, #1
 80066a8:	e7d9      	b.n	800665e <_printf_common+0x8e>
	...

080066ac <_printf_i>:
 80066ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066b0:	7e0f      	ldrb	r7, [r1, #24]
 80066b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80066b4:	2f78      	cmp	r7, #120	@ 0x78
 80066b6:	4691      	mov	r9, r2
 80066b8:	4680      	mov	r8, r0
 80066ba:	460c      	mov	r4, r1
 80066bc:	469a      	mov	sl, r3
 80066be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80066c2:	d807      	bhi.n	80066d4 <_printf_i+0x28>
 80066c4:	2f62      	cmp	r7, #98	@ 0x62
 80066c6:	d80a      	bhi.n	80066de <_printf_i+0x32>
 80066c8:	2f00      	cmp	r7, #0
 80066ca:	f000 80d2 	beq.w	8006872 <_printf_i+0x1c6>
 80066ce:	2f58      	cmp	r7, #88	@ 0x58
 80066d0:	f000 80b9 	beq.w	8006846 <_printf_i+0x19a>
 80066d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80066d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80066dc:	e03a      	b.n	8006754 <_printf_i+0xa8>
 80066de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80066e2:	2b15      	cmp	r3, #21
 80066e4:	d8f6      	bhi.n	80066d4 <_printf_i+0x28>
 80066e6:	a101      	add	r1, pc, #4	@ (adr r1, 80066ec <_printf_i+0x40>)
 80066e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80066ec:	08006745 	.word	0x08006745
 80066f0:	08006759 	.word	0x08006759
 80066f4:	080066d5 	.word	0x080066d5
 80066f8:	080066d5 	.word	0x080066d5
 80066fc:	080066d5 	.word	0x080066d5
 8006700:	080066d5 	.word	0x080066d5
 8006704:	08006759 	.word	0x08006759
 8006708:	080066d5 	.word	0x080066d5
 800670c:	080066d5 	.word	0x080066d5
 8006710:	080066d5 	.word	0x080066d5
 8006714:	080066d5 	.word	0x080066d5
 8006718:	08006859 	.word	0x08006859
 800671c:	08006783 	.word	0x08006783
 8006720:	08006813 	.word	0x08006813
 8006724:	080066d5 	.word	0x080066d5
 8006728:	080066d5 	.word	0x080066d5
 800672c:	0800687b 	.word	0x0800687b
 8006730:	080066d5 	.word	0x080066d5
 8006734:	08006783 	.word	0x08006783
 8006738:	080066d5 	.word	0x080066d5
 800673c:	080066d5 	.word	0x080066d5
 8006740:	0800681b 	.word	0x0800681b
 8006744:	6833      	ldr	r3, [r6, #0]
 8006746:	1d1a      	adds	r2, r3, #4
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	6032      	str	r2, [r6, #0]
 800674c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006750:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006754:	2301      	movs	r3, #1
 8006756:	e09d      	b.n	8006894 <_printf_i+0x1e8>
 8006758:	6833      	ldr	r3, [r6, #0]
 800675a:	6820      	ldr	r0, [r4, #0]
 800675c:	1d19      	adds	r1, r3, #4
 800675e:	6031      	str	r1, [r6, #0]
 8006760:	0606      	lsls	r6, r0, #24
 8006762:	d501      	bpl.n	8006768 <_printf_i+0xbc>
 8006764:	681d      	ldr	r5, [r3, #0]
 8006766:	e003      	b.n	8006770 <_printf_i+0xc4>
 8006768:	0645      	lsls	r5, r0, #25
 800676a:	d5fb      	bpl.n	8006764 <_printf_i+0xb8>
 800676c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006770:	2d00      	cmp	r5, #0
 8006772:	da03      	bge.n	800677c <_printf_i+0xd0>
 8006774:	232d      	movs	r3, #45	@ 0x2d
 8006776:	426d      	negs	r5, r5
 8006778:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800677c:	4859      	ldr	r0, [pc, #356]	@ (80068e4 <_printf_i+0x238>)
 800677e:	230a      	movs	r3, #10
 8006780:	e011      	b.n	80067a6 <_printf_i+0xfa>
 8006782:	6821      	ldr	r1, [r4, #0]
 8006784:	6833      	ldr	r3, [r6, #0]
 8006786:	0608      	lsls	r0, r1, #24
 8006788:	f853 5b04 	ldr.w	r5, [r3], #4
 800678c:	d402      	bmi.n	8006794 <_printf_i+0xe8>
 800678e:	0649      	lsls	r1, r1, #25
 8006790:	bf48      	it	mi
 8006792:	b2ad      	uxthmi	r5, r5
 8006794:	2f6f      	cmp	r7, #111	@ 0x6f
 8006796:	4853      	ldr	r0, [pc, #332]	@ (80068e4 <_printf_i+0x238>)
 8006798:	6033      	str	r3, [r6, #0]
 800679a:	bf14      	ite	ne
 800679c:	230a      	movne	r3, #10
 800679e:	2308      	moveq	r3, #8
 80067a0:	2100      	movs	r1, #0
 80067a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80067a6:	6866      	ldr	r6, [r4, #4]
 80067a8:	60a6      	str	r6, [r4, #8]
 80067aa:	2e00      	cmp	r6, #0
 80067ac:	bfa2      	ittt	ge
 80067ae:	6821      	ldrge	r1, [r4, #0]
 80067b0:	f021 0104 	bicge.w	r1, r1, #4
 80067b4:	6021      	strge	r1, [r4, #0]
 80067b6:	b90d      	cbnz	r5, 80067bc <_printf_i+0x110>
 80067b8:	2e00      	cmp	r6, #0
 80067ba:	d04b      	beq.n	8006854 <_printf_i+0x1a8>
 80067bc:	4616      	mov	r6, r2
 80067be:	fbb5 f1f3 	udiv	r1, r5, r3
 80067c2:	fb03 5711 	mls	r7, r3, r1, r5
 80067c6:	5dc7      	ldrb	r7, [r0, r7]
 80067c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80067cc:	462f      	mov	r7, r5
 80067ce:	42bb      	cmp	r3, r7
 80067d0:	460d      	mov	r5, r1
 80067d2:	d9f4      	bls.n	80067be <_printf_i+0x112>
 80067d4:	2b08      	cmp	r3, #8
 80067d6:	d10b      	bne.n	80067f0 <_printf_i+0x144>
 80067d8:	6823      	ldr	r3, [r4, #0]
 80067da:	07df      	lsls	r7, r3, #31
 80067dc:	d508      	bpl.n	80067f0 <_printf_i+0x144>
 80067de:	6923      	ldr	r3, [r4, #16]
 80067e0:	6861      	ldr	r1, [r4, #4]
 80067e2:	4299      	cmp	r1, r3
 80067e4:	bfde      	ittt	le
 80067e6:	2330      	movle	r3, #48	@ 0x30
 80067e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80067ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80067f0:	1b92      	subs	r2, r2, r6
 80067f2:	6122      	str	r2, [r4, #16]
 80067f4:	f8cd a000 	str.w	sl, [sp]
 80067f8:	464b      	mov	r3, r9
 80067fa:	aa03      	add	r2, sp, #12
 80067fc:	4621      	mov	r1, r4
 80067fe:	4640      	mov	r0, r8
 8006800:	f7ff fee6 	bl	80065d0 <_printf_common>
 8006804:	3001      	adds	r0, #1
 8006806:	d14a      	bne.n	800689e <_printf_i+0x1f2>
 8006808:	f04f 30ff 	mov.w	r0, #4294967295
 800680c:	b004      	add	sp, #16
 800680e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006812:	6823      	ldr	r3, [r4, #0]
 8006814:	f043 0320 	orr.w	r3, r3, #32
 8006818:	6023      	str	r3, [r4, #0]
 800681a:	4833      	ldr	r0, [pc, #204]	@ (80068e8 <_printf_i+0x23c>)
 800681c:	2778      	movs	r7, #120	@ 0x78
 800681e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006822:	6823      	ldr	r3, [r4, #0]
 8006824:	6831      	ldr	r1, [r6, #0]
 8006826:	061f      	lsls	r7, r3, #24
 8006828:	f851 5b04 	ldr.w	r5, [r1], #4
 800682c:	d402      	bmi.n	8006834 <_printf_i+0x188>
 800682e:	065f      	lsls	r7, r3, #25
 8006830:	bf48      	it	mi
 8006832:	b2ad      	uxthmi	r5, r5
 8006834:	6031      	str	r1, [r6, #0]
 8006836:	07d9      	lsls	r1, r3, #31
 8006838:	bf44      	itt	mi
 800683a:	f043 0320 	orrmi.w	r3, r3, #32
 800683e:	6023      	strmi	r3, [r4, #0]
 8006840:	b11d      	cbz	r5, 800684a <_printf_i+0x19e>
 8006842:	2310      	movs	r3, #16
 8006844:	e7ac      	b.n	80067a0 <_printf_i+0xf4>
 8006846:	4827      	ldr	r0, [pc, #156]	@ (80068e4 <_printf_i+0x238>)
 8006848:	e7e9      	b.n	800681e <_printf_i+0x172>
 800684a:	6823      	ldr	r3, [r4, #0]
 800684c:	f023 0320 	bic.w	r3, r3, #32
 8006850:	6023      	str	r3, [r4, #0]
 8006852:	e7f6      	b.n	8006842 <_printf_i+0x196>
 8006854:	4616      	mov	r6, r2
 8006856:	e7bd      	b.n	80067d4 <_printf_i+0x128>
 8006858:	6833      	ldr	r3, [r6, #0]
 800685a:	6825      	ldr	r5, [r4, #0]
 800685c:	6961      	ldr	r1, [r4, #20]
 800685e:	1d18      	adds	r0, r3, #4
 8006860:	6030      	str	r0, [r6, #0]
 8006862:	062e      	lsls	r6, r5, #24
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	d501      	bpl.n	800686c <_printf_i+0x1c0>
 8006868:	6019      	str	r1, [r3, #0]
 800686a:	e002      	b.n	8006872 <_printf_i+0x1c6>
 800686c:	0668      	lsls	r0, r5, #25
 800686e:	d5fb      	bpl.n	8006868 <_printf_i+0x1bc>
 8006870:	8019      	strh	r1, [r3, #0]
 8006872:	2300      	movs	r3, #0
 8006874:	6123      	str	r3, [r4, #16]
 8006876:	4616      	mov	r6, r2
 8006878:	e7bc      	b.n	80067f4 <_printf_i+0x148>
 800687a:	6833      	ldr	r3, [r6, #0]
 800687c:	1d1a      	adds	r2, r3, #4
 800687e:	6032      	str	r2, [r6, #0]
 8006880:	681e      	ldr	r6, [r3, #0]
 8006882:	6862      	ldr	r2, [r4, #4]
 8006884:	2100      	movs	r1, #0
 8006886:	4630      	mov	r0, r6
 8006888:	f7f9 fcb2 	bl	80001f0 <memchr>
 800688c:	b108      	cbz	r0, 8006892 <_printf_i+0x1e6>
 800688e:	1b80      	subs	r0, r0, r6
 8006890:	6060      	str	r0, [r4, #4]
 8006892:	6863      	ldr	r3, [r4, #4]
 8006894:	6123      	str	r3, [r4, #16]
 8006896:	2300      	movs	r3, #0
 8006898:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800689c:	e7aa      	b.n	80067f4 <_printf_i+0x148>
 800689e:	6923      	ldr	r3, [r4, #16]
 80068a0:	4632      	mov	r2, r6
 80068a2:	4649      	mov	r1, r9
 80068a4:	4640      	mov	r0, r8
 80068a6:	47d0      	blx	sl
 80068a8:	3001      	adds	r0, #1
 80068aa:	d0ad      	beq.n	8006808 <_printf_i+0x15c>
 80068ac:	6823      	ldr	r3, [r4, #0]
 80068ae:	079b      	lsls	r3, r3, #30
 80068b0:	d413      	bmi.n	80068da <_printf_i+0x22e>
 80068b2:	68e0      	ldr	r0, [r4, #12]
 80068b4:	9b03      	ldr	r3, [sp, #12]
 80068b6:	4298      	cmp	r0, r3
 80068b8:	bfb8      	it	lt
 80068ba:	4618      	movlt	r0, r3
 80068bc:	e7a6      	b.n	800680c <_printf_i+0x160>
 80068be:	2301      	movs	r3, #1
 80068c0:	4632      	mov	r2, r6
 80068c2:	4649      	mov	r1, r9
 80068c4:	4640      	mov	r0, r8
 80068c6:	47d0      	blx	sl
 80068c8:	3001      	adds	r0, #1
 80068ca:	d09d      	beq.n	8006808 <_printf_i+0x15c>
 80068cc:	3501      	adds	r5, #1
 80068ce:	68e3      	ldr	r3, [r4, #12]
 80068d0:	9903      	ldr	r1, [sp, #12]
 80068d2:	1a5b      	subs	r3, r3, r1
 80068d4:	42ab      	cmp	r3, r5
 80068d6:	dcf2      	bgt.n	80068be <_printf_i+0x212>
 80068d8:	e7eb      	b.n	80068b2 <_printf_i+0x206>
 80068da:	2500      	movs	r5, #0
 80068dc:	f104 0619 	add.w	r6, r4, #25
 80068e0:	e7f5      	b.n	80068ce <_printf_i+0x222>
 80068e2:	bf00      	nop
 80068e4:	08006a41 	.word	0x08006a41
 80068e8:	08006a52 	.word	0x08006a52

080068ec <memmove>:
 80068ec:	4288      	cmp	r0, r1
 80068ee:	b510      	push	{r4, lr}
 80068f0:	eb01 0402 	add.w	r4, r1, r2
 80068f4:	d902      	bls.n	80068fc <memmove+0x10>
 80068f6:	4284      	cmp	r4, r0
 80068f8:	4623      	mov	r3, r4
 80068fa:	d807      	bhi.n	800690c <memmove+0x20>
 80068fc:	1e43      	subs	r3, r0, #1
 80068fe:	42a1      	cmp	r1, r4
 8006900:	d008      	beq.n	8006914 <memmove+0x28>
 8006902:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006906:	f803 2f01 	strb.w	r2, [r3, #1]!
 800690a:	e7f8      	b.n	80068fe <memmove+0x12>
 800690c:	4402      	add	r2, r0
 800690e:	4601      	mov	r1, r0
 8006910:	428a      	cmp	r2, r1
 8006912:	d100      	bne.n	8006916 <memmove+0x2a>
 8006914:	bd10      	pop	{r4, pc}
 8006916:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800691a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800691e:	e7f7      	b.n	8006910 <memmove+0x24>

08006920 <_sbrk_r>:
 8006920:	b538      	push	{r3, r4, r5, lr}
 8006922:	4d06      	ldr	r5, [pc, #24]	@ (800693c <_sbrk_r+0x1c>)
 8006924:	2300      	movs	r3, #0
 8006926:	4604      	mov	r4, r0
 8006928:	4608      	mov	r0, r1
 800692a:	602b      	str	r3, [r5, #0]
 800692c:	f7fa fa4c 	bl	8000dc8 <_sbrk>
 8006930:	1c43      	adds	r3, r0, #1
 8006932:	d102      	bne.n	800693a <_sbrk_r+0x1a>
 8006934:	682b      	ldr	r3, [r5, #0]
 8006936:	b103      	cbz	r3, 800693a <_sbrk_r+0x1a>
 8006938:	6023      	str	r3, [r4, #0]
 800693a:	bd38      	pop	{r3, r4, r5, pc}
 800693c:	2000033c 	.word	0x2000033c

08006940 <memcpy>:
 8006940:	440a      	add	r2, r1
 8006942:	4291      	cmp	r1, r2
 8006944:	f100 33ff 	add.w	r3, r0, #4294967295
 8006948:	d100      	bne.n	800694c <memcpy+0xc>
 800694a:	4770      	bx	lr
 800694c:	b510      	push	{r4, lr}
 800694e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006952:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006956:	4291      	cmp	r1, r2
 8006958:	d1f9      	bne.n	800694e <memcpy+0xe>
 800695a:	bd10      	pop	{r4, pc}

0800695c <_realloc_r>:
 800695c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006960:	4680      	mov	r8, r0
 8006962:	4615      	mov	r5, r2
 8006964:	460c      	mov	r4, r1
 8006966:	b921      	cbnz	r1, 8006972 <_realloc_r+0x16>
 8006968:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800696c:	4611      	mov	r1, r2
 800696e:	f7ff bc4b 	b.w	8006208 <_malloc_r>
 8006972:	b92a      	cbnz	r2, 8006980 <_realloc_r+0x24>
 8006974:	f7ff fbdc 	bl	8006130 <_free_r>
 8006978:	2400      	movs	r4, #0
 800697a:	4620      	mov	r0, r4
 800697c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006980:	f000 f81a 	bl	80069b8 <_malloc_usable_size_r>
 8006984:	4285      	cmp	r5, r0
 8006986:	4606      	mov	r6, r0
 8006988:	d802      	bhi.n	8006990 <_realloc_r+0x34>
 800698a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800698e:	d8f4      	bhi.n	800697a <_realloc_r+0x1e>
 8006990:	4629      	mov	r1, r5
 8006992:	4640      	mov	r0, r8
 8006994:	f7ff fc38 	bl	8006208 <_malloc_r>
 8006998:	4607      	mov	r7, r0
 800699a:	2800      	cmp	r0, #0
 800699c:	d0ec      	beq.n	8006978 <_realloc_r+0x1c>
 800699e:	42b5      	cmp	r5, r6
 80069a0:	462a      	mov	r2, r5
 80069a2:	4621      	mov	r1, r4
 80069a4:	bf28      	it	cs
 80069a6:	4632      	movcs	r2, r6
 80069a8:	f7ff ffca 	bl	8006940 <memcpy>
 80069ac:	4621      	mov	r1, r4
 80069ae:	4640      	mov	r0, r8
 80069b0:	f7ff fbbe 	bl	8006130 <_free_r>
 80069b4:	463c      	mov	r4, r7
 80069b6:	e7e0      	b.n	800697a <_realloc_r+0x1e>

080069b8 <_malloc_usable_size_r>:
 80069b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069bc:	1f18      	subs	r0, r3, #4
 80069be:	2b00      	cmp	r3, #0
 80069c0:	bfbc      	itt	lt
 80069c2:	580b      	ldrlt	r3, [r1, r0]
 80069c4:	18c0      	addlt	r0, r0, r3
 80069c6:	4770      	bx	lr

080069c8 <_init>:
 80069c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ca:	bf00      	nop
 80069cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069ce:	bc08      	pop	{r3}
 80069d0:	469e      	mov	lr, r3
 80069d2:	4770      	bx	lr

080069d4 <_fini>:
 80069d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069d6:	bf00      	nop
 80069d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069da:	bc08      	pop	{r3}
 80069dc:	469e      	mov	lr, r3
 80069de:	4770      	bx	lr
