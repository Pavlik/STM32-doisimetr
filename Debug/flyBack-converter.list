
flyBack-converter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063a4  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08006538  08006538  00007538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006580  08006580  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  08006580  08006580  00007580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006588  08006588  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006588  08006588  00007588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800658c  0800658c  0000758c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006590  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  2000000c  0800659c  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  0800659c  00008170  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001463a  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000262f  00000000  00000000  0001c676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001230  00000000  00000000  0001eca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e30  00000000  00000000  0001fed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024519  00000000  00000000  00020d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014255  00000000  00000000  00045221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e85cd  00000000  00000000  00059476  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00141a43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e0c  00000000  00000000  00141a88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00146894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08006520 	.word	0x08006520

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08006520 	.word	0x08006520

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <initHV>:
bool HVonePulse = false;
uint16_t adcHVvalue = 0;


void initHV()
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80004c8:	217f      	movs	r1, #127	@ 0x7f
 80004ca:	480e      	ldr	r0, [pc, #56]	@ (8000504 <initHV+0x40>)
 80004cc:	f002 fa60 	bl	8002990 <HAL_ADCEx_Calibration_Start>
	startPump();
 80004d0:	f000 f81e 	bl	8000510 <startPump>
	do
	{
		if(HVpumpInit == true)
 80004d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000508 <initHV+0x44>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d0fb      	beq.n	80004d4 <initHV+0x10>
		{
			GPIO_To_ADC();
 80004dc:	f000 f86a 	bl	80005b4 <GPIO_To_ADC>
			startADC();
 80004e0:	f000 f82a 	bl	8000538 <startADC>
			if(adcHVvalue >= HV_REF_VALUE)
 80004e4:	4b09      	ldr	r3, [pc, #36]	@ (800050c <initHV+0x48>)
 80004e6:	881b      	ldrh	r3, [r3, #0]
 80004e8:	f240 52db 	movw	r2, #1499	@ 0x5db
 80004ec:	4293      	cmp	r3, r2
 80004ee:	d805      	bhi.n	80004fc <initHV+0x38>
				break;
			else
			{
				HVpumpInit = false;
 80004f0:	4b05      	ldr	r3, [pc, #20]	@ (8000508 <initHV+0x44>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	701a      	strb	r2, [r3, #0]
				startPump();
 80004f6:	f000 f80b 	bl	8000510 <startPump>
		if(HVpumpInit == true)
 80004fa:	e7eb      	b.n	80004d4 <initHV+0x10>
				break;
 80004fc:	bf00      	nop
			}
		}

	}
	while(true);
}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	2000002c 	.word	0x2000002c
 8000508:	20000028 	.word	0x20000028
 800050c:	2000002a 	.word	0x2000002a

08000510 <startPump>:


void startPump()
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_IT(&htim15, TIM_CHANNEL_1);
 8000514:	2100      	movs	r1, #0
 8000516:	4802      	ldr	r0, [pc, #8]	@ (8000520 <startPump+0x10>)
 8000518:	f004 f92e 	bl	8004778 <HAL_TIM_PWM_Start_IT>
	//HAL_GPIO_WritePin(COUNTER_ENABLE_PORT, COUNTER_ENABLE_PIN, DISAB);
}
 800051c:	bf00      	nop
 800051e:	bd80      	pop	{r7, pc}
 8000520:	20000094 	.word	0x20000094

08000524 <stopPump>:

void stopPump()
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop_IT(&htim15, TIM_CHANNEL_1);
 8000528:	2100      	movs	r1, #0
 800052a:	4802      	ldr	r0, [pc, #8]	@ (8000534 <stopPump+0x10>)
 800052c:	f004 fa56 	bl	80049dc <HAL_TIM_PWM_Stop_IT>
	//HAL_GPIO_WritePin(COUNTER_ENABLE_PORT, COUNTER_ENABLE_PIN, EN);
}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}
 8000534:	20000094 	.word	0x20000094

08000538 <startADC>:

void startADC()
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
	HAL_ADC_Start_IT(&hadc1);
 800053c:	4802      	ldr	r0, [pc, #8]	@ (8000548 <startADC+0x10>)
 800053e:	f001 f9d3 	bl	80018e8 <HAL_ADC_Start_IT>
}
 8000542:	bf00      	nop
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	2000002c 	.word	0x2000002c

0800054c <measureHV>:
{
	HAL_ADC_Stop_IT(&hadc1);
}

uint16_t measureHV()
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
	return HAL_ADC_GetValue(&hadc1);
 8000550:	4803      	ldr	r0, [pc, #12]	@ (8000560 <measureHV+0x14>)
 8000552:	f001 fa7d 	bl	8001a50 <HAL_ADC_GetValue>
 8000556:	4603      	mov	r3, r0
 8000558:	b29b      	uxth	r3, r3
}
 800055a:	4618      	mov	r0, r3
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	2000002c 	.word	0x2000002c

08000564 <ADC_To_GPIO>:

void ADC_To_GPIO()
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b086      	sub	sp, #24
 8000568:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056a:	1d3b      	adds	r3, r7, #4
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
 8000576:	611a      	str	r2, [r3, #16]
    HAL_ADC_DeInit(&hadc1);
 8000578:	480c      	ldr	r0, [pc, #48]	@ (80005ac <ADC_To_GPIO+0x48>)
 800057a:	f001 f88f 	bl	800169c <HAL_ADC_DeInit>
    // Настройка PA0 как выход (GPIO_OUTPUT)
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800057e:	2301      	movs	r3, #1
 8000580:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000582:	2301      	movs	r3, #1
 8000584:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000586:	2300      	movs	r3, #0
 8000588:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058a:	2300      	movs	r3, #0
 800058c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	4619      	mov	r1, r3
 8000592:	4807      	ldr	r0, [pc, #28]	@ (80005b0 <ADC_To_GPIO+0x4c>)
 8000594:	f002 fbd2 	bl	8002d3c <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000598:	2200      	movs	r2, #0
 800059a:	2101      	movs	r1, #1
 800059c:	4804      	ldr	r0, [pc, #16]	@ (80005b0 <ADC_To_GPIO+0x4c>)
 800059e:	f002 fe21 	bl	80031e4 <HAL_GPIO_WritePin>
}
 80005a2:	bf00      	nop
 80005a4:	3718      	adds	r7, #24
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	2000002c 	.word	0x2000002c
 80005b0:	48000800 	.word	0x48000800

080005b4 <GPIO_To_ADC>:

void GPIO_To_ADC()
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08c      	sub	sp, #48	@ 0x30
 80005b8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ba:	f107 031c 	add.w	r3, r7, #28
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]
    ADC_ChannelConfTypeDef sConfig = {0};
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]
 80005d8:	615a      	str	r2, [r3, #20]

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);  // Деинициализация GPIO
 80005da:	2101      	movs	r1, #1
 80005dc:	482a      	ldr	r0, [pc, #168]	@ (8000688 <GPIO_To_ADC+0xd4>)
 80005de:	f002 fd27 	bl	8003030 <HAL_GPIO_DeInit>
//    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
//    GPIO_InitStruct.Pull = GPIO_NOPULL;
//    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);


    hadc1.Instance = ADC1;
 80005e2:	4b2a      	ldr	r3, [pc, #168]	@ (800068c <GPIO_To_ADC+0xd8>)
 80005e4:	4a2a      	ldr	r2, [pc, #168]	@ (8000690 <GPIO_To_ADC+0xdc>)
 80005e6:	601a      	str	r2, [r3, #0]
      hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005e8:	4b28      	ldr	r3, [pc, #160]	@ (800068c <GPIO_To_ADC+0xd8>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	605a      	str	r2, [r3, #4]
      hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005ee:	4b27      	ldr	r3, [pc, #156]	@ (800068c <GPIO_To_ADC+0xd8>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
      hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005f4:	4b25      	ldr	r3, [pc, #148]	@ (800068c <GPIO_To_ADC+0xd8>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	60da      	str	r2, [r3, #12]
      hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005fa:	4b24      	ldr	r3, [pc, #144]	@ (800068c <GPIO_To_ADC+0xd8>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	611a      	str	r2, [r3, #16]
      hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000600:	4b22      	ldr	r3, [pc, #136]	@ (800068c <GPIO_To_ADC+0xd8>)
 8000602:	2204      	movs	r2, #4
 8000604:	615a      	str	r2, [r3, #20]
      hadc1.Init.LowPowerAutoWait = DISABLE;
 8000606:	4b21      	ldr	r3, [pc, #132]	@ (800068c <GPIO_To_ADC+0xd8>)
 8000608:	2200      	movs	r2, #0
 800060a:	761a      	strb	r2, [r3, #24]
      hadc1.Init.ContinuousConvMode = DISABLE;
 800060c:	4b1f      	ldr	r3, [pc, #124]	@ (800068c <GPIO_To_ADC+0xd8>)
 800060e:	2200      	movs	r2, #0
 8000610:	765a      	strb	r2, [r3, #25]
      hadc1.Init.NbrOfConversion = 1;
 8000612:	4b1e      	ldr	r3, [pc, #120]	@ (800068c <GPIO_To_ADC+0xd8>)
 8000614:	2201      	movs	r2, #1
 8000616:	61da      	str	r2, [r3, #28]
      hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000618:	4b1c      	ldr	r3, [pc, #112]	@ (800068c <GPIO_To_ADC+0xd8>)
 800061a:	2200      	movs	r2, #0
 800061c:	f883 2020 	strb.w	r2, [r3, #32]
      hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000620:	4b1a      	ldr	r3, [pc, #104]	@ (800068c <GPIO_To_ADC+0xd8>)
 8000622:	2200      	movs	r2, #0
 8000624:	629a      	str	r2, [r3, #40]	@ 0x28
      hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000626:	4b19      	ldr	r3, [pc, #100]	@ (800068c <GPIO_To_ADC+0xd8>)
 8000628:	2200      	movs	r2, #0
 800062a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hadc1.Init.DMAContinuousRequests = DISABLE;
 800062c:	4b17      	ldr	r3, [pc, #92]	@ (800068c <GPIO_To_ADC+0xd8>)
 800062e:	2200      	movs	r2, #0
 8000630:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000634:	4b15      	ldr	r3, [pc, #84]	@ (800068c <GPIO_To_ADC+0xd8>)
 8000636:	2200      	movs	r2, #0
 8000638:	635a      	str	r2, [r3, #52]	@ 0x34
      hadc1.Init.OversamplingMode = DISABLE;
 800063a:	4b14      	ldr	r3, [pc, #80]	@ (800068c <GPIO_To_ADC+0xd8>)
 800063c:	2200      	movs	r2, #0
 800063e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
      if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000642:	4812      	ldr	r0, [pc, #72]	@ (800068c <GPIO_To_ADC+0xd8>)
 8000644:	f000 fee4 	bl	8001410 <HAL_ADC_Init>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <GPIO_To_ADC+0x9e>
      {
        Error_Handler();
 800064e:	f000 fa3d 	bl	8000acc <Error_Handler>
      }

      sConfig.Channel = ADC_CHANNEL_1;
 8000652:	4b10      	ldr	r3, [pc, #64]	@ (8000694 <GPIO_To_ADC+0xe0>)
 8000654:	607b      	str	r3, [r7, #4]
      sConfig.Rank = ADC_REGULAR_RANK_1;
 8000656:	2306      	movs	r3, #6
 8000658:	60bb      	str	r3, [r7, #8]
      sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800065a:	2300      	movs	r3, #0
 800065c:	60fb      	str	r3, [r7, #12]
      sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800065e:	237f      	movs	r3, #127	@ 0x7f
 8000660:	613b      	str	r3, [r7, #16]
      sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000662:	2304      	movs	r3, #4
 8000664:	617b      	str	r3, [r7, #20]
      sConfig.Offset = 0;
 8000666:	2300      	movs	r3, #0
 8000668:	61bb      	str	r3, [r7, #24]
      if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	4619      	mov	r1, r3
 800066e:	4807      	ldr	r0, [pc, #28]	@ (800068c <GPIO_To_ADC+0xd8>)
 8000670:	f001 fbc4 	bl	8001dfc <HAL_ADC_ConfigChannel>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <GPIO_To_ADC+0xca>
      {
        Error_Handler();
 800067a:	f000 fa27 	bl	8000acc <Error_Handler>
      }
}
 800067e:	bf00      	nop
 8000680:	3730      	adds	r7, #48	@ 0x30
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	48000800 	.word	0x48000800
 800068c:	2000002c 	.word	0x2000002c
 8000690:	50040000 	.word	0x50040000
 8000694:	04300002 	.word	0x04300002

08000698 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
	{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
	    if(hadc->Instance == ADC1) //check if the interrupt comes from ACD1
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a07      	ldr	r2, [pc, #28]	@ (80006c4 <HAL_ADC_ConvCpltCallback+0x2c>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d107      	bne.n	80006ba <HAL_ADC_ConvCpltCallback+0x22>
	    {
	    	adcHVvalue = measureHV();
 80006aa:	f7ff ff4f 	bl	800054c <measureHV>
 80006ae:	4603      	mov	r3, r0
 80006b0:	461a      	mov	r2, r3
 80006b2:	4b05      	ldr	r3, [pc, #20]	@ (80006c8 <HAL_ADC_ConvCpltCallback+0x30>)
 80006b4:	801a      	strh	r2, [r3, #0]
	    	ADC_To_GPIO();
 80006b6:	f7ff ff55 	bl	8000564 <ADC_To_GPIO>
	    }
	}
 80006ba:	bf00      	nop
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	50040000 	.word	0x50040000
 80006c8:	2000002a 	.word	0x2000002a

080006cc <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
	{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
	        if(htim->Instance == TIM15)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a0b      	ldr	r2, [pc, #44]	@ (8000708 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 80006da:	4293      	cmp	r3, r2
 80006dc:	d110      	bne.n	8000700 <HAL_TIM_PWM_PulseFinishedCallback+0x34>
	        {
	        	counter++;
 80006de:	4b0b      	ldr	r3, [pc, #44]	@ (800070c <HAL_TIM_PWM_PulseFinishedCallback+0x40>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	3301      	adds	r3, #1
 80006e4:	4a09      	ldr	r2, [pc, #36]	@ (800070c <HAL_TIM_PWM_PulseFinishedCallback+0x40>)
 80006e6:	6013      	str	r3, [r2, #0]
		        if(counter == 10)
 80006e8:	4b08      	ldr	r3, [pc, #32]	@ (800070c <HAL_TIM_PWM_PulseFinishedCallback+0x40>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2b0a      	cmp	r3, #10
 80006ee:	d107      	bne.n	8000700 <HAL_TIM_PWM_PulseFinishedCallback+0x34>
		        {
		        	counter = 0;
 80006f0:	4b06      	ldr	r3, [pc, #24]	@ (800070c <HAL_TIM_PWM_PulseFinishedCallback+0x40>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
		        	HVpumpInit = true;
 80006f6:	4b06      	ldr	r3, [pc, #24]	@ (8000710 <HAL_TIM_PWM_PulseFinishedCallback+0x44>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	701a      	strb	r2, [r3, #0]
		        	stopPump();
 80006fc:	f7ff ff12 	bl	8000524 <stopPump>
		        }
	        }

	}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40014000 	.word	0x40014000
 800070c:	20000168 	.word	0x20000168
 8000710:	20000028 	.word	0x20000028

08000714 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800071a:	f000 fbc8 	bl	8000eae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800071e:	f000 f80e 	bl	800073e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000722:	f000 f993 	bl	8000a4c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000726:	f000 f961 	bl	80009ec <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800072a:	f000 f859 	bl	80007e0 <MX_ADC1_Init>
  MX_TIM15_Init();
 800072e:	f000 f8bb 	bl	80008a8 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  initHV();
 8000732:	f7ff fec7 	bl	80004c4 <initHV>
  uint32_t checkTimer = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	607b      	str	r3, [r7, #4]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800073a:	bf00      	nop
 800073c:	e7fd      	b.n	800073a <main+0x26>

0800073e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800073e:	b580      	push	{r7, lr}
 8000740:	b096      	sub	sp, #88	@ 0x58
 8000742:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000744:	f107 0314 	add.w	r3, r7, #20
 8000748:	2244      	movs	r2, #68	@ 0x44
 800074a:	2100      	movs	r1, #0
 800074c:	4618      	mov	r0, r3
 800074e:	f005 feba 	bl	80064c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000752:	463b      	mov	r3, r7
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000760:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000764:	f002 fd64 	bl	8003230 <HAL_PWREx_ControlVoltageScaling>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800076e:	f000 f9ad 	bl	8000acc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000772:	2302      	movs	r3, #2
 8000774:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000776:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800077a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800077c:	2340      	movs	r3, #64	@ 0x40
 800077e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000780:	2302      	movs	r3, #2
 8000782:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000784:	2302      	movs	r3, #2
 8000786:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000788:	2302      	movs	r3, #2
 800078a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 800078c:	2314      	movs	r3, #20
 800078e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000790:	2307      	movs	r3, #7
 8000792:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000794:	2302      	movs	r3, #2
 8000796:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 8000798:	2308      	movs	r3, #8
 800079a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	4618      	mov	r0, r3
 80007a2:	f002 fd9b 	bl	80032dc <HAL_RCC_OscConfig>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80007ac:	f000 f98e 	bl	8000acc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b0:	230f      	movs	r3, #15
 80007b2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b4:	2303      	movs	r3, #3
 80007b6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80007b8:	2380      	movs	r3, #128	@ 0x80
 80007ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c0:	2300      	movs	r3, #0
 80007c2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007c4:	463b      	mov	r3, r7
 80007c6:	2100      	movs	r1, #0
 80007c8:	4618      	mov	r0, r3
 80007ca:	f003 f99b 	bl	8003b04 <HAL_RCC_ClockConfig>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007d4:	f000 f97a 	bl	8000acc <Error_Handler>
  }
}
 80007d8:	bf00      	nop
 80007da:	3758      	adds	r7, #88	@ 0x58
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b086      	sub	sp, #24
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007e6:	463b      	mov	r3, r7
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]
 80007f4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007f6:	4b29      	ldr	r3, [pc, #164]	@ (800089c <MX_ADC1_Init+0xbc>)
 80007f8:	4a29      	ldr	r2, [pc, #164]	@ (80008a0 <MX_ADC1_Init+0xc0>)
 80007fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007fc:	4b27      	ldr	r3, [pc, #156]	@ (800089c <MX_ADC1_Init+0xbc>)
 80007fe:	2200      	movs	r2, #0
 8000800:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000802:	4b26      	ldr	r3, [pc, #152]	@ (800089c <MX_ADC1_Init+0xbc>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000808:	4b24      	ldr	r3, [pc, #144]	@ (800089c <MX_ADC1_Init+0xbc>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800080e:	4b23      	ldr	r3, [pc, #140]	@ (800089c <MX_ADC1_Init+0xbc>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000814:	4b21      	ldr	r3, [pc, #132]	@ (800089c <MX_ADC1_Init+0xbc>)
 8000816:	2204      	movs	r2, #4
 8000818:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800081a:	4b20      	ldr	r3, [pc, #128]	@ (800089c <MX_ADC1_Init+0xbc>)
 800081c:	2200      	movs	r2, #0
 800081e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000820:	4b1e      	ldr	r3, [pc, #120]	@ (800089c <MX_ADC1_Init+0xbc>)
 8000822:	2200      	movs	r2, #0
 8000824:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000826:	4b1d      	ldr	r3, [pc, #116]	@ (800089c <MX_ADC1_Init+0xbc>)
 8000828:	2201      	movs	r2, #1
 800082a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800082c:	4b1b      	ldr	r3, [pc, #108]	@ (800089c <MX_ADC1_Init+0xbc>)
 800082e:	2200      	movs	r2, #0
 8000830:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000834:	4b19      	ldr	r3, [pc, #100]	@ (800089c <MX_ADC1_Init+0xbc>)
 8000836:	2200      	movs	r2, #0
 8000838:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800083a:	4b18      	ldr	r3, [pc, #96]	@ (800089c <MX_ADC1_Init+0xbc>)
 800083c:	2200      	movs	r2, #0
 800083e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000840:	4b16      	ldr	r3, [pc, #88]	@ (800089c <MX_ADC1_Init+0xbc>)
 8000842:	2200      	movs	r2, #0
 8000844:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000848:	4b14      	ldr	r3, [pc, #80]	@ (800089c <MX_ADC1_Init+0xbc>)
 800084a:	2200      	movs	r2, #0
 800084c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800084e:	4b13      	ldr	r3, [pc, #76]	@ (800089c <MX_ADC1_Init+0xbc>)
 8000850:	2200      	movs	r2, #0
 8000852:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000856:	4811      	ldr	r0, [pc, #68]	@ (800089c <MX_ADC1_Init+0xbc>)
 8000858:	f000 fdda 	bl	8001410 <HAL_ADC_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000862:	f000 f933 	bl	8000acc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000866:	4b0f      	ldr	r3, [pc, #60]	@ (80008a4 <MX_ADC1_Init+0xc4>)
 8000868:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800086a:	2306      	movs	r3, #6
 800086c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800086e:	2300      	movs	r3, #0
 8000870:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000872:	237f      	movs	r3, #127	@ 0x7f
 8000874:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000876:	2304      	movs	r3, #4
 8000878:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800087a:	2300      	movs	r3, #0
 800087c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800087e:	463b      	mov	r3, r7
 8000880:	4619      	mov	r1, r3
 8000882:	4806      	ldr	r0, [pc, #24]	@ (800089c <MX_ADC1_Init+0xbc>)
 8000884:	f001 faba 	bl	8001dfc <HAL_ADC_ConfigChannel>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800088e:	f000 f91d 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000892:	bf00      	nop
 8000894:	3718      	adds	r7, #24
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	2000002c 	.word	0x2000002c
 80008a0:	50040000 	.word	0x50040000
 80008a4:	04300002 	.word	0x04300002

080008a8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b09a      	sub	sp, #104	@ 0x68
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ae:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008bc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008c8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]
 80008d8:	615a      	str	r2, [r3, #20]
 80008da:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008dc:	1d3b      	adds	r3, r7, #4
 80008de:	222c      	movs	r2, #44	@ 0x2c
 80008e0:	2100      	movs	r1, #0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f005 fdef 	bl	80064c6 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80008e8:	4b3e      	ldr	r3, [pc, #248]	@ (80009e4 <MX_TIM15_Init+0x13c>)
 80008ea:	4a3f      	ldr	r2, [pc, #252]	@ (80009e8 <MX_TIM15_Init+0x140>)
 80008ec:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80008ee:	4b3d      	ldr	r3, [pc, #244]	@ (80009e4 <MX_TIM15_Init+0x13c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f4:	4b3b      	ldr	r3, [pc, #236]	@ (80009e4 <MX_TIM15_Init+0x13c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1000-1;
 80008fa:	4b3a      	ldr	r3, [pc, #232]	@ (80009e4 <MX_TIM15_Init+0x13c>)
 80008fc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000900:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000902:	4b38      	ldr	r3, [pc, #224]	@ (80009e4 <MX_TIM15_Init+0x13c>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000908:	4b36      	ldr	r3, [pc, #216]	@ (80009e4 <MX_TIM15_Init+0x13c>)
 800090a:	2200      	movs	r2, #0
 800090c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800090e:	4b35      	ldr	r3, [pc, #212]	@ (80009e4 <MX_TIM15_Init+0x13c>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000914:	4833      	ldr	r0, [pc, #204]	@ (80009e4 <MX_TIM15_Init+0x13c>)
 8000916:	f003 fe77 	bl	8004608 <HAL_TIM_Base_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8000920:	f000 f8d4 	bl	8000acc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000924:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000928:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800092a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800092e:	4619      	mov	r1, r3
 8000930:	482c      	ldr	r0, [pc, #176]	@ (80009e4 <MX_TIM15_Init+0x13c>)
 8000932:	f004 fb3d 	bl	8004fb0 <HAL_TIM_ConfigClockSource>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 800093c:	f000 f8c6 	bl	8000acc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000940:	4828      	ldr	r0, [pc, #160]	@ (80009e4 <MX_TIM15_Init+0x13c>)
 8000942:	f003 feb8 	bl	80046b6 <HAL_TIM_PWM_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 800094c:	f000 f8be 	bl	8000acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000950:	2300      	movs	r3, #0
 8000952:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000954:	2300      	movs	r3, #0
 8000956:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000958:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800095c:	4619      	mov	r1, r3
 800095e:	4821      	ldr	r0, [pc, #132]	@ (80009e4 <MX_TIM15_Init+0x13c>)
 8000960:	f004 ffc4 	bl	80058ec <HAL_TIMEx_MasterConfigSynchronization>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 800096a:	f000 f8af 	bl	8000acc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800096e:	2360      	movs	r3, #96	@ 0x60
 8000970:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 972;
 8000972:	f44f 7373 	mov.w	r3, #972	@ 0x3cc
 8000976:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000978:	2302      	movs	r3, #2
 800097a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800097c:	2300      	movs	r3, #0
 800097e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000980:	2300      	movs	r3, #0
 8000982:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000984:	2300      	movs	r3, #0
 8000986:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000988:	2300      	movs	r3, #0
 800098a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800098c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000990:	2200      	movs	r2, #0
 8000992:	4619      	mov	r1, r3
 8000994:	4813      	ldr	r0, [pc, #76]	@ (80009e4 <MX_TIM15_Init+0x13c>)
 8000996:	f004 f9f7 	bl	8004d88 <HAL_TIM_PWM_ConfigChannel>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 80009a0:	f000 f894 	bl	8000acc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009a4:	2300      	movs	r3, #0
 80009a6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009a8:	2300      	movs	r3, #0
 80009aa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009ac:	2300      	movs	r3, #0
 80009ae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009bc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009be:	2300      	movs	r3, #0
 80009c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	4619      	mov	r1, r3
 80009c6:	4807      	ldr	r0, [pc, #28]	@ (80009e4 <MX_TIM15_Init+0x13c>)
 80009c8:	f004 fffe 	bl	80059c8 <HAL_TIMEx_ConfigBreakDeadTime>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_TIM15_Init+0x12e>
  {
    Error_Handler();
 80009d2:	f000 f87b 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80009d6:	4803      	ldr	r0, [pc, #12]	@ (80009e4 <MX_TIM15_Init+0x13c>)
 80009d8:	f000 f958 	bl	8000c8c <HAL_TIM_MspPostInit>

}
 80009dc:	bf00      	nop
 80009de:	3768      	adds	r7, #104	@ 0x68
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20000094 	.word	0x20000094
 80009e8:	40014000 	.word	0x40014000

080009ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009f0:	4b14      	ldr	r3, [pc, #80]	@ (8000a44 <MX_USART1_UART_Init+0x58>)
 80009f2:	4a15      	ldr	r2, [pc, #84]	@ (8000a48 <MX_USART1_UART_Init+0x5c>)
 80009f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009f6:	4b13      	ldr	r3, [pc, #76]	@ (8000a44 <MX_USART1_UART_Init+0x58>)
 80009f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009fe:	4b11      	ldr	r3, [pc, #68]	@ (8000a44 <MX_USART1_UART_Init+0x58>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	@ (8000a44 <MX_USART1_UART_Init+0x58>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a44 <MX_USART1_UART_Init+0x58>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	@ (8000a44 <MX_USART1_UART_Init+0x58>)
 8000a12:	220c      	movs	r2, #12
 8000a14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a16:	4b0b      	ldr	r3, [pc, #44]	@ (8000a44 <MX_USART1_UART_Init+0x58>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a1c:	4b09      	ldr	r3, [pc, #36]	@ (8000a44 <MX_USART1_UART_Init+0x58>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a22:	4b08      	ldr	r3, [pc, #32]	@ (8000a44 <MX_USART1_UART_Init+0x58>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a28:	4b06      	ldr	r3, [pc, #24]	@ (8000a44 <MX_USART1_UART_Init+0x58>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a2e:	4805      	ldr	r0, [pc, #20]	@ (8000a44 <MX_USART1_UART_Init+0x58>)
 8000a30:	f005 f860 	bl	8005af4 <HAL_UART_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a3a:	f000 f847 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	200000e0 	.word	0x200000e0
 8000a48:	40013800 	.word	0x40013800

08000a4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b088      	sub	sp, #32
 8000a50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a52:	f107 030c 	add.w	r3, r7, #12
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
 8000a60:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a62:	4b18      	ldr	r3, [pc, #96]	@ (8000ac4 <MX_GPIO_Init+0x78>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a66:	4a17      	ldr	r2, [pc, #92]	@ (8000ac4 <MX_GPIO_Init+0x78>)
 8000a68:	f043 0304 	orr.w	r3, r3, #4
 8000a6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a6e:	4b15      	ldr	r3, [pc, #84]	@ (8000ac4 <MX_GPIO_Init+0x78>)
 8000a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a72:	f003 0304 	and.w	r3, r3, #4
 8000a76:	60bb      	str	r3, [r7, #8]
 8000a78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7a:	4b12      	ldr	r3, [pc, #72]	@ (8000ac4 <MX_GPIO_Init+0x78>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a7e:	4a11      	ldr	r2, [pc, #68]	@ (8000ac4 <MX_GPIO_Init+0x78>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a86:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac4 <MX_GPIO_Init+0x78>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a92:	2200      	movs	r2, #0
 8000a94:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a98:	480b      	ldr	r0, [pc, #44]	@ (8000ac8 <MX_GPIO_Init+0x7c>)
 8000a9a:	f002 fba3 	bl	80031e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aa2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab0:	f107 030c 	add.w	r3, r7, #12
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4804      	ldr	r0, [pc, #16]	@ (8000ac8 <MX_GPIO_Init+0x7c>)
 8000ab8:	f002 f940 	bl	8002d3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000abc:	bf00      	nop
 8000abe:	3720      	adds	r7, #32
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40021000 	.word	0x40021000
 8000ac8:	48000800 	.word	0x48000800

08000acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad0:	b672      	cpsid	i
}
 8000ad2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <Error_Handler+0x8>

08000ad8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ade:	4b0f      	ldr	r3, [pc, #60]	@ (8000b1c <HAL_MspInit+0x44>)
 8000ae0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ae2:	4a0e      	ldr	r2, [pc, #56]	@ (8000b1c <HAL_MspInit+0x44>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000aea:	4b0c      	ldr	r3, [pc, #48]	@ (8000b1c <HAL_MspInit+0x44>)
 8000aec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af6:	4b09      	ldr	r3, [pc, #36]	@ (8000b1c <HAL_MspInit+0x44>)
 8000af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000afa:	4a08      	ldr	r2, [pc, #32]	@ (8000b1c <HAL_MspInit+0x44>)
 8000afc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b00:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b02:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <HAL_MspInit+0x44>)
 8000b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	40021000 	.word	0x40021000

08000b20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b0a4      	sub	sp, #144	@ 0x90
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	2268      	movs	r2, #104	@ 0x68
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4618      	mov	r0, r3
 8000b42:	f005 fcc0 	bl	80064c6 <memset>
  if(hadc->Instance==ADC1)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a2a      	ldr	r2, [pc, #168]	@ (8000bf4 <HAL_ADC_MspInit+0xd4>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d14c      	bne.n	8000bea <HAL_ADC_MspInit+0xca>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b50:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000b54:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000b56:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000b5a:	673b      	str	r3, [r7, #112]	@ 0x70
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 8000b60:	2302      	movs	r3, #2
 8000b62:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 10;
 8000b64:	230a      	movs	r3, #10
 8000b66:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000b68:	2307      	movs	r3, #7
 8000b6a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV8;
 8000b70:	2308      	movs	r3, #8
 8000b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000b74:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000b78:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f003 f9e4 	bl	8003f4c <HAL_RCCEx_PeriphCLKConfig>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000b8a:	f7ff ff9f 	bl	8000acc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000b8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf8 <HAL_ADC_MspInit+0xd8>)
 8000b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b92:	4a19      	ldr	r2, [pc, #100]	@ (8000bf8 <HAL_ADC_MspInit+0xd8>)
 8000b94:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000b98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b9a:	4b17      	ldr	r3, [pc, #92]	@ (8000bf8 <HAL_ADC_MspInit+0xd8>)
 8000b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba6:	4b14      	ldr	r3, [pc, #80]	@ (8000bf8 <HAL_ADC_MspInit+0xd8>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000baa:	4a13      	ldr	r2, [pc, #76]	@ (8000bf8 <HAL_ADC_MspInit+0xd8>)
 8000bac:	f043 0304 	orr.w	r3, r3, #4
 8000bb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bb2:	4b11      	ldr	r3, [pc, #68]	@ (8000bf8 <HAL_ADC_MspInit+0xd8>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bb6:	f003 0304 	and.w	r3, r3, #4
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000bc2:	230b      	movs	r3, #11
 8000bc4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bce:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4809      	ldr	r0, [pc, #36]	@ (8000bfc <HAL_ADC_MspInit+0xdc>)
 8000bd6:	f002 f8b1 	bl	8002d3c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2100      	movs	r1, #0
 8000bde:	2012      	movs	r0, #18
 8000be0:	f002 f867 	bl	8002cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000be4:	2012      	movs	r0, #18
 8000be6:	f002 f880 	bl	8002cea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000bea:	bf00      	nop
 8000bec:	3790      	adds	r7, #144	@ 0x90
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	50040000 	.word	0x50040000
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	48000800 	.word	0x48000800

08000c00 <HAL_ADC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a09      	ldr	r2, [pc, #36]	@ (8000c34 <HAL_ADC_MspDeInit+0x34>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d10c      	bne.n	8000c2c <HAL_ADC_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8000c12:	4b09      	ldr	r3, [pc, #36]	@ (8000c38 <HAL_ADC_MspDeInit+0x38>)
 8000c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c16:	4a08      	ldr	r2, [pc, #32]	@ (8000c38 <HAL_ADC_MspDeInit+0x38>)
 8000c18:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000c1c:	64d3      	str	r3, [r2, #76]	@ 0x4c

    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 8000c1e:	2101      	movs	r1, #1
 8000c20:	4806      	ldr	r0, [pc, #24]	@ (8000c3c <HAL_ADC_MspDeInit+0x3c>)
 8000c22:	f002 fa05 	bl	8003030 <HAL_GPIO_DeInit>

    /* ADC1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(ADC1_IRQn);
 8000c26:	2012      	movs	r0, #18
 8000c28:	f002 f86d 	bl	8002d06 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 8000c2c:	bf00      	nop
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	50040000 	.word	0x50040000
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	48000800 	.word	0x48000800

08000c40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c84 <HAL_TIM_Base_MspInit+0x44>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d113      	bne.n	8000c7a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000c52:	4b0d      	ldr	r3, [pc, #52]	@ (8000c88 <HAL_TIM_Base_MspInit+0x48>)
 8000c54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c56:	4a0c      	ldr	r2, [pc, #48]	@ (8000c88 <HAL_TIM_Base_MspInit+0x48>)
 8000c58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c5c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c88 <HAL_TIM_Base_MspInit+0x48>)
 8000c60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	2018      	movs	r0, #24
 8000c70:	f002 f81f 	bl	8002cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000c74:	2018      	movs	r0, #24
 8000c76:	f002 f838 	bl	8002cea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000c7a:	bf00      	nop
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40014000 	.word	0x40014000
 8000c88:	40021000 	.word	0x40021000

08000c8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b088      	sub	sp, #32
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	f107 030c 	add.w	r3, r7, #12
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM15)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a11      	ldr	r2, [pc, #68]	@ (8000cf0 <HAL_TIM_MspPostInit+0x64>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d11c      	bne.n	8000ce8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cae:	4b11      	ldr	r3, [pc, #68]	@ (8000cf4 <HAL_TIM_MspPostInit+0x68>)
 8000cb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cb2:	4a10      	ldr	r2, [pc, #64]	@ (8000cf4 <HAL_TIM_MspPostInit+0x68>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cba:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf4 <HAL_TIM_MspPostInit+0x68>)
 8000cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	60bb      	str	r3, [r7, #8]
 8000cc4:	68bb      	ldr	r3, [r7, #8]
    /**TIM15 GPIO Configuration
    PA2     ------> TIM15_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cc6:	2304      	movs	r3, #4
 8000cc8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8000cd6:	230e      	movs	r3, #14
 8000cd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cda:	f107 030c 	add.w	r3, r7, #12
 8000cde:	4619      	mov	r1, r3
 8000ce0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ce4:	f002 f82a 	bl	8002d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8000ce8:	bf00      	nop
 8000cea:	3720      	adds	r7, #32
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40014000 	.word	0x40014000
 8000cf4:	40021000 	.word	0x40021000

08000cf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b0a4      	sub	sp, #144	@ 0x90
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	2268      	movs	r2, #104	@ 0x68
 8000d16:	2100      	movs	r1, #0
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f005 fbd4 	bl	80064c6 <memset>
  if(huart->Instance==USART1)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a21      	ldr	r2, [pc, #132]	@ (8000da8 <HAL_UART_MspInit+0xb0>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d13b      	bne.n	8000da0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	4618      	mov	r0, r3
 8000d36:	f003 f909 	bl	8003f4c <HAL_RCCEx_PeriphCLKConfig>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d40:	f7ff fec4 	bl	8000acc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d44:	4b19      	ldr	r3, [pc, #100]	@ (8000dac <HAL_UART_MspInit+0xb4>)
 8000d46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d48:	4a18      	ldr	r2, [pc, #96]	@ (8000dac <HAL_UART_MspInit+0xb4>)
 8000d4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d4e:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d50:	4b16      	ldr	r3, [pc, #88]	@ (8000dac <HAL_UART_MspInit+0xb4>)
 8000d52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d58:	613b      	str	r3, [r7, #16]
 8000d5a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5c:	4b13      	ldr	r3, [pc, #76]	@ (8000dac <HAL_UART_MspInit+0xb4>)
 8000d5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d60:	4a12      	ldr	r2, [pc, #72]	@ (8000dac <HAL_UART_MspInit+0xb4>)
 8000d62:	f043 0301 	orr.w	r3, r3, #1
 8000d66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d68:	4b10      	ldr	r3, [pc, #64]	@ (8000dac <HAL_UART_MspInit+0xb4>)
 8000d6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d6c:	f003 0301 	and.w	r3, r3, #1
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d74:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d78:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d86:	2303      	movs	r3, #3
 8000d88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d8c:	2307      	movs	r3, #7
 8000d8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d92:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000d96:	4619      	mov	r1, r3
 8000d98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d9c:	f001 ffce 	bl	8002d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000da0:	bf00      	nop
 8000da2:	3790      	adds	r7, #144	@ 0x90
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40013800 	.word	0x40013800
 8000dac:	40021000 	.word	0x40021000

08000db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000db4:	bf00      	nop
 8000db6:	e7fd      	b.n	8000db4 <NMI_Handler+0x4>

08000db8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dbc:	bf00      	nop
 8000dbe:	e7fd      	b.n	8000dbc <HardFault_Handler+0x4>

08000dc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc4:	bf00      	nop
 8000dc6:	e7fd      	b.n	8000dc4 <MemManage_Handler+0x4>

08000dc8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dcc:	bf00      	nop
 8000dce:	e7fd      	b.n	8000dcc <BusFault_Handler+0x4>

08000dd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd4:	bf00      	nop
 8000dd6:	e7fd      	b.n	8000dd4 <UsageFault_Handler+0x4>

08000dd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e06:	f000 f8a7 	bl	8000f58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
	...

08000e10 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000e14:	4802      	ldr	r0, [pc, #8]	@ (8000e20 <ADC1_IRQHandler+0x10>)
 8000e16:	f000 fe28 	bl	8001a6a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	2000002c 	.word	0x2000002c

08000e24 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8000e28:	4802      	ldr	r0, [pc, #8]	@ (8000e34 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8000e2a:	f003 feab 	bl	8004b84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000094 	.word	0x20000094

08000e38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e3c:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <SystemInit+0x20>)
 8000e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e42:	4a05      	ldr	r2, [pc, #20]	@ (8000e58 <SystemInit+0x20>)
 8000e44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e94 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e60:	f7ff ffea 	bl	8000e38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e64:	480c      	ldr	r0, [pc, #48]	@ (8000e98 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e66:	490d      	ldr	r1, [pc, #52]	@ (8000e9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e68:	4a0d      	ldr	r2, [pc, #52]	@ (8000ea0 <LoopForever+0xe>)
  movs r3, #0
 8000e6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e6c:	e002      	b.n	8000e74 <LoopCopyDataInit>

08000e6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e72:	3304      	adds	r3, #4

08000e74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e78:	d3f9      	bcc.n	8000e6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e7c:	4c0a      	ldr	r4, [pc, #40]	@ (8000ea8 <LoopForever+0x16>)
  movs r3, #0
 8000e7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e80:	e001      	b.n	8000e86 <LoopFillZerobss>

08000e82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e84:	3204      	adds	r2, #4

08000e86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e88:	d3fb      	bcc.n	8000e82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e8a:	f005 fb25 	bl	80064d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e8e:	f7ff fc41 	bl	8000714 <main>

08000e92 <LoopForever>:

LoopForever:
    b LoopForever
 8000e92:	e7fe      	b.n	8000e92 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e94:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8000e98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e9c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ea0:	08006590 	.word	0x08006590
  ldr r2, =_sbss
 8000ea4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ea8:	20000170 	.word	0x20000170

08000eac <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000eac:	e7fe      	b.n	8000eac <CAN1_RX0_IRQHandler>

08000eae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b082      	sub	sp, #8
 8000eb2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb8:	2003      	movs	r0, #3
 8000eba:	f001 feef 	bl	8002c9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ebe:	200f      	movs	r0, #15
 8000ec0:	f000 f80e 	bl	8000ee0 <HAL_InitTick>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d002      	beq.n	8000ed0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	71fb      	strb	r3, [r7, #7]
 8000ece:	e001      	b.n	8000ed4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ed0:	f7ff fe02 	bl	8000ad8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000eec:	4b17      	ldr	r3, [pc, #92]	@ (8000f4c <HAL_InitTick+0x6c>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d023      	beq.n	8000f3c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ef4:	4b16      	ldr	r3, [pc, #88]	@ (8000f50 <HAL_InitTick+0x70>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	4b14      	ldr	r3, [pc, #80]	@ (8000f4c <HAL_InitTick+0x6c>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4619      	mov	r1, r3
 8000efe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f001 ff09 	bl	8002d22 <HAL_SYSTICK_Config>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d10f      	bne.n	8000f36 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2b0f      	cmp	r3, #15
 8000f1a:	d809      	bhi.n	8000f30 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	6879      	ldr	r1, [r7, #4]
 8000f20:	f04f 30ff 	mov.w	r0, #4294967295
 8000f24:	f001 fec5 	bl	8002cb2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f28:	4a0a      	ldr	r2, [pc, #40]	@ (8000f54 <HAL_InitTick+0x74>)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6013      	str	r3, [r2, #0]
 8000f2e:	e007      	b.n	8000f40 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	73fb      	strb	r3, [r7, #15]
 8000f34:	e004      	b.n	8000f40 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	73fb      	strb	r3, [r7, #15]
 8000f3a:	e001      	b.n	8000f40 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000008 	.word	0x20000008
 8000f50:	20000000 	.word	0x20000000
 8000f54:	20000004 	.word	0x20000004

08000f58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f5c:	4b06      	ldr	r3, [pc, #24]	@ (8000f78 <HAL_IncTick+0x20>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	461a      	mov	r2, r3
 8000f62:	4b06      	ldr	r3, [pc, #24]	@ (8000f7c <HAL_IncTick+0x24>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4413      	add	r3, r2
 8000f68:	4a04      	ldr	r2, [pc, #16]	@ (8000f7c <HAL_IncTick+0x24>)
 8000f6a:	6013      	str	r3, [r2, #0]
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	20000008 	.word	0x20000008
 8000f7c:	2000016c 	.word	0x2000016c

08000f80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  return uwTick;
 8000f84:	4b03      	ldr	r3, [pc, #12]	@ (8000f94 <HAL_GetTick+0x14>)
 8000f86:	681b      	ldr	r3, [r3, #0]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	2000016c 	.word	0x2000016c

08000f98 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	431a      	orrs	r2, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	b083      	sub	sp, #12
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
 8000fc6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001000:	b480      	push	{r7}
 8001002:	b087      	sub	sp, #28
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
 800100c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	3360      	adds	r3, #96	@ 0x60
 8001012:	461a      	mov	r2, r3
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	4413      	add	r3, r2
 800101a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	4b08      	ldr	r3, [pc, #32]	@ (8001044 <LL_ADC_SetOffset+0x44>)
 8001022:	4013      	ands	r3, r2
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800102a:	683a      	ldr	r2, [r7, #0]
 800102c:	430a      	orrs	r2, r1
 800102e:	4313      	orrs	r3, r2
 8001030:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001038:	bf00      	nop
 800103a:	371c      	adds	r7, #28
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	03fff000 	.word	0x03fff000

08001048 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3360      	adds	r3, #96	@ 0x60
 8001056:	461a      	mov	r2, r3
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	4413      	add	r3, r2
 800105e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001068:	4618      	mov	r0, r3
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001074:	b480      	push	{r7}
 8001076:	b087      	sub	sp, #28
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	3360      	adds	r3, #96	@ 0x60
 8001084:	461a      	mov	r2, r3
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	4413      	add	r3, r2
 800108c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	431a      	orrs	r2, r3
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800109e:	bf00      	nop
 80010a0:	371c      	adds	r7, #28
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80010aa:	b480      	push	{r7}
 80010ac:	b083      	sub	sp, #12
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
 80010b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	695b      	ldr	r3, [r3, #20]
 80010b8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	431a      	orrs	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	615a      	str	r2, [r3, #20]
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d101      	bne.n	80010e8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80010e4:	2301      	movs	r3, #1
 80010e6:	e000      	b.n	80010ea <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80010f6:	b480      	push	{r7}
 80010f8:	b087      	sub	sp, #28
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	60f8      	str	r0, [r7, #12]
 80010fe:	60b9      	str	r1, [r7, #8]
 8001100:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	3330      	adds	r3, #48	@ 0x30
 8001106:	461a      	mov	r2, r3
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	0a1b      	lsrs	r3, r3, #8
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	f003 030c 	and.w	r3, r3, #12
 8001112:	4413      	add	r3, r2
 8001114:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	f003 031f 	and.w	r3, r3, #31
 8001120:	211f      	movs	r1, #31
 8001122:	fa01 f303 	lsl.w	r3, r1, r3
 8001126:	43db      	mvns	r3, r3
 8001128:	401a      	ands	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	0e9b      	lsrs	r3, r3, #26
 800112e:	f003 011f 	and.w	r1, r3, #31
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	f003 031f 	and.w	r3, r3, #31
 8001138:	fa01 f303 	lsl.w	r3, r1, r3
 800113c:	431a      	orrs	r2, r3
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001142:	bf00      	nop
 8001144:	371c      	adds	r7, #28
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800114e:	b480      	push	{r7}
 8001150:	b083      	sub	sp, #12
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d101      	bne.n	8001166 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001162:	2301      	movs	r3, #1
 8001164:	e000      	b.n	8001168 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001166:	2300      	movs	r3, #0
}
 8001168:	4618      	mov	r0, r3
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001174:	b480      	push	{r7}
 8001176:	b087      	sub	sp, #28
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	3314      	adds	r3, #20
 8001184:	461a      	mov	r2, r3
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	0e5b      	lsrs	r3, r3, #25
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	4413      	add	r3, r2
 8001192:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	0d1b      	lsrs	r3, r3, #20
 800119c:	f003 031f 	and.w	r3, r3, #31
 80011a0:	2107      	movs	r1, #7
 80011a2:	fa01 f303 	lsl.w	r3, r1, r3
 80011a6:	43db      	mvns	r3, r3
 80011a8:	401a      	ands	r2, r3
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	0d1b      	lsrs	r3, r3, #20
 80011ae:	f003 031f 	and.w	r3, r3, #31
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	fa01 f303 	lsl.w	r3, r1, r3
 80011b8:	431a      	orrs	r2, r3
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80011be:	bf00      	nop
 80011c0:	371c      	adds	r7, #28
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
	...

080011cc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011e4:	43db      	mvns	r3, r3
 80011e6:	401a      	ands	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f003 0318 	and.w	r3, r3, #24
 80011ee:	4908      	ldr	r1, [pc, #32]	@ (8001210 <LL_ADC_SetChannelSingleDiff+0x44>)
 80011f0:	40d9      	lsrs	r1, r3
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	400b      	ands	r3, r1
 80011f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011fa:	431a      	orrs	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001202:	bf00      	nop
 8001204:	3714      	adds	r7, #20
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	0007ffff 	.word	0x0007ffff

08001214 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001224:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	6093      	str	r3, [r2, #8]
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001248:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800124c:	d101      	bne.n	8001252 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800124e:	2301      	movs	r3, #1
 8001250:	e000      	b.n	8001254 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001252:	2300      	movs	r3, #0
}
 8001254:	4618      	mov	r0, r3
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001270:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001274:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001298:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800129c:	d101      	bne.n	80012a2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800129e:	2301      	movs	r3, #1
 80012a0:	e000      	b.n	80012a4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80012a2:	2300      	movs	r3, #0
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80012c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80012c4:	f043 0201 	orr.w	r2, r3, #1
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80012cc:	bf00      	nop
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80012e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80012ec:	f043 0202 	orr.w	r2, r3, #2
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	2b01      	cmp	r3, #1
 8001312:	d101      	bne.n	8001318 <LL_ADC_IsEnabled+0x18>
 8001314:	2301      	movs	r3, #1
 8001316:	e000      	b.n	800131a <LL_ADC_IsEnabled+0x1a>
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001326:	b480      	push	{r7}
 8001328:	b083      	sub	sp, #12
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	2b02      	cmp	r3, #2
 8001338:	d101      	bne.n	800133e <LL_ADC_IsDisableOngoing+0x18>
 800133a:	2301      	movs	r3, #1
 800133c:	e000      	b.n	8001340 <LL_ADC_IsDisableOngoing+0x1a>
 800133e:	2300      	movs	r3, #0
}
 8001340:	4618      	mov	r0, r3
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800135c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001360:	f043 0204 	orr.w	r2, r3, #4
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001384:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001388:	f043 0210 	orr.w	r2, r3, #16
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f003 0304 	and.w	r3, r3, #4
 80013ac:	2b04      	cmp	r3, #4
 80013ae:	d101      	bne.n	80013b4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80013b0:	2301      	movs	r3, #1
 80013b2:	e000      	b.n	80013b6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80013c2:	b480      	push	{r7}
 80013c4:	b083      	sub	sp, #12
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80013d2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80013d6:	f043 0220 	orr.w	r2, r3, #32
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80013ea:	b480      	push	{r7}
 80013ec:	b083      	sub	sp, #12
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f003 0308 	and.w	r3, r3, #8
 80013fa:	2b08      	cmp	r3, #8
 80013fc:	d101      	bne.n	8001402 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80013fe:	2301      	movs	r3, #1
 8001400:	e000      	b.n	8001404 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b088      	sub	sp, #32
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001418:	2300      	movs	r3, #0
 800141a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800141c:	2300      	movs	r3, #0
 800141e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d101      	bne.n	800142a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e129      	b.n	800167e <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	691b      	ldr	r3, [r3, #16]
 800142e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001434:	2b00      	cmp	r3, #0
 8001436:	d109      	bne.n	800144c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f7ff fb71 	bl	8000b20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff fef1 	bl	8001238 <LL_ADC_IsDeepPowerDownEnabled>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d004      	beq.n	8001466 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff fed7 	bl	8001214 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff ff0c 	bl	8001288 <LL_ADC_IsInternalRegulatorEnabled>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d115      	bne.n	80014a2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff fef0 	bl	8001260 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001480:	4b81      	ldr	r3, [pc, #516]	@ (8001688 <HAL_ADC_Init+0x278>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	099b      	lsrs	r3, r3, #6
 8001486:	4a81      	ldr	r2, [pc, #516]	@ (800168c <HAL_ADC_Init+0x27c>)
 8001488:	fba2 2303 	umull	r2, r3, r2, r3
 800148c:	099b      	lsrs	r3, r3, #6
 800148e:	3301      	adds	r3, #1
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001494:	e002      	b.n	800149c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	3b01      	subs	r3, #1
 800149a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f9      	bne.n	8001496 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff feee 	bl	8001288 <LL_ADC_IsInternalRegulatorEnabled>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d10d      	bne.n	80014ce <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014b6:	f043 0210 	orr.w	r2, r3, #16
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014c2:	f043 0201 	orr.w	r2, r3, #1
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff ff62 	bl	800139c <LL_ADC_REG_IsConversionOngoing>
 80014d8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014de:	f003 0310 	and.w	r3, r3, #16
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	f040 80c2 	bne.w	800166c <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f040 80be 	bne.w	800166c <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014f4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80014f8:	f043 0202 	orr.w	r2, r3, #2
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff fefb 	bl	8001300 <LL_ADC_IsEnabled>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d10b      	bne.n	8001528 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001510:	485f      	ldr	r0, [pc, #380]	@ (8001690 <HAL_ADC_Init+0x280>)
 8001512:	f7ff fef5 	bl	8001300 <LL_ADC_IsEnabled>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d105      	bne.n	8001528 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	4619      	mov	r1, r3
 8001522:	485c      	ldr	r0, [pc, #368]	@ (8001694 <HAL_ADC_Init+0x284>)
 8001524:	f7ff fd38 	bl	8000f98 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	7e5b      	ldrb	r3, [r3, #25]
 800152c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001532:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001538:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800153e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001546:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001548:	4313      	orrs	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d106      	bne.n	8001564 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800155a:	3b01      	subs	r3, #1
 800155c:	045b      	lsls	r3, r3, #17
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4313      	orrs	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001568:	2b00      	cmp	r3, #0
 800156a:	d009      	beq.n	8001580 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001570:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001578:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4313      	orrs	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	68da      	ldr	r2, [r3, #12]
 8001586:	4b44      	ldr	r3, [pc, #272]	@ (8001698 <HAL_ADC_Init+0x288>)
 8001588:	4013      	ands	r3, r2
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	6812      	ldr	r2, [r2, #0]
 800158e:	69b9      	ldr	r1, [r7, #24]
 8001590:	430b      	orrs	r3, r1
 8001592:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff ff26 	bl	80013ea <LL_ADC_INJ_IsConversionOngoing>
 800159e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d140      	bne.n	8001628 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d13d      	bne.n	8001628 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	7e1b      	ldrb	r3, [r3, #24]
 80015b4:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80015b6:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80015be:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80015c0:	4313      	orrs	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80015ce:	f023 0306 	bic.w	r3, r3, #6
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	6812      	ldr	r2, [r2, #0]
 80015d6:	69b9      	ldr	r1, [r7, #24]
 80015d8:	430b      	orrs	r3, r1
 80015da:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d118      	bne.n	8001618 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80015f0:	f023 0304 	bic.w	r3, r3, #4
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80015fc:	4311      	orrs	r1, r2
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001602:	4311      	orrs	r1, r2
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001608:	430a      	orrs	r2, r1
 800160a:	431a      	orrs	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f042 0201 	orr.w	r2, r2, #1
 8001614:	611a      	str	r2, [r3, #16]
 8001616:	e007      	b.n	8001628 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	691a      	ldr	r2, [r3, #16]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f022 0201 	bic.w	r2, r2, #1
 8001626:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d10c      	bne.n	800164a <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001636:	f023 010f 	bic.w	r1, r3, #15
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	1e5a      	subs	r2, r3, #1
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	430a      	orrs	r2, r1
 8001646:	631a      	str	r2, [r3, #48]	@ 0x30
 8001648:	e007      	b.n	800165a <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 020f 	bic.w	r2, r2, #15
 8001658:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800165e:	f023 0303 	bic.w	r3, r3, #3
 8001662:	f043 0201 	orr.w	r2, r3, #1
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	659a      	str	r2, [r3, #88]	@ 0x58
 800166a:	e007      	b.n	800167c <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001670:	f043 0210 	orr.w	r2, r3, #16
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800167c:	7ffb      	ldrb	r3, [r7, #31]
}
 800167e:	4618      	mov	r0, r3
 8001680:	3720      	adds	r7, #32
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000000 	.word	0x20000000
 800168c:	053e2d63 	.word	0x053e2d63
 8001690:	50040000 	.word	0x50040000
 8001694:	50040300 	.word	0x50040300
 8001698:	fff0c007 	.word	0xfff0c007

0800169c <HAL_ADC_DeInit>:
  *         and is particularly interesting before entering MCU low-power modes.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d101      	bne.n	80016ae <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e10e      	b.n	80018cc <HAL_ADC_DeInit+0x230>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016b2:	f043 0202 	orr.w	r2, r3, #2
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Stop potential conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80016ba:	2103      	movs	r1, #3
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f000 ff99 	bl	80025f4 <ADC_ConversionStop>
 80016c2:	4603      	mov	r3, r0
 80016c4:	73fb      	strb	r3, [r7, #15]
  /* Flush register JSQR: reset the queue sequencer when injected             */
  /* queue sequencer is enabled and ADC disabled.                             */
  /* The software and hardware triggers of the injected sequence are both     */
  /* internally disabled just after the completion of the last valid          */
  /* injected sequence.                                                       */
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	68da      	ldr	r2, [r3, #12]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 80016d4:	60da      	str	r2, [r3, #12]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80016d6:	7bfb      	ldrb	r3, [r7, #15]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d10a      	bne.n	80016f2 <HAL_ADC_DeInit+0x56>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f001 f8cb 	bl	8002878 <ADC_Disable>
 80016e2:	4603      	mov	r3, r0
 80016e4:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80016e6:	7bfb      	ldrb	r3, [r7, #15]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d102      	bne.n	80016f2 <HAL_ADC_DeInit+0x56>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2201      	movs	r2, #1
 80016f0:	659a      	str	r2, [r3, #88]	@ 0x58
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	6812      	ldr	r2, [r2, #0]
 80016fc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001700:	f023 0307 	bic.w	r3, r3, #7
 8001704:	6053      	str	r3, [r2, #4]
                              ADC_IT_JEOS  | ADC_IT_JEOC |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800170e:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_JADSTP, ADC_CR_ADSTP, ADC_CR_JADSTART, ADC_CR_ADSTART,
     ADC_CR_ADCAL, ADC_CR_ADDIS and ADC_CR_ADEN are in access mode "read-set":
     no direct reset applicable.
     Update CR register to reset value where doable by software */
  CLEAR_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN | ADC_CR_ADCALDIF);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	689a      	ldr	r2, [r3, #8]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f022 42a0 	bic.w	r2, r2, #1342177280	@ 0x50000000
 800171e:	609a      	str	r2, [r3, #8]
  SET_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	689a      	ldr	r2, [r3, #8]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800172e:	609a      	str	r2, [r3, #8]

  /* Reset register CFGR */
  CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_FIELDS);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	68da      	ldr	r2, [r3, #12]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f002 2280 	and.w	r2, r2, #2147516416	@ 0x80008000
 800173e:	60da      	str	r2, [r3, #12]
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	68da      	ldr	r2, [r3, #12]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800174e:	60da      	str	r2, [r3, #12]

  /* Reset register CFGR2 */
  CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSM  | ADC_CFGR2_TROVS   | ADC_CFGR2_OVSS |
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	6812      	ldr	r2, [r2, #0]
 800175a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800175e:	f023 0307 	bic.w	r3, r3, #7
 8001762:	6113      	str	r3, [r2, #16]
            ADC_CFGR2_OVSR  | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSE);

  /* Reset register SMPR1 */
  CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_FIELDS);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	695a      	ldr	r2, [r3, #20]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001772:	615a      	str	r2, [r3, #20]

  /* Reset register SMPR2 */
  CLEAR_BIT(hadc->Instance->SMPR2, ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | ADC_SMPR2_SMP16 |
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	699a      	ldr	r2, [r3, #24]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f002 4278 	and.w	r2, r2, #4160749568	@ 0xf8000000
 8001782:	619a      	str	r2, [r3, #24]
            ADC_SMPR2_SMP15 | ADC_SMPR2_SMP14 | ADC_SMPR2_SMP13 |
            ADC_SMPR2_SMP12 | ADC_SMPR2_SMP11 | ADC_SMPR2_SMP10);

  /* Reset register TR1 */
  CLEAR_BIT(hadc->Instance->TR1, ADC_TR1_HT1 | ADC_TR1_LT1);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	6a1a      	ldr	r2, [r3, #32]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 8001792:	621a      	str	r2, [r3, #32]

  /* Reset register TR2 */
  CLEAR_BIT(hadc->Instance->TR2, ADC_TR2_HT2 | ADC_TR2_LT2);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f002 22ff 	and.w	r2, r2, #4278255360	@ 0xff00ff00
 80017a2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset register TR3 */
  CLEAR_BIT(hadc->Instance->TR3, ADC_TR3_HT3 | ADC_TR3_LT3);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f002 22ff 	and.w	r2, r2, #4278255360	@ 0xff00ff00
 80017b2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset register SQR1 */
  CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 |
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	4b45      	ldr	r3, [pc, #276]	@ (80018d4 <HAL_ADC_DeInit+0x238>)
 80017c0:	400b      	ands	r3, r1
 80017c2:	6313      	str	r3, [r2, #48]	@ 0x30
            ADC_SQR1_SQ1 | ADC_SQR1_L);

  /* Reset register SQR2 */
  CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 |
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	4b42      	ldr	r3, [pc, #264]	@ (80018d8 <HAL_ADC_DeInit+0x23c>)
 80017d0:	400b      	ands	r3, r1
 80017d2:	6353      	str	r3, [r2, #52]	@ 0x34
            ADC_SQR2_SQ6 | ADC_SQR2_SQ5);

  /* Reset register SQR3 */
  CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ14 | ADC_SQR3_SQ13 | ADC_SQR3_SQ12 |
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	4b3e      	ldr	r3, [pc, #248]	@ (80018d8 <HAL_ADC_DeInit+0x23c>)
 80017e0:	400b      	ands	r3, r1
 80017e2:	6393      	str	r3, [r2, #56]	@ 0x38
            ADC_SQR3_SQ11 | ADC_SQR3_SQ10);

  /* Reset register SQR4 */
  CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	6812      	ldr	r2, [r2, #0]
 80017ee:	f423 63fb 	bic.w	r3, r3, #2008	@ 0x7d8
 80017f2:	f023 0307 	bic.w	r3, r3, #7
 80017f6:	63d3      	str	r3, [r2, #60]	@ 0x3c

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register OFR1 */
  CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	4b36      	ldr	r3, [pc, #216]	@ (80018dc <HAL_ADC_DeInit+0x240>)
 8001804:	400b      	ands	r3, r1
 8001806:	6613      	str	r3, [r2, #96]	@ 0x60
  /* Reset register OFR2 */
  CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN | ADC_OFR2_OFFSET2_CH | ADC_OFR2_OFFSET2);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	4b32      	ldr	r3, [pc, #200]	@ (80018dc <HAL_ADC_DeInit+0x240>)
 8001814:	400b      	ands	r3, r1
 8001816:	6653      	str	r3, [r2, #100]	@ 0x64
  /* Reset register OFR3 */
  CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN | ADC_OFR3_OFFSET3_CH | ADC_OFR3_OFFSET3);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	4b2e      	ldr	r3, [pc, #184]	@ (80018dc <HAL_ADC_DeInit+0x240>)
 8001824:	400b      	ands	r3, r1
 8001826:	6693      	str	r3, [r2, #104]	@ 0x68
  /* Reset register OFR4 */
  CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN | ADC_OFR4_OFFSET4_CH | ADC_OFR4_OFFSET4);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	4b2a      	ldr	r3, [pc, #168]	@ (80018dc <HAL_ADC_DeInit+0x240>)
 8001834:	400b      	ands	r3, r1
 8001836:	66d3      	str	r3, [r2, #108]	@ 0x6c

  /* Reset registers JDR1, JDR2, JDR3, JDR4 */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register AWD2CR */
  CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	6812      	ldr	r2, [r2, #0]
 8001844:	0cdb      	lsrs	r3, r3, #19
 8001846:	04db      	lsls	r3, r3, #19
 8001848:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Reset register AWD3CR */
  CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	6812      	ldr	r2, [r2, #0]
 8001858:	0cdb      	lsrs	r3, r3, #19
 800185a:	04db      	lsls	r3, r3, #19
 800185c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4

  /* Reset register DIFSEL */
  CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_DIFSEL);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	6812      	ldr	r2, [r2, #0]
 800186c:	0cdb      	lsrs	r3, r3, #19
 800186e:	04db      	lsls	r3, r3, #19
 8001870:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Reset register CALFACT */
  CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f022 127f 	bic.w	r2, r2, #8323199	@ 0x7f007f
 8001884:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

  /* ========== Reset common ADC registers ========== */

  /* Software is allowed to change common parameters only when all the other
     ADCs are disabled.   */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001888:	4815      	ldr	r0, [pc, #84]	@ (80018e0 <HAL_ADC_DeInit+0x244>)
 800188a:	f7ff fd39 	bl	8001300 <LL_ADC_IsEnabled>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d10a      	bne.n	80018aa <HAL_ADC_DeInit+0x20e>
      - multimode related parameters (when this feature is available): MDMA,
        DMACFG, DELAY, DUAL (set by HAL_ADCEx_MultiModeConfigChannel() API)
      - internal measurement paths: Vbat, temperature sensor, Vref (set into
        HAL_ADC_ConfigChannel() or HAL_ADCEx_InjectedConfigChannel() )
    */
    ADC_CLEAR_COMMON_CONTROL_REGISTER(hadc);
 8001894:	4b13      	ldr	r3, [pc, #76]	@ (80018e4 <HAL_ADC_DeInit+0x248>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	4a12      	ldr	r2, [pc, #72]	@ (80018e4 <HAL_ADC_DeInit+0x248>)
 800189a:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 800189e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018a2:	6093      	str	r3, [r2, #8]

    /* DeInit the low level hardware */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware */
    HAL_ADC_MspDeInit(hadc);
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff f9ab 	bl	8000c00 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Reset injected channel configuration parameters */
  hadc->InjectionConfig.ContextQueue = 0;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	661a      	str	r2, [r3, #96]	@ 0x60
  hadc->InjectionConfig.ChannelCount = 0;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80018ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	e0820830 	.word	0xe0820830
 80018d8:	e0820820 	.word	0xe0820820
 80018dc:	03fff000 	.word	0x03fff000
 80018e0:	50040000 	.word	0x50040000
 80018e4:	50040300 	.word	0x50040300

080018e8 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff fd51 	bl	800139c <LL_ADC_REG_IsConversionOngoing>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f040 80a0 	bne.w	8001a42 <HAL_ADC_Start_IT+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001908:	2b01      	cmp	r3, #1
 800190a:	d101      	bne.n	8001910 <HAL_ADC_Start_IT+0x28>
 800190c:	2302      	movs	r3, #2
 800190e:	e09b      	b.n	8001a48 <HAL_ADC_Start_IT+0x160>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2201      	movs	r2, #1
 8001914:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f000 ff27 	bl	800276c <ADC_Enable>
 800191e:	4603      	mov	r3, r0
 8001920:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001922:	7bfb      	ldrb	r3, [r7, #15]
 8001924:	2b00      	cmp	r3, #0
 8001926:	f040 8087 	bne.w	8001a38 <HAL_ADC_Start_IT+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800192e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001932:	f023 0301 	bic.w	r3, r3, #1
 8001936:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001942:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d006      	beq.n	8001958 <HAL_ADC_Start_IT+0x70>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800194e:	f023 0206 	bic.w	r2, r3, #6
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001956:	e002      	b.n	800195e <HAL_ADC_Start_IT+0x76>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	221c      	movs	r2, #28
 8001964:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	685a      	ldr	r2, [r3, #4]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f022 021c 	bic.w	r2, r2, #28
 800197c:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	2b08      	cmp	r3, #8
 8001984:	d108      	bne.n	8001998 <HAL_ADC_Start_IT+0xb0>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	685a      	ldr	r2, [r3, #4]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f042 0208 	orr.w	r2, r2, #8
 8001994:	605a      	str	r2, [r3, #4]
          break;
 8001996:	e008      	b.n	80019aa <HAL_ADC_Start_IT+0xc2>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	685a      	ldr	r2, [r3, #4]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f042 0204 	orr.w	r2, r2, #4
 80019a6:	605a      	str	r2, [r3, #4]
          break;
 80019a8:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d107      	bne.n	80019c2 <HAL_ADC_Start_IT+0xda>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	685a      	ldr	r2, [r3, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f042 0210 	orr.w	r2, r2, #16
 80019c0:	605a      	str	r2, [r3, #4]
          }
        }
      }
#else
      /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d02d      	beq.n	8001a2c <HAL_ADC_Start_IT+0x144>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80019d8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Enable as well injected interruptions in case
         HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
         allows to start regular and injected conversions when JAUTO is
         set with a single call to HAL_ADC_Start_IT() */
        switch (hadc->Init.EOCSelection)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	695b      	ldr	r3, [r3, #20]
 80019e4:	2b08      	cmp	r3, #8
 80019e6:	d110      	bne.n	8001a0a <HAL_ADC_Start_IT+0x122>
        {
          case ADC_EOC_SEQ_CONV:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	685a      	ldr	r2, [r3, #4]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f022 0220 	bic.w	r2, r2, #32
 80019f6:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	685a      	ldr	r2, [r3, #4]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001a06:	605a      	str	r2, [r3, #4]
            break;
 8001a08:	e010      	b.n	8001a2c <HAL_ADC_Start_IT+0x144>
          /* case ADC_EOC_SINGLE_CONV */
          default:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001a18:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	685a      	ldr	r2, [r3, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f042 0220 	orr.w	r2, r2, #32
 8001a28:	605a      	str	r2, [r3, #4]
            break;
 8001a2a:	bf00      	nop
        }
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff fc8b 	bl	800134c <LL_ADC_REG_StartConversion>
 8001a36:	e006      	b.n	8001a46 <HAL_ADC_Start_IT+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8001a40:	e001      	b.n	8001a46 <HAL_ADC_Start_IT+0x15e>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001a42:	2302      	movs	r3, #2
 8001a44:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3710      	adds	r7, #16
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b088      	sub	sp, #32
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001a72:	2300      	movs	r3, #0
 8001a74:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d017      	beq.n	8001ac0 <HAL_ADC_IRQHandler+0x56>
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d012      	beq.n	8001ac0 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a9e:	f003 0310 	and.w	r3, r3, #16
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d105      	bne.n	8001ab2 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aaa:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f000 fff4 	bl	8002aa0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2202      	movs	r2, #2
 8001abe:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	f003 0304 	and.w	r3, r3, #4
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d004      	beq.n	8001ad4 <HAL_ADC_IRQHandler+0x6a>
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d109      	bne.n	8001ae8 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d05e      	beq.n	8001b9c <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	f003 0308 	and.w	r3, r3, #8
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d059      	beq.n	8001b9c <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aec:	f003 0310 	and.w	r3, r3, #16
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d105      	bne.n	8001b00 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001af8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff fae3 	bl	80010d0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d03e      	beq.n	8001b8e <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d135      	bne.n	8001b8e <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0308 	and.w	r3, r3, #8
 8001b2c:	2b08      	cmp	r3, #8
 8001b2e:	d12e      	bne.n	8001b8e <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff fc31 	bl	800139c <LL_ADC_REG_IsConversionOngoing>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d11a      	bne.n	8001b76 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	685a      	ldr	r2, [r3, #4]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f022 020c 	bic.w	r2, r2, #12
 8001b4e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b54:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	659a      	str	r2, [r3, #88]	@ 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d112      	bne.n	8001b8e <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b6c:	f043 0201 	orr.w	r2, r3, #1
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	659a      	str	r2, [r3, #88]	@ 0x58
 8001b74:	e00b      	b.n	8001b8e <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b7a:	f043 0210 	orr.w	r2, r3, #16
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b86:	f043 0201 	orr.w	r2, r3, #1
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7fe fd82 	bl	8000698 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	220c      	movs	r2, #12
 8001b9a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	f003 0320 	and.w	r3, r3, #32
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d004      	beq.n	8001bb0 <HAL_ADC_IRQHandler+0x146>
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	f003 0320 	and.w	r3, r3, #32
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d109      	bne.n	8001bc4 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d072      	beq.n	8001ca0 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d06d      	beq.n	8001ca0 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bc8:	f003 0310 	and.w	r3, r3, #16
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d105      	bne.n	8001bdc <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff fab4 	bl	800114e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001be6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff fa6f 	bl	80010d0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001bf2:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d047      	beq.n	8001c92 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d007      	beq.n	8001c1c <HAL_ADC_IRQHandler+0x1b2>
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d03f      	beq.n	8001c92 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d13a      	bne.n	8001c92 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c26:	2b40      	cmp	r3, #64	@ 0x40
 8001c28:	d133      	bne.n	8001c92 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d12e      	bne.n	8001c92 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff fbd6 	bl	80013ea <LL_ADC_INJ_IsConversionOngoing>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d11a      	bne.n	8001c7a <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	685a      	ldr	r2, [r3, #4]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001c52:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c58:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	659a      	str	r2, [r3, #88]	@ 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d112      	bne.n	8001c92 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c70:	f043 0201 	orr.w	r2, r3, #1
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	659a      	str	r2, [r3, #88]	@ 0x58
 8001c78:	e00b      	b.n	8001c92 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c7e:	f043 0210 	orr.w	r2, r3, #16
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	659a      	str	r2, [r3, #88]	@ 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c8a:	f043 0201 	orr.w	r2, r3, #1
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	65da      	str	r2, [r3, #92]	@ 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 fedc 	bl	8002a50 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2260      	movs	r2, #96	@ 0x60
 8001c9e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d011      	beq.n	8001cce <HAL_ADC_IRQHandler+0x264>
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d00c      	beq.n	8001cce <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cb8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f000 f886 	bl	8001dd2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2280      	movs	r2, #128	@ 0x80
 8001ccc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d012      	beq.n	8001cfe <HAL_ADC_IRQHandler+0x294>
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d00d      	beq.n	8001cfe <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ce6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 fec2 	bl	8002a78 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cfc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d012      	beq.n	8001d2e <HAL_ADC_IRQHandler+0x2c4>
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d00d      	beq.n	8001d2e <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d16:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 feb4 	bl	8002a8c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d2c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	f003 0310 	and.w	r3, r3, #16
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d02a      	beq.n	8001d8e <HAL_ADC_IRQHandler+0x324>
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	f003 0310 	and.w	r3, r3, #16
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d025      	beq.n	8001d8e <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d102      	bne.n	8001d50 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	61fb      	str	r3, [r7, #28]
 8001d4e:	e008      	b.n	8001d62 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d10e      	bne.n	8001d86 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d6c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d78:	f043 0202 	orr.w	r2, r3, #2
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f000 f830 	bl	8001de6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2210      	movs	r2, #16
 8001d8c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d018      	beq.n	8001dca <HAL_ADC_IRQHandler+0x360>
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d013      	beq.n	8001dca <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001db2:	f043 0208 	orr.w	r2, r3, #8
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001dc2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 fe4d 	bl	8002a64 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001dca:	bf00      	nop
 8001dcc:	3720      	adds	r7, #32
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b083      	sub	sp, #12
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
	...

08001dfc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b0b6      	sub	sp, #216	@ 0xd8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e06:	2300      	movs	r3, #0
 8001e08:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d101      	bne.n	8001e1e <HAL_ADC_ConfigChannel+0x22>
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	e3d5      	b.n	80025ca <HAL_ADC_ConfigChannel+0x7ce>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff fab6 	bl	800139c <LL_ADC_REG_IsConversionOngoing>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	f040 83ba 	bne.w	80025ac <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2b05      	cmp	r3, #5
 8001e46:	d824      	bhi.n	8001e92 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	3b02      	subs	r3, #2
 8001e4e:	2b03      	cmp	r3, #3
 8001e50:	d81b      	bhi.n	8001e8a <HAL_ADC_ConfigChannel+0x8e>
 8001e52:	a201      	add	r2, pc, #4	@ (adr r2, 8001e58 <HAL_ADC_ConfigChannel+0x5c>)
 8001e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e58:	08001e69 	.word	0x08001e69
 8001e5c:	08001e71 	.word	0x08001e71
 8001e60:	08001e79 	.word	0x08001e79
 8001e64:	08001e81 	.word	0x08001e81
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001e68:	230c      	movs	r3, #12
 8001e6a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001e6e:	e010      	b.n	8001e92 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001e70:	2312      	movs	r3, #18
 8001e72:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001e76:	e00c      	b.n	8001e92 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001e78:	2318      	movs	r3, #24
 8001e7a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001e7e:	e008      	b.n	8001e92 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001e80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001e88:	e003      	b.n	8001e92 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001e8a:	2306      	movs	r3, #6
 8001e8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001e90:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6818      	ldr	r0, [r3, #0]
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001ea0:	f7ff f929 	bl	80010f6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff fa77 	bl	800139c <LL_ADC_REG_IsConversionOngoing>
 8001eae:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff fa97 	bl	80013ea <LL_ADC_INJ_IsConversionOngoing>
 8001ebc:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ec0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f040 81bf 	bne.w	8002248 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001eca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f040 81ba 	bne.w	8002248 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001edc:	d10f      	bne.n	8001efe <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6818      	ldr	r0, [r3, #0]
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	4619      	mov	r1, r3
 8001eea:	f7ff f943 	bl	8001174 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff f8d7 	bl	80010aa <LL_ADC_SetSamplingTimeCommonConfig>
 8001efc:	e00e      	b.n	8001f1c <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6818      	ldr	r0, [r3, #0]
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	6819      	ldr	r1, [r3, #0]
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	f7ff f932 	bl	8001174 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2100      	movs	r1, #0
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff f8c7 	bl	80010aa <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	695a      	ldr	r2, [r3, #20]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	08db      	lsrs	r3, r3, #3
 8001f28:	f003 0303 	and.w	r3, r3, #3
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	d00a      	beq.n	8001f54 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6818      	ldr	r0, [r3, #0]
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	6919      	ldr	r1, [r3, #16]
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001f4e:	f7ff f857 	bl	8001000 <LL_ADC_SetOffset>
 8001f52:	e179      	b.n	8002248 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2100      	movs	r1, #0
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff f874 	bl	8001048 <LL_ADC_GetOffsetChannel>
 8001f60:	4603      	mov	r3, r0
 8001f62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d10a      	bne.n	8001f80 <HAL_ADC_ConfigChannel+0x184>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2100      	movs	r1, #0
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff f869 	bl	8001048 <LL_ADC_GetOffsetChannel>
 8001f76:	4603      	mov	r3, r0
 8001f78:	0e9b      	lsrs	r3, r3, #26
 8001f7a:	f003 021f 	and.w	r2, r3, #31
 8001f7e:	e01e      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x1c2>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2100      	movs	r1, #0
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff f85e 	bl	8001048 <LL_ADC_GetOffsetChannel>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001f96:	fa93 f3a3 	rbit	r3, r3
 8001f9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001fa2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001fa6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8001fae:	2320      	movs	r3, #32
 8001fb0:	e004      	b.n	8001fbc <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8001fb2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001fb6:	fab3 f383 	clz	r3, r3
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d105      	bne.n	8001fd6 <HAL_ADC_ConfigChannel+0x1da>
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	0e9b      	lsrs	r3, r3, #26
 8001fd0:	f003 031f 	and.w	r3, r3, #31
 8001fd4:	e018      	b.n	8002008 <HAL_ADC_ConfigChannel+0x20c>
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001fe2:	fa93 f3a3 	rbit	r3, r3
 8001fe6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001fea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001fee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001ff2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8001ffa:	2320      	movs	r3, #32
 8001ffc:	e004      	b.n	8002008 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8001ffe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002002:	fab3 f383 	clz	r3, r3
 8002006:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002008:	429a      	cmp	r2, r3
 800200a:	d106      	bne.n	800201a <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2200      	movs	r2, #0
 8002012:	2100      	movs	r1, #0
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff f82d 	bl	8001074 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2101      	movs	r1, #1
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff f811 	bl	8001048 <LL_ADC_GetOffsetChannel>
 8002026:	4603      	mov	r3, r0
 8002028:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800202c:	2b00      	cmp	r3, #0
 800202e:	d10a      	bne.n	8002046 <HAL_ADC_ConfigChannel+0x24a>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2101      	movs	r1, #1
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff f806 	bl	8001048 <LL_ADC_GetOffsetChannel>
 800203c:	4603      	mov	r3, r0
 800203e:	0e9b      	lsrs	r3, r3, #26
 8002040:	f003 021f 	and.w	r2, r3, #31
 8002044:	e01e      	b.n	8002084 <HAL_ADC_ConfigChannel+0x288>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2101      	movs	r1, #1
 800204c:	4618      	mov	r0, r3
 800204e:	f7fe fffb 	bl	8001048 <LL_ADC_GetOffsetChannel>
 8002052:	4603      	mov	r3, r0
 8002054:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002058:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800205c:	fa93 f3a3 	rbit	r3, r3
 8002060:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002064:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002068:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800206c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002074:	2320      	movs	r3, #32
 8002076:	e004      	b.n	8002082 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002078:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800207c:	fab3 f383 	clz	r3, r3
 8002080:	b2db      	uxtb	r3, r3
 8002082:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800208c:	2b00      	cmp	r3, #0
 800208e:	d105      	bne.n	800209c <HAL_ADC_ConfigChannel+0x2a0>
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	0e9b      	lsrs	r3, r3, #26
 8002096:	f003 031f 	and.w	r3, r3, #31
 800209a:	e018      	b.n	80020ce <HAL_ADC_ConfigChannel+0x2d2>
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80020a8:	fa93 f3a3 	rbit	r3, r3
 80020ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80020b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80020b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80020b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80020c0:	2320      	movs	r3, #32
 80020c2:	e004      	b.n	80020ce <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80020c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80020c8:	fab3 f383 	clz	r3, r3
 80020cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d106      	bne.n	80020e0 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2200      	movs	r2, #0
 80020d8:	2101      	movs	r1, #1
 80020da:	4618      	mov	r0, r3
 80020dc:	f7fe ffca 	bl	8001074 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2102      	movs	r1, #2
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7fe ffae 	bl	8001048 <LL_ADC_GetOffsetChannel>
 80020ec:	4603      	mov	r3, r0
 80020ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10a      	bne.n	800210c <HAL_ADC_ConfigChannel+0x310>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2102      	movs	r1, #2
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7fe ffa3 	bl	8001048 <LL_ADC_GetOffsetChannel>
 8002102:	4603      	mov	r3, r0
 8002104:	0e9b      	lsrs	r3, r3, #26
 8002106:	f003 021f 	and.w	r2, r3, #31
 800210a:	e01e      	b.n	800214a <HAL_ADC_ConfigChannel+0x34e>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2102      	movs	r1, #2
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe ff98 	bl	8001048 <LL_ADC_GetOffsetChannel>
 8002118:	4603      	mov	r3, r0
 800211a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002122:	fa93 f3a3 	rbit	r3, r3
 8002126:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800212a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800212e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002132:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 800213a:	2320      	movs	r3, #32
 800213c:	e004      	b.n	8002148 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 800213e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002142:	fab3 f383 	clz	r3, r3
 8002146:	b2db      	uxtb	r3, r3
 8002148:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002152:	2b00      	cmp	r3, #0
 8002154:	d105      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x366>
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	0e9b      	lsrs	r3, r3, #26
 800215c:	f003 031f 	and.w	r3, r3, #31
 8002160:	e014      	b.n	800218c <HAL_ADC_ConfigChannel+0x390>
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002168:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800216a:	fa93 f3a3 	rbit	r3, r3
 800216e:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002170:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002172:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002176:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800217e:	2320      	movs	r3, #32
 8002180:	e004      	b.n	800218c <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8002182:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002186:	fab3 f383 	clz	r3, r3
 800218a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800218c:	429a      	cmp	r2, r3
 800218e:	d106      	bne.n	800219e <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2200      	movs	r2, #0
 8002196:	2102      	movs	r1, #2
 8002198:	4618      	mov	r0, r3
 800219a:	f7fe ff6b 	bl	8001074 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2103      	movs	r1, #3
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7fe ff4f 	bl	8001048 <LL_ADC_GetOffsetChannel>
 80021aa:	4603      	mov	r3, r0
 80021ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d10a      	bne.n	80021ca <HAL_ADC_ConfigChannel+0x3ce>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2103      	movs	r1, #3
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7fe ff44 	bl	8001048 <LL_ADC_GetOffsetChannel>
 80021c0:	4603      	mov	r3, r0
 80021c2:	0e9b      	lsrs	r3, r3, #26
 80021c4:	f003 021f 	and.w	r2, r3, #31
 80021c8:	e017      	b.n	80021fa <HAL_ADC_ConfigChannel+0x3fe>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2103      	movs	r1, #3
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7fe ff39 	bl	8001048 <LL_ADC_GetOffsetChannel>
 80021d6:	4603      	mov	r3, r0
 80021d8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80021dc:	fa93 f3a3 	rbit	r3, r3
 80021e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80021e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021e4:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80021e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d101      	bne.n	80021f0 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80021ec:	2320      	movs	r3, #32
 80021ee:	e003      	b.n	80021f8 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80021f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80021f2:	fab3 f383 	clz	r3, r3
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002202:	2b00      	cmp	r3, #0
 8002204:	d105      	bne.n	8002212 <HAL_ADC_ConfigChannel+0x416>
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	0e9b      	lsrs	r3, r3, #26
 800220c:	f003 031f 	and.w	r3, r3, #31
 8002210:	e011      	b.n	8002236 <HAL_ADC_ConfigChannel+0x43a>
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002218:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800221a:	fa93 f3a3 	rbit	r3, r3
 800221e:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002220:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002222:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002224:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 800222a:	2320      	movs	r3, #32
 800222c:	e003      	b.n	8002236 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 800222e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002230:	fab3 f383 	clz	r3, r3
 8002234:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002236:	429a      	cmp	r2, r3
 8002238:	d106      	bne.n	8002248 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2200      	movs	r2, #0
 8002240:	2103      	movs	r1, #3
 8002242:	4618      	mov	r0, r3
 8002244:	f7fe ff16 	bl	8001074 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff f857 	bl	8001300 <LL_ADC_IsEnabled>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	f040 813f 	bne.w	80024d8 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6818      	ldr	r0, [r3, #0]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	6819      	ldr	r1, [r3, #0]
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	461a      	mov	r2, r3
 8002268:	f7fe ffb0 	bl	80011cc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	4a8e      	ldr	r2, [pc, #568]	@ (80024ac <HAL_ADC_ConfigChannel+0x6b0>)
 8002272:	4293      	cmp	r3, r2
 8002274:	f040 8130 	bne.w	80024d8 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002284:	2b00      	cmp	r3, #0
 8002286:	d10b      	bne.n	80022a0 <HAL_ADC_ConfigChannel+0x4a4>
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	0e9b      	lsrs	r3, r3, #26
 800228e:	3301      	adds	r3, #1
 8002290:	f003 031f 	and.w	r3, r3, #31
 8002294:	2b09      	cmp	r3, #9
 8002296:	bf94      	ite	ls
 8002298:	2301      	movls	r3, #1
 800229a:	2300      	movhi	r3, #0
 800229c:	b2db      	uxtb	r3, r3
 800229e:	e019      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x4d8>
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80022a8:	fa93 f3a3 	rbit	r3, r3
 80022ac:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80022ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80022b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 80022b8:	2320      	movs	r3, #32
 80022ba:	e003      	b.n	80022c4 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80022bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022be:	fab3 f383 	clz	r3, r3
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	3301      	adds	r3, #1
 80022c6:	f003 031f 	and.w	r3, r3, #31
 80022ca:	2b09      	cmp	r3, #9
 80022cc:	bf94      	ite	ls
 80022ce:	2301      	movls	r3, #1
 80022d0:	2300      	movhi	r3, #0
 80022d2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d079      	beq.n	80023cc <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d107      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x4f8>
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	0e9b      	lsrs	r3, r3, #26
 80022ea:	3301      	adds	r3, #1
 80022ec:	069b      	lsls	r3, r3, #26
 80022ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022f2:	e015      	b.n	8002320 <HAL_ADC_ConfigChannel+0x524>
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80022fc:	fa93 f3a3 	rbit	r3, r3
 8002300:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002302:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002304:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002306:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 800230c:	2320      	movs	r3, #32
 800230e:	e003      	b.n	8002318 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002310:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002312:	fab3 f383 	clz	r3, r3
 8002316:	b2db      	uxtb	r3, r3
 8002318:	3301      	adds	r3, #1
 800231a:	069b      	lsls	r3, r3, #26
 800231c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002328:	2b00      	cmp	r3, #0
 800232a:	d109      	bne.n	8002340 <HAL_ADC_ConfigChannel+0x544>
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	0e9b      	lsrs	r3, r3, #26
 8002332:	3301      	adds	r3, #1
 8002334:	f003 031f 	and.w	r3, r3, #31
 8002338:	2101      	movs	r1, #1
 800233a:	fa01 f303 	lsl.w	r3, r1, r3
 800233e:	e017      	b.n	8002370 <HAL_ADC_ConfigChannel+0x574>
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002346:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002348:	fa93 f3a3 	rbit	r3, r3
 800234c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800234e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002350:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002352:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002354:	2b00      	cmp	r3, #0
 8002356:	d101      	bne.n	800235c <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002358:	2320      	movs	r3, #32
 800235a:	e003      	b.n	8002364 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 800235c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800235e:	fab3 f383 	clz	r3, r3
 8002362:	b2db      	uxtb	r3, r3
 8002364:	3301      	adds	r3, #1
 8002366:	f003 031f 	and.w	r3, r3, #31
 800236a:	2101      	movs	r1, #1
 800236c:	fa01 f303 	lsl.w	r3, r1, r3
 8002370:	ea42 0103 	orr.w	r1, r2, r3
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800237c:	2b00      	cmp	r3, #0
 800237e:	d10a      	bne.n	8002396 <HAL_ADC_ConfigChannel+0x59a>
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	0e9b      	lsrs	r3, r3, #26
 8002386:	3301      	adds	r3, #1
 8002388:	f003 021f 	and.w	r2, r3, #31
 800238c:	4613      	mov	r3, r2
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	4413      	add	r3, r2
 8002392:	051b      	lsls	r3, r3, #20
 8002394:	e018      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x5cc>
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800239e:	fa93 f3a3 	rbit	r3, r3
 80023a2:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80023a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80023a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 80023ae:	2320      	movs	r3, #32
 80023b0:	e003      	b.n	80023ba <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 80023b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023b4:	fab3 f383 	clz	r3, r3
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	3301      	adds	r3, #1
 80023bc:	f003 021f 	and.w	r2, r3, #31
 80023c0:	4613      	mov	r3, r2
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	4413      	add	r3, r2
 80023c6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023c8:	430b      	orrs	r3, r1
 80023ca:	e080      	b.n	80024ce <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d107      	bne.n	80023e8 <HAL_ADC_ConfigChannel+0x5ec>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	0e9b      	lsrs	r3, r3, #26
 80023de:	3301      	adds	r3, #1
 80023e0:	069b      	lsls	r3, r3, #26
 80023e2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023e6:	e015      	b.n	8002414 <HAL_ADC_ConfigChannel+0x618>
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023f0:	fa93 f3a3 	rbit	r3, r3
 80023f4:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80023f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80023fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d101      	bne.n	8002404 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002400:	2320      	movs	r3, #32
 8002402:	e003      	b.n	800240c <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002406:	fab3 f383 	clz	r3, r3
 800240a:	b2db      	uxtb	r3, r3
 800240c:	3301      	adds	r3, #1
 800240e:	069b      	lsls	r3, r3, #26
 8002410:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800241c:	2b00      	cmp	r3, #0
 800241e:	d109      	bne.n	8002434 <HAL_ADC_ConfigChannel+0x638>
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	0e9b      	lsrs	r3, r3, #26
 8002426:	3301      	adds	r3, #1
 8002428:	f003 031f 	and.w	r3, r3, #31
 800242c:	2101      	movs	r1, #1
 800242e:	fa01 f303 	lsl.w	r3, r1, r3
 8002432:	e017      	b.n	8002464 <HAL_ADC_ConfigChannel+0x668>
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	fa93 f3a3 	rbit	r3, r3
 8002440:	61bb      	str	r3, [r7, #24]
  return result;
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002446:	6a3b      	ldr	r3, [r7, #32]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d101      	bne.n	8002450 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 800244c:	2320      	movs	r3, #32
 800244e:	e003      	b.n	8002458 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002450:	6a3b      	ldr	r3, [r7, #32]
 8002452:	fab3 f383 	clz	r3, r3
 8002456:	b2db      	uxtb	r3, r3
 8002458:	3301      	adds	r3, #1
 800245a:	f003 031f 	and.w	r3, r3, #31
 800245e:	2101      	movs	r1, #1
 8002460:	fa01 f303 	lsl.w	r3, r1, r3
 8002464:	ea42 0103 	orr.w	r1, r2, r3
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002470:	2b00      	cmp	r3, #0
 8002472:	d10d      	bne.n	8002490 <HAL_ADC_ConfigChannel+0x694>
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	0e9b      	lsrs	r3, r3, #26
 800247a:	3301      	adds	r3, #1
 800247c:	f003 021f 	and.w	r2, r3, #31
 8002480:	4613      	mov	r3, r2
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	4413      	add	r3, r2
 8002486:	3b1e      	subs	r3, #30
 8002488:	051b      	lsls	r3, r3, #20
 800248a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800248e:	e01d      	b.n	80024cc <HAL_ADC_ConfigChannel+0x6d0>
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	fa93 f3a3 	rbit	r3, r3
 800249c:	60fb      	str	r3, [r7, #12]
  return result;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d103      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80024a8:	2320      	movs	r3, #32
 80024aa:	e005      	b.n	80024b8 <HAL_ADC_ConfigChannel+0x6bc>
 80024ac:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	fab3 f383 	clz	r3, r3
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	3301      	adds	r3, #1
 80024ba:	f003 021f 	and.w	r2, r3, #31
 80024be:	4613      	mov	r3, r2
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	4413      	add	r3, r2
 80024c4:	3b1e      	subs	r3, #30
 80024c6:	051b      	lsls	r3, r3, #20
 80024c8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024cc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024d2:	4619      	mov	r1, r3
 80024d4:	f7fe fe4e 	bl	8001174 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	4b3d      	ldr	r3, [pc, #244]	@ (80025d4 <HAL_ADC_ConfigChannel+0x7d8>)
 80024de:	4013      	ands	r3, r2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d06c      	beq.n	80025be <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024e4:	483c      	ldr	r0, [pc, #240]	@ (80025d8 <HAL_ADC_ConfigChannel+0x7dc>)
 80024e6:	f7fe fd7d 	bl	8000fe4 <LL_ADC_GetCommonPathInternalCh>
 80024ea:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a3a      	ldr	r2, [pc, #232]	@ (80025dc <HAL_ADC_ConfigChannel+0x7e0>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d127      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80024f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80024fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d121      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a35      	ldr	r2, [pc, #212]	@ (80025e0 <HAL_ADC_ConfigChannel+0x7e4>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d157      	bne.n	80025be <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800250e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002512:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002516:	4619      	mov	r1, r3
 8002518:	482f      	ldr	r0, [pc, #188]	@ (80025d8 <HAL_ADC_ConfigChannel+0x7dc>)
 800251a:	f7fe fd50 	bl	8000fbe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800251e:	4b31      	ldr	r3, [pc, #196]	@ (80025e4 <HAL_ADC_ConfigChannel+0x7e8>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	099b      	lsrs	r3, r3, #6
 8002524:	4a30      	ldr	r2, [pc, #192]	@ (80025e8 <HAL_ADC_ConfigChannel+0x7ec>)
 8002526:	fba2 2303 	umull	r2, r3, r2, r3
 800252a:	099b      	lsrs	r3, r3, #6
 800252c:	1c5a      	adds	r2, r3, #1
 800252e:	4613      	mov	r3, r2
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	4413      	add	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002538:	e002      	b.n	8002540 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	3b01      	subs	r3, #1
 800253e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1f9      	bne.n	800253a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002546:	e03a      	b.n	80025be <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a27      	ldr	r2, [pc, #156]	@ (80025ec <HAL_ADC_ConfigChannel+0x7f0>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d113      	bne.n	800257a <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002552:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002556:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10d      	bne.n	800257a <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a1f      	ldr	r2, [pc, #124]	@ (80025e0 <HAL_ADC_ConfigChannel+0x7e4>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d12a      	bne.n	80025be <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002568:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800256c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002570:	4619      	mov	r1, r3
 8002572:	4819      	ldr	r0, [pc, #100]	@ (80025d8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002574:	f7fe fd23 	bl	8000fbe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002578:	e021      	b.n	80025be <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a1c      	ldr	r2, [pc, #112]	@ (80025f0 <HAL_ADC_ConfigChannel+0x7f4>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d11c      	bne.n	80025be <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002584:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002588:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d116      	bne.n	80025be <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a12      	ldr	r2, [pc, #72]	@ (80025e0 <HAL_ADC_ConfigChannel+0x7e4>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d111      	bne.n	80025be <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800259a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800259e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80025a2:	4619      	mov	r1, r3
 80025a4:	480c      	ldr	r0, [pc, #48]	@ (80025d8 <HAL_ADC_ConfigChannel+0x7dc>)
 80025a6:	f7fe fd0a 	bl	8000fbe <LL_ADC_SetCommonPathInternalCh>
 80025aa:	e008      	b.n	80025be <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025b0:	f043 0220 	orr.w	r2, r3, #32
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80025c6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	37d8      	adds	r7, #216	@ 0xd8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	80080000 	.word	0x80080000
 80025d8:	50040300 	.word	0x50040300
 80025dc:	c7520000 	.word	0xc7520000
 80025e0:	50040000 	.word	0x50040000
 80025e4:	20000000 	.word	0x20000000
 80025e8:	053e2d63 	.word	0x053e2d63
 80025ec:	cb840000 	.word	0xcb840000
 80025f0:	80000001 	.word	0x80000001

080025f4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b088      	sub	sp, #32
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80025fe:	2300      	movs	r3, #0
 8002600:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f7fe fec6 	bl	800139c <LL_ADC_REG_IsConversionOngoing>
 8002610:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f7fe fee7 	bl	80013ea <LL_ADC_INJ_IsConversionOngoing>
 800261c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d103      	bne.n	800262c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2b00      	cmp	r3, #0
 8002628:	f000 8098 	beq.w	800275c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d02a      	beq.n	8002690 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	7e5b      	ldrb	r3, [r3, #25]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d126      	bne.n	8002690 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	7e1b      	ldrb	r3, [r3, #24]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d122      	bne.n	8002690 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800264a:	2301      	movs	r3, #1
 800264c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800264e:	e014      	b.n	800267a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	4a45      	ldr	r2, [pc, #276]	@ (8002768 <ADC_ConversionStop+0x174>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d90d      	bls.n	8002674 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800265c:	f043 0210 	orr.w	r2, r3, #16
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002668:	f043 0201 	orr.w	r2, r3, #1
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e074      	b.n	800275e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	3301      	adds	r3, #1
 8002678:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002684:	2b40      	cmp	r3, #64	@ 0x40
 8002686:	d1e3      	bne.n	8002650 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2240      	movs	r2, #64	@ 0x40
 800268e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	2b02      	cmp	r3, #2
 8002694:	d014      	beq.n	80026c0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f7fe fe7e 	bl	800139c <LL_ADC_REG_IsConversionOngoing>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00c      	beq.n	80026c0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7fe fe3b 	bl	8001326 <LL_ADC_IsDisableOngoing>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d104      	bne.n	80026c0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7fe fe5a 	bl	8001374 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d014      	beq.n	80026f0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7fe fe8d 	bl	80013ea <LL_ADC_INJ_IsConversionOngoing>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00c      	beq.n	80026f0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fe fe23 	bl	8001326 <LL_ADC_IsDisableOngoing>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d104      	bne.n	80026f0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7fe fe69 	bl	80013c2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d005      	beq.n	8002702 <ADC_ConversionStop+0x10e>
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	2b03      	cmp	r3, #3
 80026fa:	d105      	bne.n	8002708 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80026fc:	230c      	movs	r3, #12
 80026fe:	617b      	str	r3, [r7, #20]
        break;
 8002700:	e005      	b.n	800270e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002702:	2308      	movs	r3, #8
 8002704:	617b      	str	r3, [r7, #20]
        break;
 8002706:	e002      	b.n	800270e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002708:	2304      	movs	r3, #4
 800270a:	617b      	str	r3, [r7, #20]
        break;
 800270c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800270e:	f7fe fc37 	bl	8000f80 <HAL_GetTick>
 8002712:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002714:	e01b      	b.n	800274e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002716:	f7fe fc33 	bl	8000f80 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b05      	cmp	r3, #5
 8002722:	d914      	bls.n	800274e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	689a      	ldr	r2, [r3, #8]
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	4013      	ands	r3, r2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00d      	beq.n	800274e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002736:	f043 0210 	orr.w	r2, r3, #16
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002742:	f043 0201 	orr.w	r2, r3, #1
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e007      	b.n	800275e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	689a      	ldr	r2, [r3, #8]
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	4013      	ands	r3, r2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1dc      	bne.n	8002716 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3720      	adds	r7, #32
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	a33fffff 	.word	0xa33fffff

0800276c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002774:	2300      	movs	r3, #0
 8002776:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4618      	mov	r0, r3
 800277e:	f7fe fdbf 	bl	8001300 <LL_ADC_IsEnabled>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d169      	bne.n	800285c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	689a      	ldr	r2, [r3, #8]
 800278e:	4b36      	ldr	r3, [pc, #216]	@ (8002868 <ADC_Enable+0xfc>)
 8002790:	4013      	ands	r3, r2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00d      	beq.n	80027b2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800279a:	f043 0210 	orr.w	r2, r3, #16
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027a6:	f043 0201 	orr.w	r2, r3, #1
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e055      	b.n	800285e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7fe fd7a 	bl	80012b0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80027bc:	482b      	ldr	r0, [pc, #172]	@ (800286c <ADC_Enable+0x100>)
 80027be:	f7fe fc11 	bl	8000fe4 <LL_ADC_GetCommonPathInternalCh>
 80027c2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80027c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d013      	beq.n	80027f4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027cc:	4b28      	ldr	r3, [pc, #160]	@ (8002870 <ADC_Enable+0x104>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	099b      	lsrs	r3, r3, #6
 80027d2:	4a28      	ldr	r2, [pc, #160]	@ (8002874 <ADC_Enable+0x108>)
 80027d4:	fba2 2303 	umull	r2, r3, r2, r3
 80027d8:	099b      	lsrs	r3, r3, #6
 80027da:	1c5a      	adds	r2, r3, #1
 80027dc:	4613      	mov	r3, r2
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	4413      	add	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80027e6:	e002      	b.n	80027ee <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	3b01      	subs	r3, #1
 80027ec:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1f9      	bne.n	80027e8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80027f4:	f7fe fbc4 	bl	8000f80 <HAL_GetTick>
 80027f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027fa:	e028      	b.n	800284e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4618      	mov	r0, r3
 8002802:	f7fe fd7d 	bl	8001300 <LL_ADC_IsEnabled>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d104      	bne.n	8002816 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4618      	mov	r0, r3
 8002812:	f7fe fd4d 	bl	80012b0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002816:	f7fe fbb3 	bl	8000f80 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d914      	bls.n	800284e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b01      	cmp	r3, #1
 8002830:	d00d      	beq.n	800284e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002836:	f043 0210 	orr.w	r2, r3, #16
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002842:	f043 0201 	orr.w	r2, r3, #1
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e007      	b.n	800285e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	2b01      	cmp	r3, #1
 800285a:	d1cf      	bne.n	80027fc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	8000003f 	.word	0x8000003f
 800286c:	50040300 	.word	0x50040300
 8002870:	20000000 	.word	0x20000000
 8002874:	053e2d63 	.word	0x053e2d63

08002878 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4618      	mov	r0, r3
 8002886:	f7fe fd4e 	bl	8001326 <LL_ADC_IsDisableOngoing>
 800288a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4618      	mov	r0, r3
 8002892:	f7fe fd35 	bl	8001300 <LL_ADC_IsEnabled>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d047      	beq.n	800292c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d144      	bne.n	800292c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f003 030d 	and.w	r3, r3, #13
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d10c      	bne.n	80028ca <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7fe fd0f 	bl	80012d8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2203      	movs	r2, #3
 80028c0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80028c2:	f7fe fb5d 	bl	8000f80 <HAL_GetTick>
 80028c6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80028c8:	e029      	b.n	800291e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ce:	f043 0210 	orr.w	r2, r3, #16
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028da:	f043 0201 	orr.w	r2, r3, #1
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e023      	b.n	800292e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80028e6:	f7fe fb4b 	bl	8000f80 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d914      	bls.n	800291e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00d      	beq.n	800291e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002906:	f043 0210 	orr.w	r2, r3, #16
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002912:	f043 0201 	orr.w	r2, r3, #1
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e007      	b.n	800292e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1dc      	bne.n	80028e6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <LL_ADC_StartCalibration>:
{
 8002936:	b480      	push	{r7}
 8002938:	b083      	sub	sp, #12
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
 800293e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002948:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002952:	4313      	orrs	r3, r2
 8002954:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	609a      	str	r2, [r3, #8]
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <LL_ADC_IsCalibrationOnGoing>:
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002978:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800297c:	d101      	bne.n	8002982 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800297e:	2301      	movs	r3, #1
 8002980:	e000      	b.n	8002984 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800299a:	2300      	movs	r3, #0
 800299c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d101      	bne.n	80029ac <HAL_ADCEx_Calibration_Start+0x1c>
 80029a8:	2302      	movs	r3, #2
 80029aa:	e04d      	b.n	8002a48 <HAL_ADCEx_Calibration_Start+0xb8>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f7ff ff5f 	bl	8002878 <ADC_Disable>
 80029ba:	4603      	mov	r3, r0
 80029bc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80029be:	7bfb      	ldrb	r3, [r7, #15]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d136      	bne.n	8002a32 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029c8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80029cc:	f023 0302 	bic.w	r3, r3, #2
 80029d0:	f043 0202 	orr.w	r2, r3, #2
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6839      	ldr	r1, [r7, #0]
 80029de:	4618      	mov	r0, r3
 80029e0:	f7ff ffa9 	bl	8002936 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80029e4:	e014      	b.n	8002a10 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	3301      	adds	r3, #1
 80029ea:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 80029f2:	d30d      	bcc.n	8002a10 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029f8:	f023 0312 	bic.w	r3, r3, #18
 80029fc:	f043 0210 	orr.w	r2, r3, #16
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e01b      	b.n	8002a48 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff ffa7 	bl	8002968 <LL_ADC_IsCalibrationOnGoing>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1e2      	bne.n	80029e6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a24:	f023 0303 	bic.w	r3, r3, #3
 8002a28:	f043 0201 	orr.w	r2, r3, #1
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002a30:	e005      	b.n	8002a3e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a36:	f043 0210 	orr.w	r2, r3, #16
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8002af8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aca:	68ba      	ldr	r2, [r7, #8]
 8002acc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002adc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ae0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ae4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ae6:	4a04      	ldr	r2, [pc, #16]	@ (8002af8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	60d3      	str	r3, [r2, #12]
}
 8002aec:	bf00      	nop
 8002aee:	3714      	adds	r7, #20
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	e000ed00 	.word	0xe000ed00

08002afc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b00:	4b04      	ldr	r3, [pc, #16]	@ (8002b14 <__NVIC_GetPriorityGrouping+0x18>)
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	0a1b      	lsrs	r3, r3, #8
 8002b06:	f003 0307 	and.w	r3, r3, #7
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr
 8002b14:	e000ed00 	.word	0xe000ed00

08002b18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	4603      	mov	r3, r0
 8002b20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	db0b      	blt.n	8002b42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b2a:	79fb      	ldrb	r3, [r7, #7]
 8002b2c:	f003 021f 	and.w	r2, r3, #31
 8002b30:	4907      	ldr	r1, [pc, #28]	@ (8002b50 <__NVIC_EnableIRQ+0x38>)
 8002b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b36:	095b      	lsrs	r3, r3, #5
 8002b38:	2001      	movs	r0, #1
 8002b3a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	e000e100 	.word	0xe000e100

08002b54 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	db12      	blt.n	8002b8c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b66:	79fb      	ldrb	r3, [r7, #7]
 8002b68:	f003 021f 	and.w	r2, r3, #31
 8002b6c:	490a      	ldr	r1, [pc, #40]	@ (8002b98 <__NVIC_DisableIRQ+0x44>)
 8002b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b72:	095b      	lsrs	r3, r3, #5
 8002b74:	2001      	movs	r0, #1
 8002b76:	fa00 f202 	lsl.w	r2, r0, r2
 8002b7a:	3320      	adds	r3, #32
 8002b7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002b80:	f3bf 8f4f 	dsb	sy
}
 8002b84:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002b86:	f3bf 8f6f 	isb	sy
}
 8002b8a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	e000e100 	.word	0xe000e100

08002b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	6039      	str	r1, [r7, #0]
 8002ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	db0a      	blt.n	8002bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	490c      	ldr	r1, [pc, #48]	@ (8002be8 <__NVIC_SetPriority+0x4c>)
 8002bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bba:	0112      	lsls	r2, r2, #4
 8002bbc:	b2d2      	uxtb	r2, r2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bc4:	e00a      	b.n	8002bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	b2da      	uxtb	r2, r3
 8002bca:	4908      	ldr	r1, [pc, #32]	@ (8002bec <__NVIC_SetPriority+0x50>)
 8002bcc:	79fb      	ldrb	r3, [r7, #7]
 8002bce:	f003 030f 	and.w	r3, r3, #15
 8002bd2:	3b04      	subs	r3, #4
 8002bd4:	0112      	lsls	r2, r2, #4
 8002bd6:	b2d2      	uxtb	r2, r2
 8002bd8:	440b      	add	r3, r1
 8002bda:	761a      	strb	r2, [r3, #24]
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	e000e100 	.word	0xe000e100
 8002bec:	e000ed00 	.word	0xe000ed00

08002bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b089      	sub	sp, #36	@ 0x24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	f1c3 0307 	rsb	r3, r3, #7
 8002c0a:	2b04      	cmp	r3, #4
 8002c0c:	bf28      	it	cs
 8002c0e:	2304      	movcs	r3, #4
 8002c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	3304      	adds	r3, #4
 8002c16:	2b06      	cmp	r3, #6
 8002c18:	d902      	bls.n	8002c20 <NVIC_EncodePriority+0x30>
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	3b03      	subs	r3, #3
 8002c1e:	e000      	b.n	8002c22 <NVIC_EncodePriority+0x32>
 8002c20:	2300      	movs	r3, #0
 8002c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c24:	f04f 32ff 	mov.w	r2, #4294967295
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	43da      	mvns	r2, r3
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	401a      	ands	r2, r3
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c38:	f04f 31ff 	mov.w	r1, #4294967295
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c42:	43d9      	mvns	r1, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c48:	4313      	orrs	r3, r2
         );
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3724      	adds	r7, #36	@ 0x24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
	...

08002c58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	3b01      	subs	r3, #1
 8002c64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c68:	d301      	bcc.n	8002c6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e00f      	b.n	8002c8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8002c98 <SysTick_Config+0x40>)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	3b01      	subs	r3, #1
 8002c74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c76:	210f      	movs	r1, #15
 8002c78:	f04f 30ff 	mov.w	r0, #4294967295
 8002c7c:	f7ff ff8e 	bl	8002b9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c80:	4b05      	ldr	r3, [pc, #20]	@ (8002c98 <SysTick_Config+0x40>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c86:	4b04      	ldr	r3, [pc, #16]	@ (8002c98 <SysTick_Config+0x40>)
 8002c88:	2207      	movs	r2, #7
 8002c8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	e000e010 	.word	0xe000e010

08002c9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f7ff ff05 	bl	8002ab4 <__NVIC_SetPriorityGrouping>
}
 8002caa:	bf00      	nop
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b086      	sub	sp, #24
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	4603      	mov	r3, r0
 8002cba:	60b9      	str	r1, [r7, #8]
 8002cbc:	607a      	str	r2, [r7, #4]
 8002cbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002cc4:	f7ff ff1a 	bl	8002afc <__NVIC_GetPriorityGrouping>
 8002cc8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	68b9      	ldr	r1, [r7, #8]
 8002cce:	6978      	ldr	r0, [r7, #20]
 8002cd0:	f7ff ff8e 	bl	8002bf0 <NVIC_EncodePriority>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cda:	4611      	mov	r1, r2
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7ff ff5d 	bl	8002b9c <__NVIC_SetPriority>
}
 8002ce2:	bf00      	nop
 8002ce4:	3718      	adds	r7, #24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b082      	sub	sp, #8
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7ff ff0d 	bl	8002b18 <__NVIC_EnableIRQ>
}
 8002cfe:	bf00      	nop
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b082      	sub	sp, #8
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7ff ff1d 	bl	8002b54 <__NVIC_DisableIRQ>
}
 8002d1a:	bf00      	nop
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b082      	sub	sp, #8
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f7ff ff94 	bl	8002c58 <SysTick_Config>
 8002d30:	4603      	mov	r3, r0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
	...

08002d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b087      	sub	sp, #28
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d46:	2300      	movs	r3, #0
 8002d48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d4a:	e154      	b.n	8002ff6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	2101      	movs	r1, #1
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	fa01 f303 	lsl.w	r3, r1, r3
 8002d58:	4013      	ands	r3, r2
 8002d5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f000 8146 	beq.w	8002ff0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f003 0303 	and.w	r3, r3, #3
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d005      	beq.n	8002d7c <HAL_GPIO_Init+0x40>
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f003 0303 	and.w	r3, r3, #3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d130      	bne.n	8002dde <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	2203      	movs	r2, #3
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	4013      	ands	r3, r2
 8002d92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	68da      	ldr	r2, [r3, #12]
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002db2:	2201      	movs	r2, #1
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dba:	43db      	mvns	r3, r3
 8002dbc:	693a      	ldr	r2, [r7, #16]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	091b      	lsrs	r3, r3, #4
 8002dc8:	f003 0201 	and.w	r2, r3, #1
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f003 0303 	and.w	r3, r3, #3
 8002de6:	2b03      	cmp	r3, #3
 8002de8:	d017      	beq.n	8002e1a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	2203      	movs	r2, #3
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	43db      	mvns	r3, r3
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	689a      	ldr	r2, [r3, #8]
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f003 0303 	and.w	r3, r3, #3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d123      	bne.n	8002e6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	08da      	lsrs	r2, r3, #3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	3208      	adds	r2, #8
 8002e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	f003 0307 	and.w	r3, r3, #7
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	220f      	movs	r2, #15
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	43db      	mvns	r3, r3
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	4013      	ands	r3, r2
 8002e48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	691a      	ldr	r2, [r3, #16]
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	f003 0307 	and.w	r3, r3, #7
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	08da      	lsrs	r2, r3, #3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	3208      	adds	r2, #8
 8002e68:	6939      	ldr	r1, [r7, #16]
 8002e6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	2203      	movs	r2, #3
 8002e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7e:	43db      	mvns	r3, r3
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	4013      	ands	r3, r2
 8002e84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f003 0203 	and.w	r2, r3, #3
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f000 80a0 	beq.w	8002ff0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eb0:	4b58      	ldr	r3, [pc, #352]	@ (8003014 <HAL_GPIO_Init+0x2d8>)
 8002eb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eb4:	4a57      	ldr	r2, [pc, #348]	@ (8003014 <HAL_GPIO_Init+0x2d8>)
 8002eb6:	f043 0301 	orr.w	r3, r3, #1
 8002eba:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ebc:	4b55      	ldr	r3, [pc, #340]	@ (8003014 <HAL_GPIO_Init+0x2d8>)
 8002ebe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	60bb      	str	r3, [r7, #8]
 8002ec6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ec8:	4a53      	ldr	r2, [pc, #332]	@ (8003018 <HAL_GPIO_Init+0x2dc>)
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	089b      	lsrs	r3, r3, #2
 8002ece:	3302      	adds	r3, #2
 8002ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	f003 0303 	and.w	r3, r3, #3
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	220f      	movs	r2, #15
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002ef2:	d019      	beq.n	8002f28 <HAL_GPIO_Init+0x1ec>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a49      	ldr	r2, [pc, #292]	@ (800301c <HAL_GPIO_Init+0x2e0>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d013      	beq.n	8002f24 <HAL_GPIO_Init+0x1e8>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a48      	ldr	r2, [pc, #288]	@ (8003020 <HAL_GPIO_Init+0x2e4>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d00d      	beq.n	8002f20 <HAL_GPIO_Init+0x1e4>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a47      	ldr	r2, [pc, #284]	@ (8003024 <HAL_GPIO_Init+0x2e8>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d007      	beq.n	8002f1c <HAL_GPIO_Init+0x1e0>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a46      	ldr	r2, [pc, #280]	@ (8003028 <HAL_GPIO_Init+0x2ec>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d101      	bne.n	8002f18 <HAL_GPIO_Init+0x1dc>
 8002f14:	2304      	movs	r3, #4
 8002f16:	e008      	b.n	8002f2a <HAL_GPIO_Init+0x1ee>
 8002f18:	2307      	movs	r3, #7
 8002f1a:	e006      	b.n	8002f2a <HAL_GPIO_Init+0x1ee>
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e004      	b.n	8002f2a <HAL_GPIO_Init+0x1ee>
 8002f20:	2302      	movs	r3, #2
 8002f22:	e002      	b.n	8002f2a <HAL_GPIO_Init+0x1ee>
 8002f24:	2301      	movs	r3, #1
 8002f26:	e000      	b.n	8002f2a <HAL_GPIO_Init+0x1ee>
 8002f28:	2300      	movs	r3, #0
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	f002 0203 	and.w	r2, r2, #3
 8002f30:	0092      	lsls	r2, r2, #2
 8002f32:	4093      	lsls	r3, r2
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f3a:	4937      	ldr	r1, [pc, #220]	@ (8003018 <HAL_GPIO_Init+0x2dc>)
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	089b      	lsrs	r3, r3, #2
 8002f40:	3302      	adds	r3, #2
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f48:	4b38      	ldr	r3, [pc, #224]	@ (800302c <HAL_GPIO_Init+0x2f0>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	43db      	mvns	r3, r3
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	4013      	ands	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d003      	beq.n	8002f6c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f6c:	4a2f      	ldr	r2, [pc, #188]	@ (800302c <HAL_GPIO_Init+0x2f0>)
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f72:	4b2e      	ldr	r3, [pc, #184]	@ (800302c <HAL_GPIO_Init+0x2f0>)
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	43db      	mvns	r3, r3
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d003      	beq.n	8002f96 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f96:	4a25      	ldr	r2, [pc, #148]	@ (800302c <HAL_GPIO_Init+0x2f0>)
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002f9c:	4b23      	ldr	r3, [pc, #140]	@ (800302c <HAL_GPIO_Init+0x2f0>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	43db      	mvns	r3, r3
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d003      	beq.n	8002fc0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002fc0:	4a1a      	ldr	r2, [pc, #104]	@ (800302c <HAL_GPIO_Init+0x2f0>)
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002fc6:	4b19      	ldr	r3, [pc, #100]	@ (800302c <HAL_GPIO_Init+0x2f0>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	43db      	mvns	r3, r3
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002fea:	4a10      	ldr	r2, [pc, #64]	@ (800302c <HAL_GPIO_Init+0x2f0>)
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8003000:	2b00      	cmp	r3, #0
 8003002:	f47f aea3 	bne.w	8002d4c <HAL_GPIO_Init+0x10>
  }
}
 8003006:	bf00      	nop
 8003008:	bf00      	nop
 800300a:	371c      	adds	r7, #28
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr
 8003014:	40021000 	.word	0x40021000
 8003018:	40010000 	.word	0x40010000
 800301c:	48000400 	.word	0x48000400
 8003020:	48000800 	.word	0x48000800
 8003024:	48000c00 	.word	0x48000c00
 8003028:	48001000 	.word	0x48001000
 800302c:	40010400 	.word	0x40010400

08003030 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003030:	b480      	push	{r7}
 8003032:	b087      	sub	sp, #28
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800303a:	2300      	movs	r3, #0
 800303c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800303e:	e0b7      	b.n	80031b0 <HAL_GPIO_DeInit+0x180>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003040:	2201      	movs	r2, #1
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	4013      	ands	r3, r2
 800304c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	2b00      	cmp	r3, #0
 8003052:	f000 80aa 	beq.w	80031aa <HAL_GPIO_DeInit+0x17a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003056:	4a5d      	ldr	r2, [pc, #372]	@ (80031cc <HAL_GPIO_DeInit+0x19c>)
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	089b      	lsrs	r3, r3, #2
 800305c:	3302      	adds	r3, #2
 800305e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003062:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	f003 0303 	and.w	r3, r3, #3
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	220f      	movs	r2, #15
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	4013      	ands	r3, r2
 8003076:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800307e:	d019      	beq.n	80030b4 <HAL_GPIO_DeInit+0x84>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a53      	ldr	r2, [pc, #332]	@ (80031d0 <HAL_GPIO_DeInit+0x1a0>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d013      	beq.n	80030b0 <HAL_GPIO_DeInit+0x80>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a52      	ldr	r2, [pc, #328]	@ (80031d4 <HAL_GPIO_DeInit+0x1a4>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d00d      	beq.n	80030ac <HAL_GPIO_DeInit+0x7c>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a51      	ldr	r2, [pc, #324]	@ (80031d8 <HAL_GPIO_DeInit+0x1a8>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d007      	beq.n	80030a8 <HAL_GPIO_DeInit+0x78>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a50      	ldr	r2, [pc, #320]	@ (80031dc <HAL_GPIO_DeInit+0x1ac>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d101      	bne.n	80030a4 <HAL_GPIO_DeInit+0x74>
 80030a0:	2304      	movs	r3, #4
 80030a2:	e008      	b.n	80030b6 <HAL_GPIO_DeInit+0x86>
 80030a4:	2307      	movs	r3, #7
 80030a6:	e006      	b.n	80030b6 <HAL_GPIO_DeInit+0x86>
 80030a8:	2303      	movs	r3, #3
 80030aa:	e004      	b.n	80030b6 <HAL_GPIO_DeInit+0x86>
 80030ac:	2302      	movs	r3, #2
 80030ae:	e002      	b.n	80030b6 <HAL_GPIO_DeInit+0x86>
 80030b0:	2301      	movs	r3, #1
 80030b2:	e000      	b.n	80030b6 <HAL_GPIO_DeInit+0x86>
 80030b4:	2300      	movs	r3, #0
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	f002 0203 	and.w	r2, r2, #3
 80030bc:	0092      	lsls	r2, r2, #2
 80030be:	4093      	lsls	r3, r2
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d132      	bne.n	800312c <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80030c6:	4b46      	ldr	r3, [pc, #280]	@ (80031e0 <HAL_GPIO_DeInit+0x1b0>)
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	43db      	mvns	r3, r3
 80030ce:	4944      	ldr	r1, [pc, #272]	@ (80031e0 <HAL_GPIO_DeInit+0x1b0>)
 80030d0:	4013      	ands	r3, r2
 80030d2:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80030d4:	4b42      	ldr	r3, [pc, #264]	@ (80031e0 <HAL_GPIO_DeInit+0x1b0>)
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	43db      	mvns	r3, r3
 80030dc:	4940      	ldr	r1, [pc, #256]	@ (80031e0 <HAL_GPIO_DeInit+0x1b0>)
 80030de:	4013      	ands	r3, r2
 80030e0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80030e2:	4b3f      	ldr	r3, [pc, #252]	@ (80031e0 <HAL_GPIO_DeInit+0x1b0>)
 80030e4:	68da      	ldr	r2, [r3, #12]
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	43db      	mvns	r3, r3
 80030ea:	493d      	ldr	r1, [pc, #244]	@ (80031e0 <HAL_GPIO_DeInit+0x1b0>)
 80030ec:	4013      	ands	r3, r2
 80030ee:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80030f0:	4b3b      	ldr	r3, [pc, #236]	@ (80031e0 <HAL_GPIO_DeInit+0x1b0>)
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	43db      	mvns	r3, r3
 80030f8:	4939      	ldr	r1, [pc, #228]	@ (80031e0 <HAL_GPIO_DeInit+0x1b0>)
 80030fa:	4013      	ands	r3, r2
 80030fc:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f003 0303 	and.w	r3, r3, #3
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	220f      	movs	r2, #15
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800310e:	4a2f      	ldr	r2, [pc, #188]	@ (80031cc <HAL_GPIO_DeInit+0x19c>)
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	089b      	lsrs	r3, r3, #2
 8003114:	3302      	adds	r3, #2
 8003116:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	43da      	mvns	r2, r3
 800311e:	482b      	ldr	r0, [pc, #172]	@ (80031cc <HAL_GPIO_DeInit+0x19c>)
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	089b      	lsrs	r3, r3, #2
 8003124:	400a      	ands	r2, r1
 8003126:	3302      	adds	r3, #2
 8003128:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	2103      	movs	r1, #3
 8003136:	fa01 f303 	lsl.w	r3, r1, r3
 800313a:	431a      	orrs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	08da      	lsrs	r2, r3, #3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	3208      	adds	r2, #8
 8003148:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	f003 0307 	and.w	r3, r3, #7
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	220f      	movs	r2, #15
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	43db      	mvns	r3, r3
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	08d2      	lsrs	r2, r2, #3
 8003160:	4019      	ands	r1, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	3208      	adds	r2, #8
 8003166:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	689a      	ldr	r2, [r3, #8]
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	2103      	movs	r1, #3
 8003174:	fa01 f303 	lsl.w	r3, r1, r3
 8003178:	43db      	mvns	r3, r3
 800317a:	401a      	ands	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	2101      	movs	r1, #1
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	fa01 f303 	lsl.w	r3, r1, r3
 800318c:	43db      	mvns	r3, r3
 800318e:	401a      	ands	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68da      	ldr	r2, [r3, #12]
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	2103      	movs	r1, #3
 800319e:	fa01 f303 	lsl.w	r3, r1, r3
 80031a2:	43db      	mvns	r3, r3
 80031a4:	401a      	ands	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	3301      	adds	r3, #1
 80031ae:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	fa22 f303 	lsr.w	r3, r2, r3
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f47f af41 	bne.w	8003040 <HAL_GPIO_DeInit+0x10>
  }
}
 80031be:	bf00      	nop
 80031c0:	bf00      	nop
 80031c2:	371c      	adds	r7, #28
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr
 80031cc:	40010000 	.word	0x40010000
 80031d0:	48000400 	.word	0x48000400
 80031d4:	48000800 	.word	0x48000800
 80031d8:	48000c00 	.word	0x48000c00
 80031dc:	48001000 	.word	0x48001000
 80031e0:	40010400 	.word	0x40010400

080031e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	460b      	mov	r3, r1
 80031ee:	807b      	strh	r3, [r7, #2]
 80031f0:	4613      	mov	r3, r2
 80031f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031f4:	787b      	ldrb	r3, [r7, #1]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031fa:	887a      	ldrh	r2, [r7, #2]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003200:	e002      	b.n	8003208 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003202:	887a      	ldrh	r2, [r7, #2]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003214:	b480      	push	{r7}
 8003216:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003218:	4b04      	ldr	r3, [pc, #16]	@ (800322c <HAL_PWREx_GetVoltageRange+0x18>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003220:	4618      	mov	r0, r3
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	40007000 	.word	0x40007000

08003230 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800323e:	d130      	bne.n	80032a2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003240:	4b23      	ldr	r3, [pc, #140]	@ (80032d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003248:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800324c:	d038      	beq.n	80032c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800324e:	4b20      	ldr	r3, [pc, #128]	@ (80032d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003256:	4a1e      	ldr	r2, [pc, #120]	@ (80032d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003258:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800325c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800325e:	4b1d      	ldr	r3, [pc, #116]	@ (80032d4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2232      	movs	r2, #50	@ 0x32
 8003264:	fb02 f303 	mul.w	r3, r2, r3
 8003268:	4a1b      	ldr	r2, [pc, #108]	@ (80032d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800326a:	fba2 2303 	umull	r2, r3, r2, r3
 800326e:	0c9b      	lsrs	r3, r3, #18
 8003270:	3301      	adds	r3, #1
 8003272:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003274:	e002      	b.n	800327c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	3b01      	subs	r3, #1
 800327a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800327c:	4b14      	ldr	r3, [pc, #80]	@ (80032d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003284:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003288:	d102      	bne.n	8003290 <HAL_PWREx_ControlVoltageScaling+0x60>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1f2      	bne.n	8003276 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003290:	4b0f      	ldr	r3, [pc, #60]	@ (80032d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003292:	695b      	ldr	r3, [r3, #20]
 8003294:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003298:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800329c:	d110      	bne.n	80032c0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e00f      	b.n	80032c2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80032a2:	4b0b      	ldr	r3, [pc, #44]	@ (80032d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80032aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032ae:	d007      	beq.n	80032c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032b0:	4b07      	ldr	r3, [pc, #28]	@ (80032d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80032b8:	4a05      	ldr	r2, [pc, #20]	@ (80032d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80032be:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3714      	adds	r7, #20
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	40007000 	.word	0x40007000
 80032d4:	20000000 	.word	0x20000000
 80032d8:	431bde83 	.word	0x431bde83

080032dc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b088      	sub	sp, #32
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d102      	bne.n	80032f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	f000 bc02 	b.w	8003af4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032f0:	4b96      	ldr	r3, [pc, #600]	@ (800354c <HAL_RCC_OscConfig+0x270>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f003 030c 	and.w	r3, r3, #12
 80032f8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032fa:	4b94      	ldr	r3, [pc, #592]	@ (800354c <HAL_RCC_OscConfig+0x270>)
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	f003 0303 	and.w	r3, r3, #3
 8003302:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0310 	and.w	r3, r3, #16
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 80e4 	beq.w	80034da <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d007      	beq.n	8003328 <HAL_RCC_OscConfig+0x4c>
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	2b0c      	cmp	r3, #12
 800331c:	f040 808b 	bne.w	8003436 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	2b01      	cmp	r3, #1
 8003324:	f040 8087 	bne.w	8003436 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003328:	4b88      	ldr	r3, [pc, #544]	@ (800354c <HAL_RCC_OscConfig+0x270>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d005      	beq.n	8003340 <HAL_RCC_OscConfig+0x64>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d101      	bne.n	8003340 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e3d9      	b.n	8003af4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a1a      	ldr	r2, [r3, #32]
 8003344:	4b81      	ldr	r3, [pc, #516]	@ (800354c <HAL_RCC_OscConfig+0x270>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0308 	and.w	r3, r3, #8
 800334c:	2b00      	cmp	r3, #0
 800334e:	d004      	beq.n	800335a <HAL_RCC_OscConfig+0x7e>
 8003350:	4b7e      	ldr	r3, [pc, #504]	@ (800354c <HAL_RCC_OscConfig+0x270>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003358:	e005      	b.n	8003366 <HAL_RCC_OscConfig+0x8a>
 800335a:	4b7c      	ldr	r3, [pc, #496]	@ (800354c <HAL_RCC_OscConfig+0x270>)
 800335c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003360:	091b      	lsrs	r3, r3, #4
 8003362:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003366:	4293      	cmp	r3, r2
 8003368:	d223      	bcs.n	80033b2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a1b      	ldr	r3, [r3, #32]
 800336e:	4618      	mov	r0, r3
 8003370:	f000 fd8c 	bl	8003e8c <RCC_SetFlashLatencyFromMSIRange>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e3ba      	b.n	8003af4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800337e:	4b73      	ldr	r3, [pc, #460]	@ (800354c <HAL_RCC_OscConfig+0x270>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a72      	ldr	r2, [pc, #456]	@ (800354c <HAL_RCC_OscConfig+0x270>)
 8003384:	f043 0308 	orr.w	r3, r3, #8
 8003388:	6013      	str	r3, [r2, #0]
 800338a:	4b70      	ldr	r3, [pc, #448]	@ (800354c <HAL_RCC_OscConfig+0x270>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	496d      	ldr	r1, [pc, #436]	@ (800354c <HAL_RCC_OscConfig+0x270>)
 8003398:	4313      	orrs	r3, r2
 800339a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800339c:	4b6b      	ldr	r3, [pc, #428]	@ (800354c <HAL_RCC_OscConfig+0x270>)
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	69db      	ldr	r3, [r3, #28]
 80033a8:	021b      	lsls	r3, r3, #8
 80033aa:	4968      	ldr	r1, [pc, #416]	@ (800354c <HAL_RCC_OscConfig+0x270>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	604b      	str	r3, [r1, #4]
 80033b0:	e025      	b.n	80033fe <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033b2:	4b66      	ldr	r3, [pc, #408]	@ (800354c <HAL_RCC_OscConfig+0x270>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a65      	ldr	r2, [pc, #404]	@ (800354c <HAL_RCC_OscConfig+0x270>)
 80033b8:	f043 0308 	orr.w	r3, r3, #8
 80033bc:	6013      	str	r3, [r2, #0]
 80033be:	4b63      	ldr	r3, [pc, #396]	@ (800354c <HAL_RCC_OscConfig+0x270>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	4960      	ldr	r1, [pc, #384]	@ (800354c <HAL_RCC_OscConfig+0x270>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033d0:	4b5e      	ldr	r3, [pc, #376]	@ (800354c <HAL_RCC_OscConfig+0x270>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	69db      	ldr	r3, [r3, #28]
 80033dc:	021b      	lsls	r3, r3, #8
 80033de:	495b      	ldr	r1, [pc, #364]	@ (800354c <HAL_RCC_OscConfig+0x270>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d109      	bne.n	80033fe <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 fd4c 	bl	8003e8c <RCC_SetFlashLatencyFromMSIRange>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e37a      	b.n	8003af4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033fe:	f000 fc81 	bl	8003d04 <HAL_RCC_GetSysClockFreq>
 8003402:	4602      	mov	r2, r0
 8003404:	4b51      	ldr	r3, [pc, #324]	@ (800354c <HAL_RCC_OscConfig+0x270>)
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	091b      	lsrs	r3, r3, #4
 800340a:	f003 030f 	and.w	r3, r3, #15
 800340e:	4950      	ldr	r1, [pc, #320]	@ (8003550 <HAL_RCC_OscConfig+0x274>)
 8003410:	5ccb      	ldrb	r3, [r1, r3]
 8003412:	f003 031f 	and.w	r3, r3, #31
 8003416:	fa22 f303 	lsr.w	r3, r2, r3
 800341a:	4a4e      	ldr	r2, [pc, #312]	@ (8003554 <HAL_RCC_OscConfig+0x278>)
 800341c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800341e:	4b4e      	ldr	r3, [pc, #312]	@ (8003558 <HAL_RCC_OscConfig+0x27c>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4618      	mov	r0, r3
 8003424:	f7fd fd5c 	bl	8000ee0 <HAL_InitTick>
 8003428:	4603      	mov	r3, r0
 800342a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800342c:	7bfb      	ldrb	r3, [r7, #15]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d052      	beq.n	80034d8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003432:	7bfb      	ldrb	r3, [r7, #15]
 8003434:	e35e      	b.n	8003af4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d032      	beq.n	80034a4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800343e:	4b43      	ldr	r3, [pc, #268]	@ (800354c <HAL_RCC_OscConfig+0x270>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a42      	ldr	r2, [pc, #264]	@ (800354c <HAL_RCC_OscConfig+0x270>)
 8003444:	f043 0301 	orr.w	r3, r3, #1
 8003448:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800344a:	f7fd fd99 	bl	8000f80 <HAL_GetTick>
 800344e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003450:	e008      	b.n	8003464 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003452:	f7fd fd95 	bl	8000f80 <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	2b02      	cmp	r3, #2
 800345e:	d901      	bls.n	8003464 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e347      	b.n	8003af4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003464:	4b39      	ldr	r3, [pc, #228]	@ (800354c <HAL_RCC_OscConfig+0x270>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d0f0      	beq.n	8003452 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003470:	4b36      	ldr	r3, [pc, #216]	@ (800354c <HAL_RCC_OscConfig+0x270>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a35      	ldr	r2, [pc, #212]	@ (800354c <HAL_RCC_OscConfig+0x270>)
 8003476:	f043 0308 	orr.w	r3, r3, #8
 800347a:	6013      	str	r3, [r2, #0]
 800347c:	4b33      	ldr	r3, [pc, #204]	@ (800354c <HAL_RCC_OscConfig+0x270>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a1b      	ldr	r3, [r3, #32]
 8003488:	4930      	ldr	r1, [pc, #192]	@ (800354c <HAL_RCC_OscConfig+0x270>)
 800348a:	4313      	orrs	r3, r2
 800348c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800348e:	4b2f      	ldr	r3, [pc, #188]	@ (800354c <HAL_RCC_OscConfig+0x270>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	021b      	lsls	r3, r3, #8
 800349c:	492b      	ldr	r1, [pc, #172]	@ (800354c <HAL_RCC_OscConfig+0x270>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	604b      	str	r3, [r1, #4]
 80034a2:	e01a      	b.n	80034da <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80034a4:	4b29      	ldr	r3, [pc, #164]	@ (800354c <HAL_RCC_OscConfig+0x270>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a28      	ldr	r2, [pc, #160]	@ (800354c <HAL_RCC_OscConfig+0x270>)
 80034aa:	f023 0301 	bic.w	r3, r3, #1
 80034ae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034b0:	f7fd fd66 	bl	8000f80 <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034b8:	f7fd fd62 	bl	8000f80 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e314      	b.n	8003af4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034ca:	4b20      	ldr	r3, [pc, #128]	@ (800354c <HAL_RCC_OscConfig+0x270>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1f0      	bne.n	80034b8 <HAL_RCC_OscConfig+0x1dc>
 80034d6:	e000      	b.n	80034da <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d073      	beq.n	80035ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	2b08      	cmp	r3, #8
 80034ea:	d005      	beq.n	80034f8 <HAL_RCC_OscConfig+0x21c>
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	2b0c      	cmp	r3, #12
 80034f0:	d10e      	bne.n	8003510 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	2b03      	cmp	r3, #3
 80034f6:	d10b      	bne.n	8003510 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034f8:	4b14      	ldr	r3, [pc, #80]	@ (800354c <HAL_RCC_OscConfig+0x270>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d063      	beq.n	80035cc <HAL_RCC_OscConfig+0x2f0>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d15f      	bne.n	80035cc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e2f1      	b.n	8003af4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003518:	d106      	bne.n	8003528 <HAL_RCC_OscConfig+0x24c>
 800351a:	4b0c      	ldr	r3, [pc, #48]	@ (800354c <HAL_RCC_OscConfig+0x270>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a0b      	ldr	r2, [pc, #44]	@ (800354c <HAL_RCC_OscConfig+0x270>)
 8003520:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003524:	6013      	str	r3, [r2, #0]
 8003526:	e025      	b.n	8003574 <HAL_RCC_OscConfig+0x298>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003530:	d114      	bne.n	800355c <HAL_RCC_OscConfig+0x280>
 8003532:	4b06      	ldr	r3, [pc, #24]	@ (800354c <HAL_RCC_OscConfig+0x270>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a05      	ldr	r2, [pc, #20]	@ (800354c <HAL_RCC_OscConfig+0x270>)
 8003538:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800353c:	6013      	str	r3, [r2, #0]
 800353e:	4b03      	ldr	r3, [pc, #12]	@ (800354c <HAL_RCC_OscConfig+0x270>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a02      	ldr	r2, [pc, #8]	@ (800354c <HAL_RCC_OscConfig+0x270>)
 8003544:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003548:	6013      	str	r3, [r2, #0]
 800354a:	e013      	b.n	8003574 <HAL_RCC_OscConfig+0x298>
 800354c:	40021000 	.word	0x40021000
 8003550:	08006538 	.word	0x08006538
 8003554:	20000000 	.word	0x20000000
 8003558:	20000004 	.word	0x20000004
 800355c:	4ba0      	ldr	r3, [pc, #640]	@ (80037e0 <HAL_RCC_OscConfig+0x504>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a9f      	ldr	r2, [pc, #636]	@ (80037e0 <HAL_RCC_OscConfig+0x504>)
 8003562:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003566:	6013      	str	r3, [r2, #0]
 8003568:	4b9d      	ldr	r3, [pc, #628]	@ (80037e0 <HAL_RCC_OscConfig+0x504>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a9c      	ldr	r2, [pc, #624]	@ (80037e0 <HAL_RCC_OscConfig+0x504>)
 800356e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003572:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d013      	beq.n	80035a4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800357c:	f7fd fd00 	bl	8000f80 <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003584:	f7fd fcfc 	bl	8000f80 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b64      	cmp	r3, #100	@ 0x64
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e2ae      	b.n	8003af4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003596:	4b92      	ldr	r3, [pc, #584]	@ (80037e0 <HAL_RCC_OscConfig+0x504>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d0f0      	beq.n	8003584 <HAL_RCC_OscConfig+0x2a8>
 80035a2:	e014      	b.n	80035ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a4:	f7fd fcec 	bl	8000f80 <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035ac:	f7fd fce8 	bl	8000f80 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b64      	cmp	r3, #100	@ 0x64
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e29a      	b.n	8003af4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035be:	4b88      	ldr	r3, [pc, #544]	@ (80037e0 <HAL_RCC_OscConfig+0x504>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1f0      	bne.n	80035ac <HAL_RCC_OscConfig+0x2d0>
 80035ca:	e000      	b.n	80035ce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d060      	beq.n	800369c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	2b04      	cmp	r3, #4
 80035de:	d005      	beq.n	80035ec <HAL_RCC_OscConfig+0x310>
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	2b0c      	cmp	r3, #12
 80035e4:	d119      	bne.n	800361a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d116      	bne.n	800361a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035ec:	4b7c      	ldr	r3, [pc, #496]	@ (80037e0 <HAL_RCC_OscConfig+0x504>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d005      	beq.n	8003604 <HAL_RCC_OscConfig+0x328>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d101      	bne.n	8003604 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e277      	b.n	8003af4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003604:	4b76      	ldr	r3, [pc, #472]	@ (80037e0 <HAL_RCC_OscConfig+0x504>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	061b      	lsls	r3, r3, #24
 8003612:	4973      	ldr	r1, [pc, #460]	@ (80037e0 <HAL_RCC_OscConfig+0x504>)
 8003614:	4313      	orrs	r3, r2
 8003616:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003618:	e040      	b.n	800369c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d023      	beq.n	800366a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003622:	4b6f      	ldr	r3, [pc, #444]	@ (80037e0 <HAL_RCC_OscConfig+0x504>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a6e      	ldr	r2, [pc, #440]	@ (80037e0 <HAL_RCC_OscConfig+0x504>)
 8003628:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800362c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800362e:	f7fd fca7 	bl	8000f80 <HAL_GetTick>
 8003632:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003634:	e008      	b.n	8003648 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003636:	f7fd fca3 	bl	8000f80 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d901      	bls.n	8003648 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e255      	b.n	8003af4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003648:	4b65      	ldr	r3, [pc, #404]	@ (80037e0 <HAL_RCC_OscConfig+0x504>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003650:	2b00      	cmp	r3, #0
 8003652:	d0f0      	beq.n	8003636 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003654:	4b62      	ldr	r3, [pc, #392]	@ (80037e0 <HAL_RCC_OscConfig+0x504>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	061b      	lsls	r3, r3, #24
 8003662:	495f      	ldr	r1, [pc, #380]	@ (80037e0 <HAL_RCC_OscConfig+0x504>)
 8003664:	4313      	orrs	r3, r2
 8003666:	604b      	str	r3, [r1, #4]
 8003668:	e018      	b.n	800369c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800366a:	4b5d      	ldr	r3, [pc, #372]	@ (80037e0 <HAL_RCC_OscConfig+0x504>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a5c      	ldr	r2, [pc, #368]	@ (80037e0 <HAL_RCC_OscConfig+0x504>)
 8003670:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003674:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003676:	f7fd fc83 	bl	8000f80 <HAL_GetTick>
 800367a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800367c:	e008      	b.n	8003690 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800367e:	f7fd fc7f 	bl	8000f80 <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	2b02      	cmp	r3, #2
 800368a:	d901      	bls.n	8003690 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e231      	b.n	8003af4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003690:	4b53      	ldr	r3, [pc, #332]	@ (80037e0 <HAL_RCC_OscConfig+0x504>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1f0      	bne.n	800367e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0308 	and.w	r3, r3, #8
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d03c      	beq.n	8003722 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d01c      	beq.n	80036ea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036b0:	4b4b      	ldr	r3, [pc, #300]	@ (80037e0 <HAL_RCC_OscConfig+0x504>)
 80036b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036b6:	4a4a      	ldr	r2, [pc, #296]	@ (80037e0 <HAL_RCC_OscConfig+0x504>)
 80036b8:	f043 0301 	orr.w	r3, r3, #1
 80036bc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c0:	f7fd fc5e 	bl	8000f80 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036c8:	f7fd fc5a 	bl	8000f80 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e20c      	b.n	8003af4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036da:	4b41      	ldr	r3, [pc, #260]	@ (80037e0 <HAL_RCC_OscConfig+0x504>)
 80036dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d0ef      	beq.n	80036c8 <HAL_RCC_OscConfig+0x3ec>
 80036e8:	e01b      	b.n	8003722 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036ea:	4b3d      	ldr	r3, [pc, #244]	@ (80037e0 <HAL_RCC_OscConfig+0x504>)
 80036ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036f0:	4a3b      	ldr	r2, [pc, #236]	@ (80037e0 <HAL_RCC_OscConfig+0x504>)
 80036f2:	f023 0301 	bic.w	r3, r3, #1
 80036f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036fa:	f7fd fc41 	bl	8000f80 <HAL_GetTick>
 80036fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003700:	e008      	b.n	8003714 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003702:	f7fd fc3d 	bl	8000f80 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d901      	bls.n	8003714 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e1ef      	b.n	8003af4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003714:	4b32      	ldr	r3, [pc, #200]	@ (80037e0 <HAL_RCC_OscConfig+0x504>)
 8003716:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1ef      	bne.n	8003702 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0304 	and.w	r3, r3, #4
 800372a:	2b00      	cmp	r3, #0
 800372c:	f000 80a6 	beq.w	800387c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003730:	2300      	movs	r3, #0
 8003732:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003734:	4b2a      	ldr	r3, [pc, #168]	@ (80037e0 <HAL_RCC_OscConfig+0x504>)
 8003736:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003738:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10d      	bne.n	800375c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003740:	4b27      	ldr	r3, [pc, #156]	@ (80037e0 <HAL_RCC_OscConfig+0x504>)
 8003742:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003744:	4a26      	ldr	r2, [pc, #152]	@ (80037e0 <HAL_RCC_OscConfig+0x504>)
 8003746:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800374a:	6593      	str	r3, [r2, #88]	@ 0x58
 800374c:	4b24      	ldr	r3, [pc, #144]	@ (80037e0 <HAL_RCC_OscConfig+0x504>)
 800374e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003750:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003754:	60bb      	str	r3, [r7, #8]
 8003756:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003758:	2301      	movs	r3, #1
 800375a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800375c:	4b21      	ldr	r3, [pc, #132]	@ (80037e4 <HAL_RCC_OscConfig+0x508>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003764:	2b00      	cmp	r3, #0
 8003766:	d118      	bne.n	800379a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003768:	4b1e      	ldr	r3, [pc, #120]	@ (80037e4 <HAL_RCC_OscConfig+0x508>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a1d      	ldr	r2, [pc, #116]	@ (80037e4 <HAL_RCC_OscConfig+0x508>)
 800376e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003772:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003774:	f7fd fc04 	bl	8000f80 <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800377c:	f7fd fc00 	bl	8000f80 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e1b2      	b.n	8003af4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800378e:	4b15      	ldr	r3, [pc, #84]	@ (80037e4 <HAL_RCC_OscConfig+0x508>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0f0      	beq.n	800377c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d108      	bne.n	80037b4 <HAL_RCC_OscConfig+0x4d8>
 80037a2:	4b0f      	ldr	r3, [pc, #60]	@ (80037e0 <HAL_RCC_OscConfig+0x504>)
 80037a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037a8:	4a0d      	ldr	r2, [pc, #52]	@ (80037e0 <HAL_RCC_OscConfig+0x504>)
 80037aa:	f043 0301 	orr.w	r3, r3, #1
 80037ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037b2:	e029      	b.n	8003808 <HAL_RCC_OscConfig+0x52c>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	2b05      	cmp	r3, #5
 80037ba:	d115      	bne.n	80037e8 <HAL_RCC_OscConfig+0x50c>
 80037bc:	4b08      	ldr	r3, [pc, #32]	@ (80037e0 <HAL_RCC_OscConfig+0x504>)
 80037be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037c2:	4a07      	ldr	r2, [pc, #28]	@ (80037e0 <HAL_RCC_OscConfig+0x504>)
 80037c4:	f043 0304 	orr.w	r3, r3, #4
 80037c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037cc:	4b04      	ldr	r3, [pc, #16]	@ (80037e0 <HAL_RCC_OscConfig+0x504>)
 80037ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037d2:	4a03      	ldr	r2, [pc, #12]	@ (80037e0 <HAL_RCC_OscConfig+0x504>)
 80037d4:	f043 0301 	orr.w	r3, r3, #1
 80037d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037dc:	e014      	b.n	8003808 <HAL_RCC_OscConfig+0x52c>
 80037de:	bf00      	nop
 80037e0:	40021000 	.word	0x40021000
 80037e4:	40007000 	.word	0x40007000
 80037e8:	4b9a      	ldr	r3, [pc, #616]	@ (8003a54 <HAL_RCC_OscConfig+0x778>)
 80037ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ee:	4a99      	ldr	r2, [pc, #612]	@ (8003a54 <HAL_RCC_OscConfig+0x778>)
 80037f0:	f023 0301 	bic.w	r3, r3, #1
 80037f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037f8:	4b96      	ldr	r3, [pc, #600]	@ (8003a54 <HAL_RCC_OscConfig+0x778>)
 80037fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037fe:	4a95      	ldr	r2, [pc, #596]	@ (8003a54 <HAL_RCC_OscConfig+0x778>)
 8003800:	f023 0304 	bic.w	r3, r3, #4
 8003804:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d016      	beq.n	800383e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003810:	f7fd fbb6 	bl	8000f80 <HAL_GetTick>
 8003814:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003816:	e00a      	b.n	800382e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003818:	f7fd fbb2 	bl	8000f80 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003826:	4293      	cmp	r3, r2
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e162      	b.n	8003af4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800382e:	4b89      	ldr	r3, [pc, #548]	@ (8003a54 <HAL_RCC_OscConfig+0x778>)
 8003830:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	2b00      	cmp	r3, #0
 800383a:	d0ed      	beq.n	8003818 <HAL_RCC_OscConfig+0x53c>
 800383c:	e015      	b.n	800386a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800383e:	f7fd fb9f 	bl	8000f80 <HAL_GetTick>
 8003842:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003844:	e00a      	b.n	800385c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003846:	f7fd fb9b 	bl	8000f80 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003854:	4293      	cmp	r3, r2
 8003856:	d901      	bls.n	800385c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e14b      	b.n	8003af4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800385c:	4b7d      	ldr	r3, [pc, #500]	@ (8003a54 <HAL_RCC_OscConfig+0x778>)
 800385e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1ed      	bne.n	8003846 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800386a:	7ffb      	ldrb	r3, [r7, #31]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d105      	bne.n	800387c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003870:	4b78      	ldr	r3, [pc, #480]	@ (8003a54 <HAL_RCC_OscConfig+0x778>)
 8003872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003874:	4a77      	ldr	r2, [pc, #476]	@ (8003a54 <HAL_RCC_OscConfig+0x778>)
 8003876:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800387a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0320 	and.w	r3, r3, #32
 8003884:	2b00      	cmp	r3, #0
 8003886:	d03c      	beq.n	8003902 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800388c:	2b00      	cmp	r3, #0
 800388e:	d01c      	beq.n	80038ca <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003890:	4b70      	ldr	r3, [pc, #448]	@ (8003a54 <HAL_RCC_OscConfig+0x778>)
 8003892:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003896:	4a6f      	ldr	r2, [pc, #444]	@ (8003a54 <HAL_RCC_OscConfig+0x778>)
 8003898:	f043 0301 	orr.w	r3, r3, #1
 800389c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a0:	f7fd fb6e 	bl	8000f80 <HAL_GetTick>
 80038a4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038a6:	e008      	b.n	80038ba <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038a8:	f7fd fb6a 	bl	8000f80 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e11c      	b.n	8003af4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038ba:	4b66      	ldr	r3, [pc, #408]	@ (8003a54 <HAL_RCC_OscConfig+0x778>)
 80038bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d0ef      	beq.n	80038a8 <HAL_RCC_OscConfig+0x5cc>
 80038c8:	e01b      	b.n	8003902 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80038ca:	4b62      	ldr	r3, [pc, #392]	@ (8003a54 <HAL_RCC_OscConfig+0x778>)
 80038cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038d0:	4a60      	ldr	r2, [pc, #384]	@ (8003a54 <HAL_RCC_OscConfig+0x778>)
 80038d2:	f023 0301 	bic.w	r3, r3, #1
 80038d6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038da:	f7fd fb51 	bl	8000f80 <HAL_GetTick>
 80038de:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80038e0:	e008      	b.n	80038f4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038e2:	f7fd fb4d 	bl	8000f80 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e0ff      	b.n	8003af4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80038f4:	4b57      	ldr	r3, [pc, #348]	@ (8003a54 <HAL_RCC_OscConfig+0x778>)
 80038f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1ef      	bne.n	80038e2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003906:	2b00      	cmp	r3, #0
 8003908:	f000 80f3 	beq.w	8003af2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003910:	2b02      	cmp	r3, #2
 8003912:	f040 80c9 	bne.w	8003aa8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003916:	4b4f      	ldr	r3, [pc, #316]	@ (8003a54 <HAL_RCC_OscConfig+0x778>)
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	f003 0203 	and.w	r2, r3, #3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003926:	429a      	cmp	r2, r3
 8003928:	d12c      	bne.n	8003984 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003934:	3b01      	subs	r3, #1
 8003936:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003938:	429a      	cmp	r2, r3
 800393a:	d123      	bne.n	8003984 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003946:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003948:	429a      	cmp	r2, r3
 800394a:	d11b      	bne.n	8003984 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003956:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003958:	429a      	cmp	r2, r3
 800395a:	d113      	bne.n	8003984 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003966:	085b      	lsrs	r3, r3, #1
 8003968:	3b01      	subs	r3, #1
 800396a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800396c:	429a      	cmp	r2, r3
 800396e:	d109      	bne.n	8003984 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800397a:	085b      	lsrs	r3, r3, #1
 800397c:	3b01      	subs	r3, #1
 800397e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003980:	429a      	cmp	r2, r3
 8003982:	d06b      	beq.n	8003a5c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	2b0c      	cmp	r3, #12
 8003988:	d062      	beq.n	8003a50 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800398a:	4b32      	ldr	r3, [pc, #200]	@ (8003a54 <HAL_RCC_OscConfig+0x778>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e0ac      	b.n	8003af4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800399a:	4b2e      	ldr	r3, [pc, #184]	@ (8003a54 <HAL_RCC_OscConfig+0x778>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a2d      	ldr	r2, [pc, #180]	@ (8003a54 <HAL_RCC_OscConfig+0x778>)
 80039a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039a4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039a6:	f7fd faeb 	bl	8000f80 <HAL_GetTick>
 80039aa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039ac:	e008      	b.n	80039c0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ae:	f7fd fae7 	bl	8000f80 <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d901      	bls.n	80039c0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e099      	b.n	8003af4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039c0:	4b24      	ldr	r3, [pc, #144]	@ (8003a54 <HAL_RCC_OscConfig+0x778>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1f0      	bne.n	80039ae <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039cc:	4b21      	ldr	r3, [pc, #132]	@ (8003a54 <HAL_RCC_OscConfig+0x778>)
 80039ce:	68da      	ldr	r2, [r3, #12]
 80039d0:	4b21      	ldr	r3, [pc, #132]	@ (8003a58 <HAL_RCC_OscConfig+0x77c>)
 80039d2:	4013      	ands	r3, r2
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80039dc:	3a01      	subs	r2, #1
 80039de:	0112      	lsls	r2, r2, #4
 80039e0:	4311      	orrs	r1, r2
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80039e6:	0212      	lsls	r2, r2, #8
 80039e8:	4311      	orrs	r1, r2
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80039ee:	0852      	lsrs	r2, r2, #1
 80039f0:	3a01      	subs	r2, #1
 80039f2:	0552      	lsls	r2, r2, #21
 80039f4:	4311      	orrs	r1, r2
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80039fa:	0852      	lsrs	r2, r2, #1
 80039fc:	3a01      	subs	r2, #1
 80039fe:	0652      	lsls	r2, r2, #25
 8003a00:	4311      	orrs	r1, r2
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003a06:	06d2      	lsls	r2, r2, #27
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	4912      	ldr	r1, [pc, #72]	@ (8003a54 <HAL_RCC_OscConfig+0x778>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003a10:	4b10      	ldr	r3, [pc, #64]	@ (8003a54 <HAL_RCC_OscConfig+0x778>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a0f      	ldr	r2, [pc, #60]	@ (8003a54 <HAL_RCC_OscConfig+0x778>)
 8003a16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a1a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a1c:	4b0d      	ldr	r3, [pc, #52]	@ (8003a54 <HAL_RCC_OscConfig+0x778>)
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	4a0c      	ldr	r2, [pc, #48]	@ (8003a54 <HAL_RCC_OscConfig+0x778>)
 8003a22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a26:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a28:	f7fd faaa 	bl	8000f80 <HAL_GetTick>
 8003a2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a2e:	e008      	b.n	8003a42 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a30:	f7fd faa6 	bl	8000f80 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e058      	b.n	8003af4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a42:	4b04      	ldr	r3, [pc, #16]	@ (8003a54 <HAL_RCC_OscConfig+0x778>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d0f0      	beq.n	8003a30 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a4e:	e050      	b.n	8003af2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e04f      	b.n	8003af4 <HAL_RCC_OscConfig+0x818>
 8003a54:	40021000 	.word	0x40021000
 8003a58:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a5c:	4b27      	ldr	r3, [pc, #156]	@ (8003afc <HAL_RCC_OscConfig+0x820>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d144      	bne.n	8003af2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003a68:	4b24      	ldr	r3, [pc, #144]	@ (8003afc <HAL_RCC_OscConfig+0x820>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a23      	ldr	r2, [pc, #140]	@ (8003afc <HAL_RCC_OscConfig+0x820>)
 8003a6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a72:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a74:	4b21      	ldr	r3, [pc, #132]	@ (8003afc <HAL_RCC_OscConfig+0x820>)
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	4a20      	ldr	r2, [pc, #128]	@ (8003afc <HAL_RCC_OscConfig+0x820>)
 8003a7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a7e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a80:	f7fd fa7e 	bl	8000f80 <HAL_GetTick>
 8003a84:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a86:	e008      	b.n	8003a9a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a88:	f7fd fa7a 	bl	8000f80 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e02c      	b.n	8003af4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a9a:	4b18      	ldr	r3, [pc, #96]	@ (8003afc <HAL_RCC_OscConfig+0x820>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d0f0      	beq.n	8003a88 <HAL_RCC_OscConfig+0x7ac>
 8003aa6:	e024      	b.n	8003af2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	2b0c      	cmp	r3, #12
 8003aac:	d01f      	beq.n	8003aee <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aae:	4b13      	ldr	r3, [pc, #76]	@ (8003afc <HAL_RCC_OscConfig+0x820>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a12      	ldr	r2, [pc, #72]	@ (8003afc <HAL_RCC_OscConfig+0x820>)
 8003ab4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ab8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aba:	f7fd fa61 	bl	8000f80 <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac2:	f7fd fa5d 	bl	8000f80 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e00f      	b.n	8003af4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ad4:	4b09      	ldr	r3, [pc, #36]	@ (8003afc <HAL_RCC_OscConfig+0x820>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1f0      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003ae0:	4b06      	ldr	r3, [pc, #24]	@ (8003afc <HAL_RCC_OscConfig+0x820>)
 8003ae2:	68da      	ldr	r2, [r3, #12]
 8003ae4:	4905      	ldr	r1, [pc, #20]	@ (8003afc <HAL_RCC_OscConfig+0x820>)
 8003ae6:	4b06      	ldr	r3, [pc, #24]	@ (8003b00 <HAL_RCC_OscConfig+0x824>)
 8003ae8:	4013      	ands	r3, r2
 8003aea:	60cb      	str	r3, [r1, #12]
 8003aec:	e001      	b.n	8003af2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e000      	b.n	8003af4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3720      	adds	r7, #32
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	40021000 	.word	0x40021000
 8003b00:	feeefffc 	.word	0xfeeefffc

08003b04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d101      	bne.n	8003b18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e0e7      	b.n	8003ce8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b18:	4b75      	ldr	r3, [pc, #468]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0307 	and.w	r3, r3, #7
 8003b20:	683a      	ldr	r2, [r7, #0]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d910      	bls.n	8003b48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b26:	4b72      	ldr	r3, [pc, #456]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f023 0207 	bic.w	r2, r3, #7
 8003b2e:	4970      	ldr	r1, [pc, #448]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b36:	4b6e      	ldr	r3, [pc, #440]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0307 	and.w	r3, r3, #7
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d001      	beq.n	8003b48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e0cf      	b.n	8003ce8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d010      	beq.n	8003b76 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689a      	ldr	r2, [r3, #8]
 8003b58:	4b66      	ldr	r3, [pc, #408]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d908      	bls.n	8003b76 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b64:	4b63      	ldr	r3, [pc, #396]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	4960      	ldr	r1, [pc, #384]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d04c      	beq.n	8003c1c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	2b03      	cmp	r3, #3
 8003b88:	d107      	bne.n	8003b9a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b8a:	4b5a      	ldr	r3, [pc, #360]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d121      	bne.n	8003bda <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e0a6      	b.n	8003ce8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d107      	bne.n	8003bb2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ba2:	4b54      	ldr	r3, [pc, #336]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d115      	bne.n	8003bda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e09a      	b.n	8003ce8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d107      	bne.n	8003bca <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003bba:	4b4e      	ldr	r3, [pc, #312]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d109      	bne.n	8003bda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e08e      	b.n	8003ce8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bca:	4b4a      	ldr	r3, [pc, #296]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e086      	b.n	8003ce8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003bda:	4b46      	ldr	r3, [pc, #280]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f023 0203 	bic.w	r2, r3, #3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	4943      	ldr	r1, [pc, #268]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bec:	f7fd f9c8 	bl	8000f80 <HAL_GetTick>
 8003bf0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bf2:	e00a      	b.n	8003c0a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bf4:	f7fd f9c4 	bl	8000f80 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e06e      	b.n	8003ce8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c0a:	4b3a      	ldr	r3, [pc, #232]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f003 020c 	and.w	r2, r3, #12
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d1eb      	bne.n	8003bf4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0302 	and.w	r3, r3, #2
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d010      	beq.n	8003c4a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689a      	ldr	r2, [r3, #8]
 8003c2c:	4b31      	ldr	r3, [pc, #196]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d208      	bcs.n	8003c4a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c38:	4b2e      	ldr	r3, [pc, #184]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	492b      	ldr	r1, [pc, #172]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c4a:	4b29      	ldr	r3, [pc, #164]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0307 	and.w	r3, r3, #7
 8003c52:	683a      	ldr	r2, [r7, #0]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d210      	bcs.n	8003c7a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c58:	4b25      	ldr	r3, [pc, #148]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f023 0207 	bic.w	r2, r3, #7
 8003c60:	4923      	ldr	r1, [pc, #140]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c68:	4b21      	ldr	r3, [pc, #132]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0307 	and.w	r3, r3, #7
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d001      	beq.n	8003c7a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e036      	b.n	8003ce8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0304 	and.w	r3, r3, #4
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d008      	beq.n	8003c98 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c86:	4b1b      	ldr	r3, [pc, #108]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	4918      	ldr	r1, [pc, #96]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0308 	and.w	r3, r3, #8
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d009      	beq.n	8003cb8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ca4:	4b13      	ldr	r3, [pc, #76]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	00db      	lsls	r3, r3, #3
 8003cb2:	4910      	ldr	r1, [pc, #64]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003cb8:	f000 f824 	bl	8003d04 <HAL_RCC_GetSysClockFreq>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	091b      	lsrs	r3, r3, #4
 8003cc4:	f003 030f 	and.w	r3, r3, #15
 8003cc8:	490b      	ldr	r1, [pc, #44]	@ (8003cf8 <HAL_RCC_ClockConfig+0x1f4>)
 8003cca:	5ccb      	ldrb	r3, [r1, r3]
 8003ccc:	f003 031f 	and.w	r3, r3, #31
 8003cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd4:	4a09      	ldr	r2, [pc, #36]	@ (8003cfc <HAL_RCC_ClockConfig+0x1f8>)
 8003cd6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003cd8:	4b09      	ldr	r3, [pc, #36]	@ (8003d00 <HAL_RCC_ClockConfig+0x1fc>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7fd f8ff 	bl	8000ee0 <HAL_InitTick>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	72fb      	strb	r3, [r7, #11]

  return status;
 8003ce6:	7afb      	ldrb	r3, [r7, #11]
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	40022000 	.word	0x40022000
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	08006538 	.word	0x08006538
 8003cfc:	20000000 	.word	0x20000000
 8003d00:	20000004 	.word	0x20000004

08003d04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b089      	sub	sp, #36	@ 0x24
 8003d08:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	61fb      	str	r3, [r7, #28]
 8003d0e:	2300      	movs	r3, #0
 8003d10:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d12:	4b3e      	ldr	r3, [pc, #248]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f003 030c 	and.w	r3, r3, #12
 8003d1a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d1c:	4b3b      	ldr	r3, [pc, #236]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	f003 0303 	and.w	r3, r3, #3
 8003d24:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d005      	beq.n	8003d38 <HAL_RCC_GetSysClockFreq+0x34>
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	2b0c      	cmp	r3, #12
 8003d30:	d121      	bne.n	8003d76 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d11e      	bne.n	8003d76 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d38:	4b34      	ldr	r3, [pc, #208]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0308 	and.w	r3, r3, #8
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d107      	bne.n	8003d54 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d44:	4b31      	ldr	r3, [pc, #196]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d4a:	0a1b      	lsrs	r3, r3, #8
 8003d4c:	f003 030f 	and.w	r3, r3, #15
 8003d50:	61fb      	str	r3, [r7, #28]
 8003d52:	e005      	b.n	8003d60 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d54:	4b2d      	ldr	r3, [pc, #180]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	091b      	lsrs	r3, r3, #4
 8003d5a:	f003 030f 	and.w	r3, r3, #15
 8003d5e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003d60:	4a2b      	ldr	r2, [pc, #172]	@ (8003e10 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d68:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d10d      	bne.n	8003d8c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d74:	e00a      	b.n	8003d8c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	2b04      	cmp	r3, #4
 8003d7a:	d102      	bne.n	8003d82 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d7c:	4b25      	ldr	r3, [pc, #148]	@ (8003e14 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d7e:	61bb      	str	r3, [r7, #24]
 8003d80:	e004      	b.n	8003d8c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	2b08      	cmp	r3, #8
 8003d86:	d101      	bne.n	8003d8c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d88:	4b23      	ldr	r3, [pc, #140]	@ (8003e18 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d8a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	2b0c      	cmp	r3, #12
 8003d90:	d134      	bne.n	8003dfc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d92:	4b1e      	ldr	r3, [pc, #120]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	f003 0303 	and.w	r3, r3, #3
 8003d9a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d003      	beq.n	8003daa <HAL_RCC_GetSysClockFreq+0xa6>
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	2b03      	cmp	r3, #3
 8003da6:	d003      	beq.n	8003db0 <HAL_RCC_GetSysClockFreq+0xac>
 8003da8:	e005      	b.n	8003db6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003daa:	4b1a      	ldr	r3, [pc, #104]	@ (8003e14 <HAL_RCC_GetSysClockFreq+0x110>)
 8003dac:	617b      	str	r3, [r7, #20]
      break;
 8003dae:	e005      	b.n	8003dbc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003db0:	4b19      	ldr	r3, [pc, #100]	@ (8003e18 <HAL_RCC_GetSysClockFreq+0x114>)
 8003db2:	617b      	str	r3, [r7, #20]
      break;
 8003db4:	e002      	b.n	8003dbc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	617b      	str	r3, [r7, #20]
      break;
 8003dba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003dbc:	4b13      	ldr	r3, [pc, #76]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	091b      	lsrs	r3, r3, #4
 8003dc2:	f003 0307 	and.w	r3, r3, #7
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003dca:	4b10      	ldr	r3, [pc, #64]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	0a1b      	lsrs	r3, r3, #8
 8003dd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	fb03 f202 	mul.w	r2, r3, r2
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003de2:	4b0a      	ldr	r3, [pc, #40]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	0e5b      	lsrs	r3, r3, #25
 8003de8:	f003 0303 	and.w	r3, r3, #3
 8003dec:	3301      	adds	r3, #1
 8003dee:	005b      	lsls	r3, r3, #1
 8003df0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dfa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003dfc:	69bb      	ldr	r3, [r7, #24]
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3724      	adds	r7, #36	@ 0x24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	08006550 	.word	0x08006550
 8003e14:	00f42400 	.word	0x00f42400
 8003e18:	007a1200 	.word	0x007a1200

08003e1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e20:	4b03      	ldr	r3, [pc, #12]	@ (8003e30 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e22:	681b      	ldr	r3, [r3, #0]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	20000000 	.word	0x20000000

08003e34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003e38:	f7ff fff0 	bl	8003e1c <HAL_RCC_GetHCLKFreq>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	4b06      	ldr	r3, [pc, #24]	@ (8003e58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	0a1b      	lsrs	r3, r3, #8
 8003e44:	f003 0307 	and.w	r3, r3, #7
 8003e48:	4904      	ldr	r1, [pc, #16]	@ (8003e5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e4a:	5ccb      	ldrb	r3, [r1, r3]
 8003e4c:	f003 031f 	and.w	r3, r3, #31
 8003e50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	40021000 	.word	0x40021000
 8003e5c:	08006548 	.word	0x08006548

08003e60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e64:	f7ff ffda 	bl	8003e1c <HAL_RCC_GetHCLKFreq>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	4b06      	ldr	r3, [pc, #24]	@ (8003e84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	0adb      	lsrs	r3, r3, #11
 8003e70:	f003 0307 	and.w	r3, r3, #7
 8003e74:	4904      	ldr	r1, [pc, #16]	@ (8003e88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e76:	5ccb      	ldrb	r3, [r1, r3]
 8003e78:	f003 031f 	and.w	r3, r3, #31
 8003e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	40021000 	.word	0x40021000
 8003e88:	08006548 	.word	0x08006548

08003e8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003e94:	2300      	movs	r3, #0
 8003e96:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e98:	4b2a      	ldr	r3, [pc, #168]	@ (8003f44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d003      	beq.n	8003eac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003ea4:	f7ff f9b6 	bl	8003214 <HAL_PWREx_GetVoltageRange>
 8003ea8:	6178      	str	r0, [r7, #20]
 8003eaa:	e014      	b.n	8003ed6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003eac:	4b25      	ldr	r3, [pc, #148]	@ (8003f44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003eae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eb0:	4a24      	ldr	r2, [pc, #144]	@ (8003f44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003eb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003eb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003eb8:	4b22      	ldr	r3, [pc, #136]	@ (8003f44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003eba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ebc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ec0:	60fb      	str	r3, [r7, #12]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ec4:	f7ff f9a6 	bl	8003214 <HAL_PWREx_GetVoltageRange>
 8003ec8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003eca:	4b1e      	ldr	r3, [pc, #120]	@ (8003f44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ece:	4a1d      	ldr	r2, [pc, #116]	@ (8003f44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ed0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ed4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003edc:	d10b      	bne.n	8003ef6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2b80      	cmp	r3, #128	@ 0x80
 8003ee2:	d919      	bls.n	8003f18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2ba0      	cmp	r3, #160	@ 0xa0
 8003ee8:	d902      	bls.n	8003ef0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003eea:	2302      	movs	r3, #2
 8003eec:	613b      	str	r3, [r7, #16]
 8003eee:	e013      	b.n	8003f18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	613b      	str	r3, [r7, #16]
 8003ef4:	e010      	b.n	8003f18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2b80      	cmp	r3, #128	@ 0x80
 8003efa:	d902      	bls.n	8003f02 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003efc:	2303      	movs	r3, #3
 8003efe:	613b      	str	r3, [r7, #16]
 8003f00:	e00a      	b.n	8003f18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2b80      	cmp	r3, #128	@ 0x80
 8003f06:	d102      	bne.n	8003f0e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f08:	2302      	movs	r3, #2
 8003f0a:	613b      	str	r3, [r7, #16]
 8003f0c:	e004      	b.n	8003f18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2b70      	cmp	r3, #112	@ 0x70
 8003f12:	d101      	bne.n	8003f18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f14:	2301      	movs	r3, #1
 8003f16:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003f18:	4b0b      	ldr	r3, [pc, #44]	@ (8003f48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f023 0207 	bic.w	r2, r3, #7
 8003f20:	4909      	ldr	r1, [pc, #36]	@ (8003f48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003f28:	4b07      	ldr	r3, [pc, #28]	@ (8003f48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0307 	and.w	r3, r3, #7
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d001      	beq.n	8003f3a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e000      	b.n	8003f3c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3718      	adds	r7, #24
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	40021000 	.word	0x40021000
 8003f48:	40022000 	.word	0x40022000

08003f4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f54:	2300      	movs	r3, #0
 8003f56:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f58:	2300      	movs	r3, #0
 8003f5a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d031      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f6c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003f70:	d01a      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003f72:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003f76:	d814      	bhi.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d009      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003f7c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f80:	d10f      	bne.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003f82:	4b5d      	ldr	r3, [pc, #372]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	4a5c      	ldr	r2, [pc, #368]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f8c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f8e:	e00c      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	3304      	adds	r3, #4
 8003f94:	2100      	movs	r1, #0
 8003f96:	4618      	mov	r0, r3
 8003f98:	f000 fa44 	bl	8004424 <RCCEx_PLLSAI1_Config>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003fa0:	e003      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	74fb      	strb	r3, [r7, #19]
      break;
 8003fa6:	e000      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003fa8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003faa:	7cfb      	ldrb	r3, [r7, #19]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d10b      	bne.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fb0:	4b51      	ldr	r3, [pc, #324]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fb6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fbe:	494e      	ldr	r1, [pc, #312]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003fc6:	e001      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fc8:	7cfb      	ldrb	r3, [r7, #19]
 8003fca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f000 809e 	beq.w	8004116 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003fde:	4b46      	ldr	r3, [pc, #280]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fe2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d101      	bne.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003fea:	2301      	movs	r3, #1
 8003fec:	e000      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003fee:	2300      	movs	r3, #0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00d      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ff4:	4b40      	ldr	r3, [pc, #256]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ff8:	4a3f      	ldr	r2, [pc, #252]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ffa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ffe:	6593      	str	r3, [r2, #88]	@ 0x58
 8004000:	4b3d      	ldr	r3, [pc, #244]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004002:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004004:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004008:	60bb      	str	r3, [r7, #8]
 800400a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800400c:	2301      	movs	r3, #1
 800400e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004010:	4b3a      	ldr	r3, [pc, #232]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a39      	ldr	r2, [pc, #228]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004016:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800401a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800401c:	f7fc ffb0 	bl	8000f80 <HAL_GetTick>
 8004020:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004022:	e009      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004024:	f7fc ffac 	bl	8000f80 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b02      	cmp	r3, #2
 8004030:	d902      	bls.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	74fb      	strb	r3, [r7, #19]
        break;
 8004036:	e005      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004038:	4b30      	ldr	r3, [pc, #192]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004040:	2b00      	cmp	r3, #0
 8004042:	d0ef      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004044:	7cfb      	ldrb	r3, [r7, #19]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d15a      	bne.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800404a:	4b2b      	ldr	r3, [pc, #172]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800404c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004050:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004054:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d01e      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004060:	697a      	ldr	r2, [r7, #20]
 8004062:	429a      	cmp	r2, r3
 8004064:	d019      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004066:	4b24      	ldr	r3, [pc, #144]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004068:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800406c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004070:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004072:	4b21      	ldr	r3, [pc, #132]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004074:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004078:	4a1f      	ldr	r2, [pc, #124]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800407a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800407e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004082:	4b1d      	ldr	r3, [pc, #116]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004084:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004088:	4a1b      	ldr	r2, [pc, #108]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800408a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800408e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004092:	4a19      	ldr	r2, [pc, #100]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d016      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a4:	f7fc ff6c 	bl	8000f80 <HAL_GetTick>
 80040a8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040aa:	e00b      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ac:	f7fc ff68 	bl	8000f80 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d902      	bls.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	74fb      	strb	r3, [r7, #19]
            break;
 80040c2:	e006      	b.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040c4:	4b0c      	ldr	r3, [pc, #48]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d0ec      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80040d2:	7cfb      	ldrb	r3, [r7, #19]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d10b      	bne.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040d8:	4b07      	ldr	r3, [pc, #28]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040de:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040e6:	4904      	ldr	r1, [pc, #16]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80040ee:	e009      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040f0:	7cfb      	ldrb	r3, [r7, #19]
 80040f2:	74bb      	strb	r3, [r7, #18]
 80040f4:	e006      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80040f6:	bf00      	nop
 80040f8:	40021000 	.word	0x40021000
 80040fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004100:	7cfb      	ldrb	r3, [r7, #19]
 8004102:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004104:	7c7b      	ldrb	r3, [r7, #17]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d105      	bne.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800410a:	4b9e      	ldr	r3, [pc, #632]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800410c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800410e:	4a9d      	ldr	r2, [pc, #628]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004110:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004114:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00a      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004122:	4b98      	ldr	r3, [pc, #608]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004124:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004128:	f023 0203 	bic.w	r2, r3, #3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	4994      	ldr	r1, [pc, #592]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004132:	4313      	orrs	r3, r2
 8004134:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0302 	and.w	r3, r3, #2
 8004140:	2b00      	cmp	r3, #0
 8004142:	d00a      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004144:	4b8f      	ldr	r3, [pc, #572]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004146:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800414a:	f023 020c 	bic.w	r2, r3, #12
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004152:	498c      	ldr	r1, [pc, #560]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004154:	4313      	orrs	r3, r2
 8004156:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0304 	and.w	r3, r3, #4
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00a      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004166:	4b87      	ldr	r3, [pc, #540]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004168:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800416c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004174:	4983      	ldr	r1, [pc, #524]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004176:	4313      	orrs	r3, r2
 8004178:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0308 	and.w	r3, r3, #8
 8004184:	2b00      	cmp	r3, #0
 8004186:	d00a      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004188:	4b7e      	ldr	r3, [pc, #504]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800418a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800418e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004196:	497b      	ldr	r1, [pc, #492]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004198:	4313      	orrs	r3, r2
 800419a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0320 	and.w	r3, r3, #32
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00a      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041aa:	4b76      	ldr	r3, [pc, #472]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80041ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041b0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b8:	4972      	ldr	r1, [pc, #456]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00a      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041cc:	4b6d      	ldr	r3, [pc, #436]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80041ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041d2:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041da:	496a      	ldr	r1, [pc, #424]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00a      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041ee:	4b65      	ldr	r3, [pc, #404]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80041f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041f4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041fc:	4961      	ldr	r1, [pc, #388]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00a      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004210:	4b5c      	ldr	r3, [pc, #368]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004212:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004216:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800421e:	4959      	ldr	r1, [pc, #356]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004220:	4313      	orrs	r3, r2
 8004222:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00a      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004232:	4b54      	ldr	r3, [pc, #336]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004234:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004238:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004240:	4950      	ldr	r1, [pc, #320]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004242:	4313      	orrs	r3, r2
 8004244:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00a      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004254:	4b4b      	ldr	r3, [pc, #300]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800425a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004262:	4948      	ldr	r1, [pc, #288]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004264:	4313      	orrs	r3, r2
 8004266:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00a      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004276:	4b43      	ldr	r3, [pc, #268]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004278:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800427c:	f023 0203 	bic.w	r2, r3, #3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004284:	493f      	ldr	r1, [pc, #252]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004286:	4313      	orrs	r3, r2
 8004288:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d028      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004298:	4b3a      	ldr	r3, [pc, #232]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800429a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800429e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042a6:	4937      	ldr	r1, [pc, #220]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042b6:	d106      	bne.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042b8:	4b32      	ldr	r3, [pc, #200]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	4a31      	ldr	r2, [pc, #196]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80042be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042c2:	60d3      	str	r3, [r2, #12]
 80042c4:	e011      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80042ce:	d10c      	bne.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	3304      	adds	r3, #4
 80042d4:	2101      	movs	r1, #1
 80042d6:	4618      	mov	r0, r3
 80042d8:	f000 f8a4 	bl	8004424 <RCCEx_PLLSAI1_Config>
 80042dc:	4603      	mov	r3, r0
 80042de:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80042e0:	7cfb      	ldrb	r3, [r7, #19]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 80042e6:	7cfb      	ldrb	r3, [r7, #19]
 80042e8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d028      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80042f6:	4b23      	ldr	r3, [pc, #140]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80042f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042fc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004304:	491f      	ldr	r1, [pc, #124]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004306:	4313      	orrs	r3, r2
 8004308:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004310:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004314:	d106      	bne.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004316:	4b1b      	ldr	r3, [pc, #108]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	4a1a      	ldr	r2, [pc, #104]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800431c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004320:	60d3      	str	r3, [r2, #12]
 8004322:	e011      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004328:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800432c:	d10c      	bne.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	3304      	adds	r3, #4
 8004332:	2101      	movs	r1, #1
 8004334:	4618      	mov	r0, r3
 8004336:	f000 f875 	bl	8004424 <RCCEx_PLLSAI1_Config>
 800433a:	4603      	mov	r3, r0
 800433c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800433e:	7cfb      	ldrb	r3, [r7, #19]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d001      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8004344:	7cfb      	ldrb	r3, [r7, #19]
 8004346:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d02b      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004354:	4b0b      	ldr	r3, [pc, #44]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800435a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004362:	4908      	ldr	r1, [pc, #32]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004364:	4313      	orrs	r3, r2
 8004366:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800436e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004372:	d109      	bne.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004374:	4b03      	ldr	r3, [pc, #12]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	4a02      	ldr	r2, [pc, #8]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800437a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800437e:	60d3      	str	r3, [r2, #12]
 8004380:	e014      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x460>
 8004382:	bf00      	nop
 8004384:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800438c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004390:	d10c      	bne.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	3304      	adds	r3, #4
 8004396:	2101      	movs	r1, #1
 8004398:	4618      	mov	r0, r3
 800439a:	f000 f843 	bl	8004424 <RCCEx_PLLSAI1_Config>
 800439e:	4603      	mov	r3, r0
 80043a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043a2:	7cfb      	ldrb	r3, [r7, #19]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d001      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 80043a8:	7cfb      	ldrb	r3, [r7, #19]
 80043aa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d01c      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043b8:	4b19      	ldr	r3, [pc, #100]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80043ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043be:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043c6:	4916      	ldr	r1, [pc, #88]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043d6:	d10c      	bne.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	3304      	adds	r3, #4
 80043dc:	2102      	movs	r1, #2
 80043de:	4618      	mov	r0, r3
 80043e0:	f000 f820 	bl	8004424 <RCCEx_PLLSAI1_Config>
 80043e4:	4603      	mov	r3, r0
 80043e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043e8:	7cfb      	ldrb	r3, [r7, #19]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 80043ee:	7cfb      	ldrb	r3, [r7, #19]
 80043f0:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00a      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043fe:	4b08      	ldr	r3, [pc, #32]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004400:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004404:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800440c:	4904      	ldr	r1, [pc, #16]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800440e:	4313      	orrs	r3, r2
 8004410:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004414:	7cbb      	ldrb	r3, [r7, #18]
}
 8004416:	4618      	mov	r0, r3
 8004418:	3718      	adds	r7, #24
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	40021000 	.word	0x40021000

08004424 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800442e:	2300      	movs	r3, #0
 8004430:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004432:	4b74      	ldr	r3, [pc, #464]	@ (8004604 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	f003 0303 	and.w	r3, r3, #3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d018      	beq.n	8004470 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800443e:	4b71      	ldr	r3, [pc, #452]	@ (8004604 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	f003 0203 	and.w	r2, r3, #3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	429a      	cmp	r2, r3
 800444c:	d10d      	bne.n	800446a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
       ||
 8004452:	2b00      	cmp	r3, #0
 8004454:	d009      	beq.n	800446a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004456:	4b6b      	ldr	r3, [pc, #428]	@ (8004604 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	091b      	lsrs	r3, r3, #4
 800445c:	f003 0307 	and.w	r3, r3, #7
 8004460:	1c5a      	adds	r2, r3, #1
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
       ||
 8004466:	429a      	cmp	r2, r3
 8004468:	d047      	beq.n	80044fa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	73fb      	strb	r3, [r7, #15]
 800446e:	e044      	b.n	80044fa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2b03      	cmp	r3, #3
 8004476:	d018      	beq.n	80044aa <RCCEx_PLLSAI1_Config+0x86>
 8004478:	2b03      	cmp	r3, #3
 800447a:	d825      	bhi.n	80044c8 <RCCEx_PLLSAI1_Config+0xa4>
 800447c:	2b01      	cmp	r3, #1
 800447e:	d002      	beq.n	8004486 <RCCEx_PLLSAI1_Config+0x62>
 8004480:	2b02      	cmp	r3, #2
 8004482:	d009      	beq.n	8004498 <RCCEx_PLLSAI1_Config+0x74>
 8004484:	e020      	b.n	80044c8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004486:	4b5f      	ldr	r3, [pc, #380]	@ (8004604 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d11d      	bne.n	80044ce <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004496:	e01a      	b.n	80044ce <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004498:	4b5a      	ldr	r3, [pc, #360]	@ (8004604 <RCCEx_PLLSAI1_Config+0x1e0>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d116      	bne.n	80044d2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044a8:	e013      	b.n	80044d2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80044aa:	4b56      	ldr	r3, [pc, #344]	@ (8004604 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10f      	bne.n	80044d6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80044b6:	4b53      	ldr	r3, [pc, #332]	@ (8004604 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d109      	bne.n	80044d6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80044c6:	e006      	b.n	80044d6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	73fb      	strb	r3, [r7, #15]
      break;
 80044cc:	e004      	b.n	80044d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044ce:	bf00      	nop
 80044d0:	e002      	b.n	80044d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044d2:	bf00      	nop
 80044d4:	e000      	b.n	80044d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80044d8:	7bfb      	ldrb	r3, [r7, #15]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10d      	bne.n	80044fa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80044de:	4b49      	ldr	r3, [pc, #292]	@ (8004604 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6819      	ldr	r1, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	3b01      	subs	r3, #1
 80044f0:	011b      	lsls	r3, r3, #4
 80044f2:	430b      	orrs	r3, r1
 80044f4:	4943      	ldr	r1, [pc, #268]	@ (8004604 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80044fa:	7bfb      	ldrb	r3, [r7, #15]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d17c      	bne.n	80045fa <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004500:	4b40      	ldr	r3, [pc, #256]	@ (8004604 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a3f      	ldr	r2, [pc, #252]	@ (8004604 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004506:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800450a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800450c:	f7fc fd38 	bl	8000f80 <HAL_GetTick>
 8004510:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004512:	e009      	b.n	8004528 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004514:	f7fc fd34 	bl	8000f80 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d902      	bls.n	8004528 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	73fb      	strb	r3, [r7, #15]
        break;
 8004526:	e005      	b.n	8004534 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004528:	4b36      	ldr	r3, [pc, #216]	@ (8004604 <RCCEx_PLLSAI1_Config+0x1e0>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1ef      	bne.n	8004514 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004534:	7bfb      	ldrb	r3, [r7, #15]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d15f      	bne.n	80045fa <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d110      	bne.n	8004562 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004540:	4b30      	ldr	r3, [pc, #192]	@ (8004604 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004548:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	6892      	ldr	r2, [r2, #8]
 8004550:	0211      	lsls	r1, r2, #8
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	68d2      	ldr	r2, [r2, #12]
 8004556:	06d2      	lsls	r2, r2, #27
 8004558:	430a      	orrs	r2, r1
 800455a:	492a      	ldr	r1, [pc, #168]	@ (8004604 <RCCEx_PLLSAI1_Config+0x1e0>)
 800455c:	4313      	orrs	r3, r2
 800455e:	610b      	str	r3, [r1, #16]
 8004560:	e027      	b.n	80045b2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d112      	bne.n	800458e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004568:	4b26      	ldr	r3, [pc, #152]	@ (8004604 <RCCEx_PLLSAI1_Config+0x1e0>)
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004570:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	6892      	ldr	r2, [r2, #8]
 8004578:	0211      	lsls	r1, r2, #8
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	6912      	ldr	r2, [r2, #16]
 800457e:	0852      	lsrs	r2, r2, #1
 8004580:	3a01      	subs	r2, #1
 8004582:	0552      	lsls	r2, r2, #21
 8004584:	430a      	orrs	r2, r1
 8004586:	491f      	ldr	r1, [pc, #124]	@ (8004604 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004588:	4313      	orrs	r3, r2
 800458a:	610b      	str	r3, [r1, #16]
 800458c:	e011      	b.n	80045b2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800458e:	4b1d      	ldr	r3, [pc, #116]	@ (8004604 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004596:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	6892      	ldr	r2, [r2, #8]
 800459e:	0211      	lsls	r1, r2, #8
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	6952      	ldr	r2, [r2, #20]
 80045a4:	0852      	lsrs	r2, r2, #1
 80045a6:	3a01      	subs	r2, #1
 80045a8:	0652      	lsls	r2, r2, #25
 80045aa:	430a      	orrs	r2, r1
 80045ac:	4915      	ldr	r1, [pc, #84]	@ (8004604 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80045b2:	4b14      	ldr	r3, [pc, #80]	@ (8004604 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a13      	ldr	r2, [pc, #76]	@ (8004604 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045b8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80045bc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045be:	f7fc fcdf 	bl	8000f80 <HAL_GetTick>
 80045c2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045c4:	e009      	b.n	80045da <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045c6:	f7fc fcdb 	bl	8000f80 <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d902      	bls.n	80045da <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	73fb      	strb	r3, [r7, #15]
          break;
 80045d8:	e005      	b.n	80045e6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045da:	4b0a      	ldr	r3, [pc, #40]	@ (8004604 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d0ef      	beq.n	80045c6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80045e6:	7bfb      	ldrb	r3, [r7, #15]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d106      	bne.n	80045fa <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80045ec:	4b05      	ldr	r3, [pc, #20]	@ (8004604 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045ee:	691a      	ldr	r2, [r3, #16]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	4903      	ldr	r1, [pc, #12]	@ (8004604 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80045fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	40021000 	.word	0x40021000

08004608 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e049      	b.n	80046ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d106      	bne.n	8004634 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7fc fb06 	bl	8000c40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2202      	movs	r2, #2
 8004638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	3304      	adds	r3, #4
 8004644:	4619      	mov	r1, r3
 8004646:	4610      	mov	r0, r2
 8004648:	f000 fda4 	bl	8005194 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3708      	adds	r7, #8
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b082      	sub	sp, #8
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d101      	bne.n	80046c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e049      	b.n	800475c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d106      	bne.n	80046e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 f841 	bl	8004764 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2202      	movs	r2, #2
 80046e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	3304      	adds	r3, #4
 80046f2:	4619      	mov	r1, r3
 80046f4:	4610      	mov	r0, r2
 80046f6:	f000 fd4d 	bl	8005194 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2201      	movs	r2, #1
 8004716:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2201      	movs	r2, #1
 800471e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2201      	movs	r2, #1
 800472e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2201      	movs	r2, #1
 800473e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800475a:	2300      	movs	r3, #0
}
 800475c:	4618      	mov	r0, r3
 800475e:	3708      	adds	r7, #8
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004782:	2300      	movs	r3, #0
 8004784:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d109      	bne.n	80047a0 <HAL_TIM_PWM_Start_IT+0x28>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004792:	b2db      	uxtb	r3, r3
 8004794:	2b01      	cmp	r3, #1
 8004796:	bf14      	ite	ne
 8004798:	2301      	movne	r3, #1
 800479a:	2300      	moveq	r3, #0
 800479c:	b2db      	uxtb	r3, r3
 800479e:	e03c      	b.n	800481a <HAL_TIM_PWM_Start_IT+0xa2>
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	2b04      	cmp	r3, #4
 80047a4:	d109      	bne.n	80047ba <HAL_TIM_PWM_Start_IT+0x42>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	bf14      	ite	ne
 80047b2:	2301      	movne	r3, #1
 80047b4:	2300      	moveq	r3, #0
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	e02f      	b.n	800481a <HAL_TIM_PWM_Start_IT+0xa2>
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	2b08      	cmp	r3, #8
 80047be:	d109      	bne.n	80047d4 <HAL_TIM_PWM_Start_IT+0x5c>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	bf14      	ite	ne
 80047cc:	2301      	movne	r3, #1
 80047ce:	2300      	moveq	r3, #0
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	e022      	b.n	800481a <HAL_TIM_PWM_Start_IT+0xa2>
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	2b0c      	cmp	r3, #12
 80047d8:	d109      	bne.n	80047ee <HAL_TIM_PWM_Start_IT+0x76>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	bf14      	ite	ne
 80047e6:	2301      	movne	r3, #1
 80047e8:	2300      	moveq	r3, #0
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	e015      	b.n	800481a <HAL_TIM_PWM_Start_IT+0xa2>
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	2b10      	cmp	r3, #16
 80047f2:	d109      	bne.n	8004808 <HAL_TIM_PWM_Start_IT+0x90>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	bf14      	ite	ne
 8004800:	2301      	movne	r3, #1
 8004802:	2300      	moveq	r3, #0
 8004804:	b2db      	uxtb	r3, r3
 8004806:	e008      	b.n	800481a <HAL_TIM_PWM_Start_IT+0xa2>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800480e:	b2db      	uxtb	r3, r3
 8004810:	2b01      	cmp	r3, #1
 8004812:	bf14      	ite	ne
 8004814:	2301      	movne	r3, #1
 8004816:	2300      	moveq	r3, #0
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b00      	cmp	r3, #0
 800481c:	d001      	beq.n	8004822 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e0ce      	b.n	80049c0 <HAL_TIM_PWM_Start_IT+0x248>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d104      	bne.n	8004832 <HAL_TIM_PWM_Start_IT+0xba>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2202      	movs	r2, #2
 800482c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004830:	e023      	b.n	800487a <HAL_TIM_PWM_Start_IT+0x102>
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	2b04      	cmp	r3, #4
 8004836:	d104      	bne.n	8004842 <HAL_TIM_PWM_Start_IT+0xca>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2202      	movs	r2, #2
 800483c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004840:	e01b      	b.n	800487a <HAL_TIM_PWM_Start_IT+0x102>
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	2b08      	cmp	r3, #8
 8004846:	d104      	bne.n	8004852 <HAL_TIM_PWM_Start_IT+0xda>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2202      	movs	r2, #2
 800484c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004850:	e013      	b.n	800487a <HAL_TIM_PWM_Start_IT+0x102>
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	2b0c      	cmp	r3, #12
 8004856:	d104      	bne.n	8004862 <HAL_TIM_PWM_Start_IT+0xea>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2202      	movs	r2, #2
 800485c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004860:	e00b      	b.n	800487a <HAL_TIM_PWM_Start_IT+0x102>
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	2b10      	cmp	r3, #16
 8004866:	d104      	bne.n	8004872 <HAL_TIM_PWM_Start_IT+0xfa>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2202      	movs	r2, #2
 800486c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004870:	e003      	b.n	800487a <HAL_TIM_PWM_Start_IT+0x102>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2202      	movs	r2, #2
 8004876:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	2b0c      	cmp	r3, #12
 800487e:	d841      	bhi.n	8004904 <HAL_TIM_PWM_Start_IT+0x18c>
 8004880:	a201      	add	r2, pc, #4	@ (adr r2, 8004888 <HAL_TIM_PWM_Start_IT+0x110>)
 8004882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004886:	bf00      	nop
 8004888:	080048bd 	.word	0x080048bd
 800488c:	08004905 	.word	0x08004905
 8004890:	08004905 	.word	0x08004905
 8004894:	08004905 	.word	0x08004905
 8004898:	080048cf 	.word	0x080048cf
 800489c:	08004905 	.word	0x08004905
 80048a0:	08004905 	.word	0x08004905
 80048a4:	08004905 	.word	0x08004905
 80048a8:	080048e1 	.word	0x080048e1
 80048ac:	08004905 	.word	0x08004905
 80048b0:	08004905 	.word	0x08004905
 80048b4:	08004905 	.word	0x08004905
 80048b8:	080048f3 	.word	0x080048f3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68da      	ldr	r2, [r3, #12]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f042 0202 	orr.w	r2, r2, #2
 80048ca:	60da      	str	r2, [r3, #12]
      break;
 80048cc:	e01d      	b.n	800490a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68da      	ldr	r2, [r3, #12]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f042 0204 	orr.w	r2, r2, #4
 80048dc:	60da      	str	r2, [r3, #12]
      break;
 80048de:	e014      	b.n	800490a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68da      	ldr	r2, [r3, #12]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f042 0208 	orr.w	r2, r2, #8
 80048ee:	60da      	str	r2, [r3, #12]
      break;
 80048f0:	e00b      	b.n	800490a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68da      	ldr	r2, [r3, #12]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f042 0210 	orr.w	r2, r2, #16
 8004900:	60da      	str	r2, [r3, #12]
      break;
 8004902:	e002      	b.n	800490a <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	73fb      	strb	r3, [r7, #15]
      break;
 8004908:	bf00      	nop
  }

  if (status == HAL_OK)
 800490a:	7bfb      	ldrb	r3, [r7, #15]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d156      	bne.n	80049be <HAL_TIM_PWM_Start_IT+0x246>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2201      	movs	r2, #1
 8004916:	6839      	ldr	r1, [r7, #0]
 8004918:	4618      	mov	r0, r3
 800491a:	f000 ffc1 	bl	80058a0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a29      	ldr	r2, [pc, #164]	@ (80049c8 <HAL_TIM_PWM_Start_IT+0x250>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d009      	beq.n	800493c <HAL_TIM_PWM_Start_IT+0x1c4>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a27      	ldr	r2, [pc, #156]	@ (80049cc <HAL_TIM_PWM_Start_IT+0x254>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d004      	beq.n	800493c <HAL_TIM_PWM_Start_IT+0x1c4>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a26      	ldr	r2, [pc, #152]	@ (80049d0 <HAL_TIM_PWM_Start_IT+0x258>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d101      	bne.n	8004940 <HAL_TIM_PWM_Start_IT+0x1c8>
 800493c:	2301      	movs	r3, #1
 800493e:	e000      	b.n	8004942 <HAL_TIM_PWM_Start_IT+0x1ca>
 8004940:	2300      	movs	r3, #0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d007      	beq.n	8004956 <HAL_TIM_PWM_Start_IT+0x1de>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004954:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a1b      	ldr	r2, [pc, #108]	@ (80049c8 <HAL_TIM_PWM_Start_IT+0x250>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d00e      	beq.n	800497e <HAL_TIM_PWM_Start_IT+0x206>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004968:	d009      	beq.n	800497e <HAL_TIM_PWM_Start_IT+0x206>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a19      	ldr	r2, [pc, #100]	@ (80049d4 <HAL_TIM_PWM_Start_IT+0x25c>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d004      	beq.n	800497e <HAL_TIM_PWM_Start_IT+0x206>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a14      	ldr	r2, [pc, #80]	@ (80049cc <HAL_TIM_PWM_Start_IT+0x254>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d115      	bne.n	80049aa <HAL_TIM_PWM_Start_IT+0x232>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	689a      	ldr	r2, [r3, #8]
 8004984:	4b14      	ldr	r3, [pc, #80]	@ (80049d8 <HAL_TIM_PWM_Start_IT+0x260>)
 8004986:	4013      	ands	r3, r2
 8004988:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	2b06      	cmp	r3, #6
 800498e:	d015      	beq.n	80049bc <HAL_TIM_PWM_Start_IT+0x244>
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004996:	d011      	beq.n	80049bc <HAL_TIM_PWM_Start_IT+0x244>
      {
        __HAL_TIM_ENABLE(htim);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f042 0201 	orr.w	r2, r2, #1
 80049a6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049a8:	e008      	b.n	80049bc <HAL_TIM_PWM_Start_IT+0x244>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f042 0201 	orr.w	r2, r2, #1
 80049b8:	601a      	str	r2, [r3, #0]
 80049ba:	e000      	b.n	80049be <HAL_TIM_PWM_Start_IT+0x246>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049bc:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80049be:	7bfb      	ldrb	r3, [r7, #15]
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	40012c00 	.word	0x40012c00
 80049cc:	40014000 	.word	0x40014000
 80049d0:	40014400 	.word	0x40014400
 80049d4:	40000400 	.word	0x40000400
 80049d8:	00010007 	.word	0x00010007

080049dc <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049e6:	2300      	movs	r3, #0
 80049e8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	2b0c      	cmp	r3, #12
 80049ee:	d841      	bhi.n	8004a74 <HAL_TIM_PWM_Stop_IT+0x98>
 80049f0:	a201      	add	r2, pc, #4	@ (adr r2, 80049f8 <HAL_TIM_PWM_Stop_IT+0x1c>)
 80049f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f6:	bf00      	nop
 80049f8:	08004a2d 	.word	0x08004a2d
 80049fc:	08004a75 	.word	0x08004a75
 8004a00:	08004a75 	.word	0x08004a75
 8004a04:	08004a75 	.word	0x08004a75
 8004a08:	08004a3f 	.word	0x08004a3f
 8004a0c:	08004a75 	.word	0x08004a75
 8004a10:	08004a75 	.word	0x08004a75
 8004a14:	08004a75 	.word	0x08004a75
 8004a18:	08004a51 	.word	0x08004a51
 8004a1c:	08004a75 	.word	0x08004a75
 8004a20:	08004a75 	.word	0x08004a75
 8004a24:	08004a75 	.word	0x08004a75
 8004a28:	08004a63 	.word	0x08004a63
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68da      	ldr	r2, [r3, #12]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f022 0202 	bic.w	r2, r2, #2
 8004a3a:	60da      	str	r2, [r3, #12]
      break;
 8004a3c:	e01d      	b.n	8004a7a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68da      	ldr	r2, [r3, #12]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f022 0204 	bic.w	r2, r2, #4
 8004a4c:	60da      	str	r2, [r3, #12]
      break;
 8004a4e:	e014      	b.n	8004a7a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68da      	ldr	r2, [r3, #12]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f022 0208 	bic.w	r2, r2, #8
 8004a5e:	60da      	str	r2, [r3, #12]
      break;
 8004a60:	e00b      	b.n	8004a7a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68da      	ldr	r2, [r3, #12]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f022 0210 	bic.w	r2, r2, #16
 8004a70:	60da      	str	r2, [r3, #12]
      break;
 8004a72:	e002      	b.n	8004a7a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	73fb      	strb	r3, [r7, #15]
      break;
 8004a78:	bf00      	nop
  }

  if (status == HAL_OK)
 8004a7a:	7bfb      	ldrb	r3, [r7, #15]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d176      	bne.n	8004b6e <HAL_TIM_PWM_Stop_IT+0x192>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2200      	movs	r2, #0
 8004a86:	6839      	ldr	r1, [r7, #0]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f000 ff09 	bl	80058a0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a39      	ldr	r2, [pc, #228]	@ (8004b78 <HAL_TIM_PWM_Stop_IT+0x19c>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d009      	beq.n	8004aac <HAL_TIM_PWM_Stop_IT+0xd0>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a37      	ldr	r2, [pc, #220]	@ (8004b7c <HAL_TIM_PWM_Stop_IT+0x1a0>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d004      	beq.n	8004aac <HAL_TIM_PWM_Stop_IT+0xd0>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a36      	ldr	r2, [pc, #216]	@ (8004b80 <HAL_TIM_PWM_Stop_IT+0x1a4>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d101      	bne.n	8004ab0 <HAL_TIM_PWM_Stop_IT+0xd4>
 8004aac:	2301      	movs	r3, #1
 8004aae:	e000      	b.n	8004ab2 <HAL_TIM_PWM_Stop_IT+0xd6>
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d017      	beq.n	8004ae6 <HAL_TIM_PWM_Stop_IT+0x10a>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	6a1a      	ldr	r2, [r3, #32]
 8004abc:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10f      	bne.n	8004ae6 <HAL_TIM_PWM_Stop_IT+0x10a>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	6a1a      	ldr	r2, [r3, #32]
 8004acc:	f240 4344 	movw	r3, #1092	@ 0x444
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d107      	bne.n	8004ae6 <HAL_TIM_PWM_Stop_IT+0x10a>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004ae4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	6a1a      	ldr	r2, [r3, #32]
 8004aec:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004af0:	4013      	ands	r3, r2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10f      	bne.n	8004b16 <HAL_TIM_PWM_Stop_IT+0x13a>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	6a1a      	ldr	r2, [r3, #32]
 8004afc:	f240 4344 	movw	r3, #1092	@ 0x444
 8004b00:	4013      	ands	r3, r2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d107      	bne.n	8004b16 <HAL_TIM_PWM_Stop_IT+0x13a>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f022 0201 	bic.w	r2, r2, #1
 8004b14:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d104      	bne.n	8004b26 <HAL_TIM_PWM_Stop_IT+0x14a>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b24:	e023      	b.n	8004b6e <HAL_TIM_PWM_Stop_IT+0x192>
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	2b04      	cmp	r3, #4
 8004b2a:	d104      	bne.n	8004b36 <HAL_TIM_PWM_Stop_IT+0x15a>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b34:	e01b      	b.n	8004b6e <HAL_TIM_PWM_Stop_IT+0x192>
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	2b08      	cmp	r3, #8
 8004b3a:	d104      	bne.n	8004b46 <HAL_TIM_PWM_Stop_IT+0x16a>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b44:	e013      	b.n	8004b6e <HAL_TIM_PWM_Stop_IT+0x192>
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	2b0c      	cmp	r3, #12
 8004b4a:	d104      	bne.n	8004b56 <HAL_TIM_PWM_Stop_IT+0x17a>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b54:	e00b      	b.n	8004b6e <HAL_TIM_PWM_Stop_IT+0x192>
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	2b10      	cmp	r3, #16
 8004b5a:	d104      	bne.n	8004b66 <HAL_TIM_PWM_Stop_IT+0x18a>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b64:	e003      	b.n	8004b6e <HAL_TIM_PWM_Stop_IT+0x192>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8004b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3710      	adds	r7, #16
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	40012c00 	.word	0x40012c00
 8004b7c:	40014000 	.word	0x40014000
 8004b80:	40014400 	.word	0x40014400

08004b84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	f003 0302 	and.w	r3, r3, #2
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d020      	beq.n	8004be8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f003 0302 	and.w	r3, r3, #2
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d01b      	beq.n	8004be8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f06f 0202 	mvn.w	r2, #2
 8004bb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	f003 0303 	and.w	r3, r3, #3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d003      	beq.n	8004bd6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 facb 	bl	800516a <HAL_TIM_IC_CaptureCallback>
 8004bd4:	e005      	b.n	8004be2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 fabd 	bl	8005156 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f7fb fd75 	bl	80006cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	f003 0304 	and.w	r3, r3, #4
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d020      	beq.n	8004c34 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f003 0304 	and.w	r3, r3, #4
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d01b      	beq.n	8004c34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f06f 0204 	mvn.w	r2, #4
 8004c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2202      	movs	r2, #2
 8004c0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d003      	beq.n	8004c22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 faa5 	bl	800516a <HAL_TIM_IC_CaptureCallback>
 8004c20:	e005      	b.n	8004c2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 fa97 	bl	8005156 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f7fb fd4f 	bl	80006cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	f003 0308 	and.w	r3, r3, #8
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d020      	beq.n	8004c80 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f003 0308 	and.w	r3, r3, #8
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d01b      	beq.n	8004c80 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f06f 0208 	mvn.w	r2, #8
 8004c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2204      	movs	r2, #4
 8004c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	69db      	ldr	r3, [r3, #28]
 8004c5e:	f003 0303 	and.w	r3, r3, #3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d003      	beq.n	8004c6e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 fa7f 	bl	800516a <HAL_TIM_IC_CaptureCallback>
 8004c6c:	e005      	b.n	8004c7a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 fa71 	bl	8005156 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f7fb fd29 	bl	80006cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	f003 0310 	and.w	r3, r3, #16
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d020      	beq.n	8004ccc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f003 0310 	and.w	r3, r3, #16
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d01b      	beq.n	8004ccc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f06f 0210 	mvn.w	r2, #16
 8004c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2208      	movs	r2, #8
 8004ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	69db      	ldr	r3, [r3, #28]
 8004caa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d003      	beq.n	8004cba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 fa59 	bl	800516a <HAL_TIM_IC_CaptureCallback>
 8004cb8:	e005      	b.n	8004cc6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 fa4b 	bl	8005156 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f7fb fd03 	bl	80006cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00c      	beq.n	8004cf0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f003 0301 	and.w	r3, r3, #1
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d007      	beq.n	8004cf0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f06f 0201 	mvn.w	r2, #1
 8004ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 fa29 	bl	8005142 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00c      	beq.n	8004d14 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d007      	beq.n	8004d14 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 fedc 	bl	8005acc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00c      	beq.n	8004d38 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d007      	beq.n	8004d38 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 fed4 	bl	8005ae0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00c      	beq.n	8004d5c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d007      	beq.n	8004d5c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 fa11 	bl	800517e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	f003 0320 	and.w	r3, r3, #32
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00c      	beq.n	8004d80 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f003 0320 	and.w	r3, r3, #32
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d007      	beq.n	8004d80 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f06f 0220 	mvn.w	r2, #32
 8004d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 fe9c 	bl	8005ab8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d80:	bf00      	nop
 8004d82:	3710      	adds	r7, #16
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b086      	sub	sp, #24
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d94:	2300      	movs	r3, #0
 8004d96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d101      	bne.n	8004da6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004da2:	2302      	movs	r3, #2
 8004da4:	e0ff      	b.n	8004fa6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2201      	movs	r2, #1
 8004daa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2b14      	cmp	r3, #20
 8004db2:	f200 80f0 	bhi.w	8004f96 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004db6:	a201      	add	r2, pc, #4	@ (adr r2, 8004dbc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dbc:	08004e11 	.word	0x08004e11
 8004dc0:	08004f97 	.word	0x08004f97
 8004dc4:	08004f97 	.word	0x08004f97
 8004dc8:	08004f97 	.word	0x08004f97
 8004dcc:	08004e51 	.word	0x08004e51
 8004dd0:	08004f97 	.word	0x08004f97
 8004dd4:	08004f97 	.word	0x08004f97
 8004dd8:	08004f97 	.word	0x08004f97
 8004ddc:	08004e93 	.word	0x08004e93
 8004de0:	08004f97 	.word	0x08004f97
 8004de4:	08004f97 	.word	0x08004f97
 8004de8:	08004f97 	.word	0x08004f97
 8004dec:	08004ed3 	.word	0x08004ed3
 8004df0:	08004f97 	.word	0x08004f97
 8004df4:	08004f97 	.word	0x08004f97
 8004df8:	08004f97 	.word	0x08004f97
 8004dfc:	08004f15 	.word	0x08004f15
 8004e00:	08004f97 	.word	0x08004f97
 8004e04:	08004f97 	.word	0x08004f97
 8004e08:	08004f97 	.word	0x08004f97
 8004e0c:	08004f55 	.word	0x08004f55
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68b9      	ldr	r1, [r7, #8]
 8004e16:	4618      	mov	r0, r3
 8004e18:	f000 fa2a 	bl	8005270 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	699a      	ldr	r2, [r3, #24]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f042 0208 	orr.w	r2, r2, #8
 8004e2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	699a      	ldr	r2, [r3, #24]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f022 0204 	bic.w	r2, r2, #4
 8004e3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	6999      	ldr	r1, [r3, #24]
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	691a      	ldr	r2, [r3, #16]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	619a      	str	r2, [r3, #24]
      break;
 8004e4e:	e0a5      	b.n	8004f9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68b9      	ldr	r1, [r7, #8]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f000 fa86 	bl	8005368 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	699a      	ldr	r2, [r3, #24]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	699a      	ldr	r2, [r3, #24]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	6999      	ldr	r1, [r3, #24]
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	021a      	lsls	r2, r3, #8
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	430a      	orrs	r2, r1
 8004e8e:	619a      	str	r2, [r3, #24]
      break;
 8004e90:	e084      	b.n	8004f9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68b9      	ldr	r1, [r7, #8]
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f000 fadf 	bl	800545c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	69da      	ldr	r2, [r3, #28]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f042 0208 	orr.w	r2, r2, #8
 8004eac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	69da      	ldr	r2, [r3, #28]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f022 0204 	bic.w	r2, r2, #4
 8004ebc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	69d9      	ldr	r1, [r3, #28]
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	691a      	ldr	r2, [r3, #16]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	430a      	orrs	r2, r1
 8004ece:	61da      	str	r2, [r3, #28]
      break;
 8004ed0:	e064      	b.n	8004f9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68b9      	ldr	r1, [r7, #8]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f000 fb37 	bl	800554c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	69da      	ldr	r2, [r3, #28]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004eec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	69da      	ldr	r2, [r3, #28]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004efc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	69d9      	ldr	r1, [r3, #28]
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	021a      	lsls	r2, r3, #8
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	61da      	str	r2, [r3, #28]
      break;
 8004f12:	e043      	b.n	8004f9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68b9      	ldr	r1, [r7, #8]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f000 fb74 	bl	8005608 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f042 0208 	orr.w	r2, r2, #8
 8004f2e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f022 0204 	bic.w	r2, r2, #4
 8004f3e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	691a      	ldr	r2, [r3, #16]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004f52:	e023      	b.n	8004f9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68b9      	ldr	r1, [r7, #8]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f000 fbac 	bl	80056b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f6e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f7e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	021a      	lsls	r2, r3, #8
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	430a      	orrs	r2, r1
 8004f92:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004f94:	e002      	b.n	8004f9c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	75fb      	strb	r3, [r7, #23]
      break;
 8004f9a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004fa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3718      	adds	r7, #24
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop

08004fb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d101      	bne.n	8004fcc <HAL_TIM_ConfigClockSource+0x1c>
 8004fc8:	2302      	movs	r3, #2
 8004fca:	e0b6      	b.n	800513a <HAL_TIM_ConfigClockSource+0x18a>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2202      	movs	r2, #2
 8004fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004fee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ff6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005008:	d03e      	beq.n	8005088 <HAL_TIM_ConfigClockSource+0xd8>
 800500a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800500e:	f200 8087 	bhi.w	8005120 <HAL_TIM_ConfigClockSource+0x170>
 8005012:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005016:	f000 8086 	beq.w	8005126 <HAL_TIM_ConfigClockSource+0x176>
 800501a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800501e:	d87f      	bhi.n	8005120 <HAL_TIM_ConfigClockSource+0x170>
 8005020:	2b70      	cmp	r3, #112	@ 0x70
 8005022:	d01a      	beq.n	800505a <HAL_TIM_ConfigClockSource+0xaa>
 8005024:	2b70      	cmp	r3, #112	@ 0x70
 8005026:	d87b      	bhi.n	8005120 <HAL_TIM_ConfigClockSource+0x170>
 8005028:	2b60      	cmp	r3, #96	@ 0x60
 800502a:	d050      	beq.n	80050ce <HAL_TIM_ConfigClockSource+0x11e>
 800502c:	2b60      	cmp	r3, #96	@ 0x60
 800502e:	d877      	bhi.n	8005120 <HAL_TIM_ConfigClockSource+0x170>
 8005030:	2b50      	cmp	r3, #80	@ 0x50
 8005032:	d03c      	beq.n	80050ae <HAL_TIM_ConfigClockSource+0xfe>
 8005034:	2b50      	cmp	r3, #80	@ 0x50
 8005036:	d873      	bhi.n	8005120 <HAL_TIM_ConfigClockSource+0x170>
 8005038:	2b40      	cmp	r3, #64	@ 0x40
 800503a:	d058      	beq.n	80050ee <HAL_TIM_ConfigClockSource+0x13e>
 800503c:	2b40      	cmp	r3, #64	@ 0x40
 800503e:	d86f      	bhi.n	8005120 <HAL_TIM_ConfigClockSource+0x170>
 8005040:	2b30      	cmp	r3, #48	@ 0x30
 8005042:	d064      	beq.n	800510e <HAL_TIM_ConfigClockSource+0x15e>
 8005044:	2b30      	cmp	r3, #48	@ 0x30
 8005046:	d86b      	bhi.n	8005120 <HAL_TIM_ConfigClockSource+0x170>
 8005048:	2b20      	cmp	r3, #32
 800504a:	d060      	beq.n	800510e <HAL_TIM_ConfigClockSource+0x15e>
 800504c:	2b20      	cmp	r3, #32
 800504e:	d867      	bhi.n	8005120 <HAL_TIM_ConfigClockSource+0x170>
 8005050:	2b00      	cmp	r3, #0
 8005052:	d05c      	beq.n	800510e <HAL_TIM_ConfigClockSource+0x15e>
 8005054:	2b10      	cmp	r3, #16
 8005056:	d05a      	beq.n	800510e <HAL_TIM_ConfigClockSource+0x15e>
 8005058:	e062      	b.n	8005120 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800506a:	f000 fbf9 	bl	8005860 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800507c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68ba      	ldr	r2, [r7, #8]
 8005084:	609a      	str	r2, [r3, #8]
      break;
 8005086:	e04f      	b.n	8005128 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005098:	f000 fbe2 	bl	8005860 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	689a      	ldr	r2, [r3, #8]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80050aa:	609a      	str	r2, [r3, #8]
      break;
 80050ac:	e03c      	b.n	8005128 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ba:	461a      	mov	r2, r3
 80050bc:	f000 fb56 	bl	800576c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2150      	movs	r1, #80	@ 0x50
 80050c6:	4618      	mov	r0, r3
 80050c8:	f000 fbaf 	bl	800582a <TIM_ITRx_SetConfig>
      break;
 80050cc:	e02c      	b.n	8005128 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050da:	461a      	mov	r2, r3
 80050dc:	f000 fb75 	bl	80057ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2160      	movs	r1, #96	@ 0x60
 80050e6:	4618      	mov	r0, r3
 80050e8:	f000 fb9f 	bl	800582a <TIM_ITRx_SetConfig>
      break;
 80050ec:	e01c      	b.n	8005128 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050fa:	461a      	mov	r2, r3
 80050fc:	f000 fb36 	bl	800576c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2140      	movs	r1, #64	@ 0x40
 8005106:	4618      	mov	r0, r3
 8005108:	f000 fb8f 	bl	800582a <TIM_ITRx_SetConfig>
      break;
 800510c:	e00c      	b.n	8005128 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4619      	mov	r1, r3
 8005118:	4610      	mov	r0, r2
 800511a:	f000 fb86 	bl	800582a <TIM_ITRx_SetConfig>
      break;
 800511e:	e003      	b.n	8005128 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	73fb      	strb	r3, [r7, #15]
      break;
 8005124:	e000      	b.n	8005128 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005126:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005138:	7bfb      	ldrb	r3, [r7, #15]
}
 800513a:	4618      	mov	r0, r3
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005142:	b480      	push	{r7}
 8005144:	b083      	sub	sp, #12
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800514a:	bf00      	nop
 800514c:	370c      	adds	r7, #12
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr

08005156 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005156:	b480      	push	{r7}
 8005158:	b083      	sub	sp, #12
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800515e:	bf00      	nop
 8005160:	370c      	adds	r7, #12
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr

0800516a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800516a:	b480      	push	{r7}
 800516c:	b083      	sub	sp, #12
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005172:	bf00      	nop
 8005174:	370c      	adds	r7, #12
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr

0800517e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800517e:	b480      	push	{r7}
 8005180:	b083      	sub	sp, #12
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005186:	bf00      	nop
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
	...

08005194 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a2e      	ldr	r2, [pc, #184]	@ (8005260 <TIM_Base_SetConfig+0xcc>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d007      	beq.n	80051bc <TIM_Base_SetConfig+0x28>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051b2:	d003      	beq.n	80051bc <TIM_Base_SetConfig+0x28>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a2b      	ldr	r2, [pc, #172]	@ (8005264 <TIM_Base_SetConfig+0xd0>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d108      	bne.n	80051ce <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a23      	ldr	r2, [pc, #140]	@ (8005260 <TIM_Base_SetConfig+0xcc>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d00f      	beq.n	80051f6 <TIM_Base_SetConfig+0x62>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051dc:	d00b      	beq.n	80051f6 <TIM_Base_SetConfig+0x62>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a20      	ldr	r2, [pc, #128]	@ (8005264 <TIM_Base_SetConfig+0xd0>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d007      	beq.n	80051f6 <TIM_Base_SetConfig+0x62>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a1f      	ldr	r2, [pc, #124]	@ (8005268 <TIM_Base_SetConfig+0xd4>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d003      	beq.n	80051f6 <TIM_Base_SetConfig+0x62>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a1e      	ldr	r2, [pc, #120]	@ (800526c <TIM_Base_SetConfig+0xd8>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d108      	bne.n	8005208 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	4313      	orrs	r3, r2
 8005206:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	695b      	ldr	r3, [r3, #20]
 8005212:	4313      	orrs	r3, r2
 8005214:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	689a      	ldr	r2, [r3, #8]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a0c      	ldr	r2, [pc, #48]	@ (8005260 <TIM_Base_SetConfig+0xcc>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d007      	beq.n	8005244 <TIM_Base_SetConfig+0xb0>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a0c      	ldr	r2, [pc, #48]	@ (8005268 <TIM_Base_SetConfig+0xd4>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d003      	beq.n	8005244 <TIM_Base_SetConfig+0xb0>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a0b      	ldr	r2, [pc, #44]	@ (800526c <TIM_Base_SetConfig+0xd8>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d103      	bne.n	800524c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	691a      	ldr	r2, [r3, #16]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	615a      	str	r2, [r3, #20]
}
 8005252:	bf00      	nop
 8005254:	3714      	adds	r7, #20
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	40012c00 	.word	0x40012c00
 8005264:	40000400 	.word	0x40000400
 8005268:	40014000 	.word	0x40014000
 800526c:	40014400 	.word	0x40014400

08005270 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005270:	b480      	push	{r7}
 8005272:	b087      	sub	sp, #28
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a1b      	ldr	r3, [r3, #32]
 8005284:	f023 0201 	bic.w	r2, r3, #1
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800529e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f023 0303 	bic.w	r3, r3, #3
 80052aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	f023 0302 	bic.w	r3, r3, #2
 80052bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a24      	ldr	r2, [pc, #144]	@ (800535c <TIM_OC1_SetConfig+0xec>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d007      	beq.n	80052e0 <TIM_OC1_SetConfig+0x70>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a23      	ldr	r2, [pc, #140]	@ (8005360 <TIM_OC1_SetConfig+0xf0>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d003      	beq.n	80052e0 <TIM_OC1_SetConfig+0x70>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a22      	ldr	r2, [pc, #136]	@ (8005364 <TIM_OC1_SetConfig+0xf4>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d10c      	bne.n	80052fa <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	f023 0308 	bic.w	r3, r3, #8
 80052e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	697a      	ldr	r2, [r7, #20]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	f023 0304 	bic.w	r3, r3, #4
 80052f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a17      	ldr	r2, [pc, #92]	@ (800535c <TIM_OC1_SetConfig+0xec>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d007      	beq.n	8005312 <TIM_OC1_SetConfig+0xa2>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a16      	ldr	r2, [pc, #88]	@ (8005360 <TIM_OC1_SetConfig+0xf0>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d003      	beq.n	8005312 <TIM_OC1_SetConfig+0xa2>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a15      	ldr	r2, [pc, #84]	@ (8005364 <TIM_OC1_SetConfig+0xf4>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d111      	bne.n	8005336 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005318:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005320:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	4313      	orrs	r3, r2
 800532a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	4313      	orrs	r3, r2
 8005334:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	693a      	ldr	r2, [r7, #16]
 800533a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	685a      	ldr	r2, [r3, #4]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	621a      	str	r2, [r3, #32]
}
 8005350:	bf00      	nop
 8005352:	371c      	adds	r7, #28
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr
 800535c:	40012c00 	.word	0x40012c00
 8005360:	40014000 	.word	0x40014000
 8005364:	40014400 	.word	0x40014400

08005368 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005368:	b480      	push	{r7}
 800536a:	b087      	sub	sp, #28
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a1b      	ldr	r3, [r3, #32]
 8005376:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6a1b      	ldr	r3, [r3, #32]
 800537c:	f023 0210 	bic.w	r2, r3, #16
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005396:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800539a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	021b      	lsls	r3, r3, #8
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	f023 0320 	bic.w	r3, r3, #32
 80053b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	011b      	lsls	r3, r3, #4
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a22      	ldr	r2, [pc, #136]	@ (8005450 <TIM_OC2_SetConfig+0xe8>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d10d      	bne.n	80053e8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	011b      	lsls	r3, r3, #4
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	4313      	orrs	r3, r2
 80053de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a19      	ldr	r2, [pc, #100]	@ (8005450 <TIM_OC2_SetConfig+0xe8>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d007      	beq.n	8005400 <TIM_OC2_SetConfig+0x98>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a18      	ldr	r2, [pc, #96]	@ (8005454 <TIM_OC2_SetConfig+0xec>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d003      	beq.n	8005400 <TIM_OC2_SetConfig+0x98>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a17      	ldr	r2, [pc, #92]	@ (8005458 <TIM_OC2_SetConfig+0xf0>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d113      	bne.n	8005428 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005406:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800540e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	695b      	ldr	r3, [r3, #20]
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	4313      	orrs	r3, r2
 800541a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	699b      	ldr	r3, [r3, #24]
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	693a      	ldr	r2, [r7, #16]
 8005424:	4313      	orrs	r3, r2
 8005426:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	693a      	ldr	r2, [r7, #16]
 800542c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	685a      	ldr	r2, [r3, #4]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	697a      	ldr	r2, [r7, #20]
 8005440:	621a      	str	r2, [r3, #32]
}
 8005442:	bf00      	nop
 8005444:	371c      	adds	r7, #28
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop
 8005450:	40012c00 	.word	0x40012c00
 8005454:	40014000 	.word	0x40014000
 8005458:	40014400 	.word	0x40014400

0800545c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800545c:	b480      	push	{r7}
 800545e:	b087      	sub	sp, #28
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a1b      	ldr	r3, [r3, #32]
 8005470:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	69db      	ldr	r3, [r3, #28]
 8005482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800548a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800548e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f023 0303 	bic.w	r3, r3, #3
 8005496:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	4313      	orrs	r3, r2
 80054a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80054a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	021b      	lsls	r3, r3, #8
 80054b0:	697a      	ldr	r2, [r7, #20]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a21      	ldr	r2, [pc, #132]	@ (8005540 <TIM_OC3_SetConfig+0xe4>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d10d      	bne.n	80054da <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80054c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	021b      	lsls	r3, r3, #8
 80054cc:	697a      	ldr	r2, [r7, #20]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80054d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a18      	ldr	r2, [pc, #96]	@ (8005540 <TIM_OC3_SetConfig+0xe4>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d007      	beq.n	80054f2 <TIM_OC3_SetConfig+0x96>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a17      	ldr	r2, [pc, #92]	@ (8005544 <TIM_OC3_SetConfig+0xe8>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d003      	beq.n	80054f2 <TIM_OC3_SetConfig+0x96>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a16      	ldr	r2, [pc, #88]	@ (8005548 <TIM_OC3_SetConfig+0xec>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d113      	bne.n	800551a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80054f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005500:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	011b      	lsls	r3, r3, #4
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	4313      	orrs	r3, r2
 800550c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	699b      	ldr	r3, [r3, #24]
 8005512:	011b      	lsls	r3, r3, #4
 8005514:	693a      	ldr	r2, [r7, #16]
 8005516:	4313      	orrs	r3, r2
 8005518:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	685a      	ldr	r2, [r3, #4]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	697a      	ldr	r2, [r7, #20]
 8005532:	621a      	str	r2, [r3, #32]
}
 8005534:	bf00      	nop
 8005536:	371c      	adds	r7, #28
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr
 8005540:	40012c00 	.word	0x40012c00
 8005544:	40014000 	.word	0x40014000
 8005548:	40014400 	.word	0x40014400

0800554c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800554c:	b480      	push	{r7}
 800554e:	b087      	sub	sp, #28
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a1b      	ldr	r3, [r3, #32]
 8005560:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	69db      	ldr	r3, [r3, #28]
 8005572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800557a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800557e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005586:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	021b      	lsls	r3, r3, #8
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	4313      	orrs	r3, r2
 8005592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800559a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	031b      	lsls	r3, r3, #12
 80055a2:	693a      	ldr	r2, [r7, #16]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a14      	ldr	r2, [pc, #80]	@ (80055fc <TIM_OC4_SetConfig+0xb0>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d007      	beq.n	80055c0 <TIM_OC4_SetConfig+0x74>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a13      	ldr	r2, [pc, #76]	@ (8005600 <TIM_OC4_SetConfig+0xb4>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d003      	beq.n	80055c0 <TIM_OC4_SetConfig+0x74>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a12      	ldr	r2, [pc, #72]	@ (8005604 <TIM_OC4_SetConfig+0xb8>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d109      	bne.n	80055d4 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80055c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	695b      	ldr	r3, [r3, #20]
 80055cc:	019b      	lsls	r3, r3, #6
 80055ce:	697a      	ldr	r2, [r7, #20]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	685a      	ldr	r2, [r3, #4]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	693a      	ldr	r2, [r7, #16]
 80055ec:	621a      	str	r2, [r3, #32]
}
 80055ee:	bf00      	nop
 80055f0:	371c      	adds	r7, #28
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	40012c00 	.word	0x40012c00
 8005600:	40014000 	.word	0x40014000
 8005604:	40014400 	.word	0x40014400

08005608 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005608:	b480      	push	{r7}
 800560a:	b087      	sub	sp, #28
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a1b      	ldr	r3, [r3, #32]
 800561c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800562e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005636:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800563a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	4313      	orrs	r3, r2
 8005644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800564c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	041b      	lsls	r3, r3, #16
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	4313      	orrs	r3, r2
 8005658:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a13      	ldr	r2, [pc, #76]	@ (80056ac <TIM_OC5_SetConfig+0xa4>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d007      	beq.n	8005672 <TIM_OC5_SetConfig+0x6a>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a12      	ldr	r2, [pc, #72]	@ (80056b0 <TIM_OC5_SetConfig+0xa8>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d003      	beq.n	8005672 <TIM_OC5_SetConfig+0x6a>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a11      	ldr	r2, [pc, #68]	@ (80056b4 <TIM_OC5_SetConfig+0xac>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d109      	bne.n	8005686 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005678:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	695b      	ldr	r3, [r3, #20]
 800567e:	021b      	lsls	r3, r3, #8
 8005680:	697a      	ldr	r2, [r7, #20]
 8005682:	4313      	orrs	r3, r2
 8005684:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	697a      	ldr	r2, [r7, #20]
 800568a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	685a      	ldr	r2, [r3, #4]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	693a      	ldr	r2, [r7, #16]
 800569e:	621a      	str	r2, [r3, #32]
}
 80056a0:	bf00      	nop
 80056a2:	371c      	adds	r7, #28
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr
 80056ac:	40012c00 	.word	0x40012c00
 80056b0:	40014000 	.word	0x40014000
 80056b4:	40014400 	.word	0x40014400

080056b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b087      	sub	sp, #28
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a1b      	ldr	r3, [r3, #32]
 80056cc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80056e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	021b      	lsls	r3, r3, #8
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80056fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	051b      	lsls	r3, r3, #20
 8005706:	693a      	ldr	r2, [r7, #16]
 8005708:	4313      	orrs	r3, r2
 800570a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a14      	ldr	r2, [pc, #80]	@ (8005760 <TIM_OC6_SetConfig+0xa8>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d007      	beq.n	8005724 <TIM_OC6_SetConfig+0x6c>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a13      	ldr	r2, [pc, #76]	@ (8005764 <TIM_OC6_SetConfig+0xac>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d003      	beq.n	8005724 <TIM_OC6_SetConfig+0x6c>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a12      	ldr	r2, [pc, #72]	@ (8005768 <TIM_OC6_SetConfig+0xb0>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d109      	bne.n	8005738 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800572a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	695b      	ldr	r3, [r3, #20]
 8005730:	029b      	lsls	r3, r3, #10
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	4313      	orrs	r3, r2
 8005736:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	685a      	ldr	r2, [r3, #4]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	621a      	str	r2, [r3, #32]
}
 8005752:	bf00      	nop
 8005754:	371c      	adds	r7, #28
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	40012c00 	.word	0x40012c00
 8005764:	40014000 	.word	0x40014000
 8005768:	40014400 	.word	0x40014400

0800576c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800576c:	b480      	push	{r7}
 800576e:	b087      	sub	sp, #28
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6a1b      	ldr	r3, [r3, #32]
 800577c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	f023 0201 	bic.w	r2, r3, #1
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005796:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	011b      	lsls	r3, r3, #4
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	4313      	orrs	r3, r2
 80057a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	f023 030a 	bic.w	r3, r3, #10
 80057a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057aa:	697a      	ldr	r2, [r7, #20]
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	693a      	ldr	r2, [r7, #16]
 80057b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	621a      	str	r2, [r3, #32]
}
 80057be:	bf00      	nop
 80057c0:	371c      	adds	r7, #28
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr

080057ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057ca:	b480      	push	{r7}
 80057cc:	b087      	sub	sp, #28
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	60f8      	str	r0, [r7, #12]
 80057d2:	60b9      	str	r1, [r7, #8]
 80057d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6a1b      	ldr	r3, [r3, #32]
 80057e0:	f023 0210 	bic.w	r2, r3, #16
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	699b      	ldr	r3, [r3, #24]
 80057ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80057f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	031b      	lsls	r3, r3, #12
 80057fa:	693a      	ldr	r2, [r7, #16]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005806:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	011b      	lsls	r3, r3, #4
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	4313      	orrs	r3, r2
 8005810:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	693a      	ldr	r2, [r7, #16]
 8005816:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	621a      	str	r2, [r3, #32]
}
 800581e:	bf00      	nop
 8005820:	371c      	adds	r7, #28
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr

0800582a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800582a:	b480      	push	{r7}
 800582c:	b085      	sub	sp, #20
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
 8005832:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005840:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005842:	683a      	ldr	r2, [r7, #0]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	4313      	orrs	r3, r2
 8005848:	f043 0307 	orr.w	r3, r3, #7
 800584c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	609a      	str	r2, [r3, #8]
}
 8005854:	bf00      	nop
 8005856:	3714      	adds	r7, #20
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005860:	b480      	push	{r7}
 8005862:	b087      	sub	sp, #28
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	607a      	str	r2, [r7, #4]
 800586c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800587a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	021a      	lsls	r2, r3, #8
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	431a      	orrs	r2, r3
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	4313      	orrs	r3, r2
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	4313      	orrs	r3, r2
 800588c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	697a      	ldr	r2, [r7, #20]
 8005892:	609a      	str	r2, [r3, #8]
}
 8005894:	bf00      	nop
 8005896:	371c      	adds	r7, #28
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b087      	sub	sp, #28
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	f003 031f 	and.w	r3, r3, #31
 80058b2:	2201      	movs	r2, #1
 80058b4:	fa02 f303 	lsl.w	r3, r2, r3
 80058b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6a1a      	ldr	r2, [r3, #32]
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	43db      	mvns	r3, r3
 80058c2:	401a      	ands	r2, r3
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6a1a      	ldr	r2, [r3, #32]
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	f003 031f 	and.w	r3, r3, #31
 80058d2:	6879      	ldr	r1, [r7, #4]
 80058d4:	fa01 f303 	lsl.w	r3, r1, r3
 80058d8:	431a      	orrs	r2, r3
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	621a      	str	r2, [r3, #32]
}
 80058de:	bf00      	nop
 80058e0:	371c      	adds	r7, #28
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr
	...

080058ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b085      	sub	sp, #20
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d101      	bne.n	8005904 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005900:	2302      	movs	r3, #2
 8005902:	e054      	b.n	80059ae <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2202      	movs	r2, #2
 8005910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a24      	ldr	r2, [pc, #144]	@ (80059bc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d108      	bne.n	8005940 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005934:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	4313      	orrs	r3, r2
 800593e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005946:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	4313      	orrs	r3, r2
 8005950:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a17      	ldr	r2, [pc, #92]	@ (80059bc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d00e      	beq.n	8005982 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800596c:	d009      	beq.n	8005982 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a13      	ldr	r2, [pc, #76]	@ (80059c0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d004      	beq.n	8005982 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a11      	ldr	r2, [pc, #68]	@ (80059c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d10c      	bne.n	800599c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005988:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	68ba      	ldr	r2, [r7, #8]
 8005990:	4313      	orrs	r3, r2
 8005992:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68ba      	ldr	r2, [r7, #8]
 800599a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3714      	adds	r7, #20
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	40012c00 	.word	0x40012c00
 80059c0:	40000400 	.word	0x40000400
 80059c4:	40014000 	.word	0x40014000

080059c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80059d2:	2300      	movs	r3, #0
 80059d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d101      	bne.n	80059e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80059e0:	2302      	movs	r3, #2
 80059e2:	e060      	b.n	8005aa6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	695b      	ldr	r3, [r3, #20]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	041b      	lsls	r3, r3, #16
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a14      	ldr	r2, [pc, #80]	@ (8005ab4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d115      	bne.n	8005a94 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a72:	051b      	lsls	r3, r3, #20
 8005a74:	4313      	orrs	r3, r2
 8005a76:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	69db      	ldr	r3, [r3, #28]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	6a1b      	ldr	r3, [r3, #32]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3714      	adds	r7, #20
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	40012c00 	.word	0x40012c00

08005ab8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ac0:	bf00      	nop
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ad4:	bf00      	nop
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d101      	bne.n	8005b06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e040      	b.n	8005b88 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d106      	bne.n	8005b1c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f7fb f8ee 	bl	8000cf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2224      	movs	r2, #36	@ 0x24
 8005b20:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f022 0201 	bic.w	r2, r2, #1
 8005b30:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d002      	beq.n	8005b40 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 faae 	bl	800609c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f000 f825 	bl	8005b90 <UART_SetConfig>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d101      	bne.n	8005b50 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e01b      	b.n	8005b88 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	685a      	ldr	r2, [r3, #4]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	689a      	ldr	r2, [r3, #8]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f042 0201 	orr.w	r2, r2, #1
 8005b7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f000 fb2d 	bl	80061e0 <UART_CheckIdleState>
 8005b86:	4603      	mov	r3, r0
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3708      	adds	r7, #8
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b94:	b08a      	sub	sp, #40	@ 0x28
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	689a      	ldr	r2, [r3, #8]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	431a      	orrs	r2, r3
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	431a      	orrs	r2, r3
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	69db      	ldr	r3, [r3, #28]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	4ba5      	ldr	r3, [pc, #660]	@ (8005e54 <UART_SetConfig+0x2c4>)
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	6812      	ldr	r2, [r2, #0]
 8005bc6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005bc8:	430b      	orrs	r3, r1
 8005bca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	68da      	ldr	r2, [r3, #12]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	430a      	orrs	r2, r1
 8005be0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	699b      	ldr	r3, [r3, #24]
 8005be6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a9a      	ldr	r2, [pc, #616]	@ (8005e58 <UART_SetConfig+0x2c8>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d004      	beq.n	8005bfc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6a1b      	ldr	r3, [r3, #32]
 8005bf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c0c:	430a      	orrs	r2, r1
 8005c0e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a91      	ldr	r2, [pc, #580]	@ (8005e5c <UART_SetConfig+0x2cc>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d126      	bne.n	8005c68 <UART_SetConfig+0xd8>
 8005c1a:	4b91      	ldr	r3, [pc, #580]	@ (8005e60 <UART_SetConfig+0x2d0>)
 8005c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c20:	f003 0303 	and.w	r3, r3, #3
 8005c24:	2b03      	cmp	r3, #3
 8005c26:	d81b      	bhi.n	8005c60 <UART_SetConfig+0xd0>
 8005c28:	a201      	add	r2, pc, #4	@ (adr r2, 8005c30 <UART_SetConfig+0xa0>)
 8005c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c2e:	bf00      	nop
 8005c30:	08005c41 	.word	0x08005c41
 8005c34:	08005c51 	.word	0x08005c51
 8005c38:	08005c49 	.word	0x08005c49
 8005c3c:	08005c59 	.word	0x08005c59
 8005c40:	2301      	movs	r3, #1
 8005c42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c46:	e0d6      	b.n	8005df6 <UART_SetConfig+0x266>
 8005c48:	2302      	movs	r3, #2
 8005c4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c4e:	e0d2      	b.n	8005df6 <UART_SetConfig+0x266>
 8005c50:	2304      	movs	r3, #4
 8005c52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c56:	e0ce      	b.n	8005df6 <UART_SetConfig+0x266>
 8005c58:	2308      	movs	r3, #8
 8005c5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c5e:	e0ca      	b.n	8005df6 <UART_SetConfig+0x266>
 8005c60:	2310      	movs	r3, #16
 8005c62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c66:	e0c6      	b.n	8005df6 <UART_SetConfig+0x266>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a7d      	ldr	r2, [pc, #500]	@ (8005e64 <UART_SetConfig+0x2d4>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d138      	bne.n	8005ce4 <UART_SetConfig+0x154>
 8005c72:	4b7b      	ldr	r3, [pc, #492]	@ (8005e60 <UART_SetConfig+0x2d0>)
 8005c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c78:	f003 030c 	and.w	r3, r3, #12
 8005c7c:	2b0c      	cmp	r3, #12
 8005c7e:	d82d      	bhi.n	8005cdc <UART_SetConfig+0x14c>
 8005c80:	a201      	add	r2, pc, #4	@ (adr r2, 8005c88 <UART_SetConfig+0xf8>)
 8005c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c86:	bf00      	nop
 8005c88:	08005cbd 	.word	0x08005cbd
 8005c8c:	08005cdd 	.word	0x08005cdd
 8005c90:	08005cdd 	.word	0x08005cdd
 8005c94:	08005cdd 	.word	0x08005cdd
 8005c98:	08005ccd 	.word	0x08005ccd
 8005c9c:	08005cdd 	.word	0x08005cdd
 8005ca0:	08005cdd 	.word	0x08005cdd
 8005ca4:	08005cdd 	.word	0x08005cdd
 8005ca8:	08005cc5 	.word	0x08005cc5
 8005cac:	08005cdd 	.word	0x08005cdd
 8005cb0:	08005cdd 	.word	0x08005cdd
 8005cb4:	08005cdd 	.word	0x08005cdd
 8005cb8:	08005cd5 	.word	0x08005cd5
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cc2:	e098      	b.n	8005df6 <UART_SetConfig+0x266>
 8005cc4:	2302      	movs	r3, #2
 8005cc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cca:	e094      	b.n	8005df6 <UART_SetConfig+0x266>
 8005ccc:	2304      	movs	r3, #4
 8005cce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cd2:	e090      	b.n	8005df6 <UART_SetConfig+0x266>
 8005cd4:	2308      	movs	r3, #8
 8005cd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cda:	e08c      	b.n	8005df6 <UART_SetConfig+0x266>
 8005cdc:	2310      	movs	r3, #16
 8005cde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ce2:	e088      	b.n	8005df6 <UART_SetConfig+0x266>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a5f      	ldr	r2, [pc, #380]	@ (8005e68 <UART_SetConfig+0x2d8>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d125      	bne.n	8005d3a <UART_SetConfig+0x1aa>
 8005cee:	4b5c      	ldr	r3, [pc, #368]	@ (8005e60 <UART_SetConfig+0x2d0>)
 8005cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cf4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005cf8:	2b30      	cmp	r3, #48	@ 0x30
 8005cfa:	d016      	beq.n	8005d2a <UART_SetConfig+0x19a>
 8005cfc:	2b30      	cmp	r3, #48	@ 0x30
 8005cfe:	d818      	bhi.n	8005d32 <UART_SetConfig+0x1a2>
 8005d00:	2b20      	cmp	r3, #32
 8005d02:	d00a      	beq.n	8005d1a <UART_SetConfig+0x18a>
 8005d04:	2b20      	cmp	r3, #32
 8005d06:	d814      	bhi.n	8005d32 <UART_SetConfig+0x1a2>
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d002      	beq.n	8005d12 <UART_SetConfig+0x182>
 8005d0c:	2b10      	cmp	r3, #16
 8005d0e:	d008      	beq.n	8005d22 <UART_SetConfig+0x192>
 8005d10:	e00f      	b.n	8005d32 <UART_SetConfig+0x1a2>
 8005d12:	2300      	movs	r3, #0
 8005d14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d18:	e06d      	b.n	8005df6 <UART_SetConfig+0x266>
 8005d1a:	2302      	movs	r3, #2
 8005d1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d20:	e069      	b.n	8005df6 <UART_SetConfig+0x266>
 8005d22:	2304      	movs	r3, #4
 8005d24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d28:	e065      	b.n	8005df6 <UART_SetConfig+0x266>
 8005d2a:	2308      	movs	r3, #8
 8005d2c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d30:	e061      	b.n	8005df6 <UART_SetConfig+0x266>
 8005d32:	2310      	movs	r3, #16
 8005d34:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d38:	e05d      	b.n	8005df6 <UART_SetConfig+0x266>
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a4b      	ldr	r2, [pc, #300]	@ (8005e6c <UART_SetConfig+0x2dc>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d125      	bne.n	8005d90 <UART_SetConfig+0x200>
 8005d44:	4b46      	ldr	r3, [pc, #280]	@ (8005e60 <UART_SetConfig+0x2d0>)
 8005d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d4a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005d4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005d50:	d016      	beq.n	8005d80 <UART_SetConfig+0x1f0>
 8005d52:	2bc0      	cmp	r3, #192	@ 0xc0
 8005d54:	d818      	bhi.n	8005d88 <UART_SetConfig+0x1f8>
 8005d56:	2b80      	cmp	r3, #128	@ 0x80
 8005d58:	d00a      	beq.n	8005d70 <UART_SetConfig+0x1e0>
 8005d5a:	2b80      	cmp	r3, #128	@ 0x80
 8005d5c:	d814      	bhi.n	8005d88 <UART_SetConfig+0x1f8>
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d002      	beq.n	8005d68 <UART_SetConfig+0x1d8>
 8005d62:	2b40      	cmp	r3, #64	@ 0x40
 8005d64:	d008      	beq.n	8005d78 <UART_SetConfig+0x1e8>
 8005d66:	e00f      	b.n	8005d88 <UART_SetConfig+0x1f8>
 8005d68:	2300      	movs	r3, #0
 8005d6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d6e:	e042      	b.n	8005df6 <UART_SetConfig+0x266>
 8005d70:	2302      	movs	r3, #2
 8005d72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d76:	e03e      	b.n	8005df6 <UART_SetConfig+0x266>
 8005d78:	2304      	movs	r3, #4
 8005d7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d7e:	e03a      	b.n	8005df6 <UART_SetConfig+0x266>
 8005d80:	2308      	movs	r3, #8
 8005d82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d86:	e036      	b.n	8005df6 <UART_SetConfig+0x266>
 8005d88:	2310      	movs	r3, #16
 8005d8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d8e:	e032      	b.n	8005df6 <UART_SetConfig+0x266>
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a30      	ldr	r2, [pc, #192]	@ (8005e58 <UART_SetConfig+0x2c8>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d12a      	bne.n	8005df0 <UART_SetConfig+0x260>
 8005d9a:	4b31      	ldr	r3, [pc, #196]	@ (8005e60 <UART_SetConfig+0x2d0>)
 8005d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005da0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005da4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005da8:	d01a      	beq.n	8005de0 <UART_SetConfig+0x250>
 8005daa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005dae:	d81b      	bhi.n	8005de8 <UART_SetConfig+0x258>
 8005db0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005db4:	d00c      	beq.n	8005dd0 <UART_SetConfig+0x240>
 8005db6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005dba:	d815      	bhi.n	8005de8 <UART_SetConfig+0x258>
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d003      	beq.n	8005dc8 <UART_SetConfig+0x238>
 8005dc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005dc4:	d008      	beq.n	8005dd8 <UART_SetConfig+0x248>
 8005dc6:	e00f      	b.n	8005de8 <UART_SetConfig+0x258>
 8005dc8:	2300      	movs	r3, #0
 8005dca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dce:	e012      	b.n	8005df6 <UART_SetConfig+0x266>
 8005dd0:	2302      	movs	r3, #2
 8005dd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dd6:	e00e      	b.n	8005df6 <UART_SetConfig+0x266>
 8005dd8:	2304      	movs	r3, #4
 8005dda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dde:	e00a      	b.n	8005df6 <UART_SetConfig+0x266>
 8005de0:	2308      	movs	r3, #8
 8005de2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005de6:	e006      	b.n	8005df6 <UART_SetConfig+0x266>
 8005de8:	2310      	movs	r3, #16
 8005dea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dee:	e002      	b.n	8005df6 <UART_SetConfig+0x266>
 8005df0:	2310      	movs	r3, #16
 8005df2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a17      	ldr	r2, [pc, #92]	@ (8005e58 <UART_SetConfig+0x2c8>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	f040 808b 	bne.w	8005f18 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e02:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005e06:	2b08      	cmp	r3, #8
 8005e08:	d834      	bhi.n	8005e74 <UART_SetConfig+0x2e4>
 8005e0a:	a201      	add	r2, pc, #4	@ (adr r2, 8005e10 <UART_SetConfig+0x280>)
 8005e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e10:	08005e35 	.word	0x08005e35
 8005e14:	08005e75 	.word	0x08005e75
 8005e18:	08005e3d 	.word	0x08005e3d
 8005e1c:	08005e75 	.word	0x08005e75
 8005e20:	08005e43 	.word	0x08005e43
 8005e24:	08005e75 	.word	0x08005e75
 8005e28:	08005e75 	.word	0x08005e75
 8005e2c:	08005e75 	.word	0x08005e75
 8005e30:	08005e4b 	.word	0x08005e4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e34:	f7fd fffe 	bl	8003e34 <HAL_RCC_GetPCLK1Freq>
 8005e38:	61f8      	str	r0, [r7, #28]
        break;
 8005e3a:	e021      	b.n	8005e80 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8005e70 <UART_SetConfig+0x2e0>)
 8005e3e:	61fb      	str	r3, [r7, #28]
        break;
 8005e40:	e01e      	b.n	8005e80 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e42:	f7fd ff5f 	bl	8003d04 <HAL_RCC_GetSysClockFreq>
 8005e46:	61f8      	str	r0, [r7, #28]
        break;
 8005e48:	e01a      	b.n	8005e80 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e4e:	61fb      	str	r3, [r7, #28]
        break;
 8005e50:	e016      	b.n	8005e80 <UART_SetConfig+0x2f0>
 8005e52:	bf00      	nop
 8005e54:	efff69f3 	.word	0xefff69f3
 8005e58:	40008000 	.word	0x40008000
 8005e5c:	40013800 	.word	0x40013800
 8005e60:	40021000 	.word	0x40021000
 8005e64:	40004400 	.word	0x40004400
 8005e68:	40004800 	.word	0x40004800
 8005e6c:	40004c00 	.word	0x40004c00
 8005e70:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005e74:	2300      	movs	r3, #0
 8005e76:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005e7e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	f000 80fa 	beq.w	800607c <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	685a      	ldr	r2, [r3, #4]
 8005e8c:	4613      	mov	r3, r2
 8005e8e:	005b      	lsls	r3, r3, #1
 8005e90:	4413      	add	r3, r2
 8005e92:	69fa      	ldr	r2, [r7, #28]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d305      	bcc.n	8005ea4 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e9e:	69fa      	ldr	r2, [r7, #28]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d903      	bls.n	8005eac <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005eaa:	e0e7      	b.n	800607c <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	461c      	mov	r4, r3
 8005eb2:	4615      	mov	r5, r2
 8005eb4:	f04f 0200 	mov.w	r2, #0
 8005eb8:	f04f 0300 	mov.w	r3, #0
 8005ebc:	022b      	lsls	r3, r5, #8
 8005ebe:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005ec2:	0222      	lsls	r2, r4, #8
 8005ec4:	68f9      	ldr	r1, [r7, #12]
 8005ec6:	6849      	ldr	r1, [r1, #4]
 8005ec8:	0849      	lsrs	r1, r1, #1
 8005eca:	2000      	movs	r0, #0
 8005ecc:	4688      	mov	r8, r1
 8005ece:	4681      	mov	r9, r0
 8005ed0:	eb12 0a08 	adds.w	sl, r2, r8
 8005ed4:	eb43 0b09 	adc.w	fp, r3, r9
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	603b      	str	r3, [r7, #0]
 8005ee0:	607a      	str	r2, [r7, #4]
 8005ee2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ee6:	4650      	mov	r0, sl
 8005ee8:	4659      	mov	r1, fp
 8005eea:	f7fa f973 	bl	80001d4 <__aeabi_uldivmod>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005efc:	d308      	bcc.n	8005f10 <UART_SetConfig+0x380>
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f04:	d204      	bcs.n	8005f10 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	69ba      	ldr	r2, [r7, #24]
 8005f0c:	60da      	str	r2, [r3, #12]
 8005f0e:	e0b5      	b.n	800607c <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005f16:	e0b1      	b.n	800607c <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	69db      	ldr	r3, [r3, #28]
 8005f1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f20:	d15d      	bne.n	8005fde <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8005f22:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005f26:	2b08      	cmp	r3, #8
 8005f28:	d827      	bhi.n	8005f7a <UART_SetConfig+0x3ea>
 8005f2a:	a201      	add	r2, pc, #4	@ (adr r2, 8005f30 <UART_SetConfig+0x3a0>)
 8005f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f30:	08005f55 	.word	0x08005f55
 8005f34:	08005f5d 	.word	0x08005f5d
 8005f38:	08005f65 	.word	0x08005f65
 8005f3c:	08005f7b 	.word	0x08005f7b
 8005f40:	08005f6b 	.word	0x08005f6b
 8005f44:	08005f7b 	.word	0x08005f7b
 8005f48:	08005f7b 	.word	0x08005f7b
 8005f4c:	08005f7b 	.word	0x08005f7b
 8005f50:	08005f73 	.word	0x08005f73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f54:	f7fd ff6e 	bl	8003e34 <HAL_RCC_GetPCLK1Freq>
 8005f58:	61f8      	str	r0, [r7, #28]
        break;
 8005f5a:	e014      	b.n	8005f86 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f5c:	f7fd ff80 	bl	8003e60 <HAL_RCC_GetPCLK2Freq>
 8005f60:	61f8      	str	r0, [r7, #28]
        break;
 8005f62:	e010      	b.n	8005f86 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f64:	4b4c      	ldr	r3, [pc, #304]	@ (8006098 <UART_SetConfig+0x508>)
 8005f66:	61fb      	str	r3, [r7, #28]
        break;
 8005f68:	e00d      	b.n	8005f86 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f6a:	f7fd fecb 	bl	8003d04 <HAL_RCC_GetSysClockFreq>
 8005f6e:	61f8      	str	r0, [r7, #28]
        break;
 8005f70:	e009      	b.n	8005f86 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f76:	61fb      	str	r3, [r7, #28]
        break;
 8005f78:	e005      	b.n	8005f86 <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005f84:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d077      	beq.n	800607c <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	005a      	lsls	r2, r3, #1
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	085b      	lsrs	r3, r3, #1
 8005f96:	441a      	add	r2, r3
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fa0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	2b0f      	cmp	r3, #15
 8005fa6:	d916      	bls.n	8005fd6 <UART_SetConfig+0x446>
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fae:	d212      	bcs.n	8005fd6 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	f023 030f 	bic.w	r3, r3, #15
 8005fb8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	085b      	lsrs	r3, r3, #1
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	f003 0307 	and.w	r3, r3, #7
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	8afb      	ldrh	r3, [r7, #22]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	8afa      	ldrh	r2, [r7, #22]
 8005fd2:	60da      	str	r2, [r3, #12]
 8005fd4:	e052      	b.n	800607c <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005fdc:	e04e      	b.n	800607c <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005fde:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005fe2:	2b08      	cmp	r3, #8
 8005fe4:	d827      	bhi.n	8006036 <UART_SetConfig+0x4a6>
 8005fe6:	a201      	add	r2, pc, #4	@ (adr r2, 8005fec <UART_SetConfig+0x45c>)
 8005fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fec:	08006011 	.word	0x08006011
 8005ff0:	08006019 	.word	0x08006019
 8005ff4:	08006021 	.word	0x08006021
 8005ff8:	08006037 	.word	0x08006037
 8005ffc:	08006027 	.word	0x08006027
 8006000:	08006037 	.word	0x08006037
 8006004:	08006037 	.word	0x08006037
 8006008:	08006037 	.word	0x08006037
 800600c:	0800602f 	.word	0x0800602f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006010:	f7fd ff10 	bl	8003e34 <HAL_RCC_GetPCLK1Freq>
 8006014:	61f8      	str	r0, [r7, #28]
        break;
 8006016:	e014      	b.n	8006042 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006018:	f7fd ff22 	bl	8003e60 <HAL_RCC_GetPCLK2Freq>
 800601c:	61f8      	str	r0, [r7, #28]
        break;
 800601e:	e010      	b.n	8006042 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006020:	4b1d      	ldr	r3, [pc, #116]	@ (8006098 <UART_SetConfig+0x508>)
 8006022:	61fb      	str	r3, [r7, #28]
        break;
 8006024:	e00d      	b.n	8006042 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006026:	f7fd fe6d 	bl	8003d04 <HAL_RCC_GetSysClockFreq>
 800602a:	61f8      	str	r0, [r7, #28]
        break;
 800602c:	e009      	b.n	8006042 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800602e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006032:	61fb      	str	r3, [r7, #28]
        break;
 8006034:	e005      	b.n	8006042 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8006036:	2300      	movs	r3, #0
 8006038:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006040:	bf00      	nop
    }

    if (pclk != 0U)
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d019      	beq.n	800607c <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	085a      	lsrs	r2, r3, #1
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	441a      	add	r2, r3
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	fbb2 f3f3 	udiv	r3, r2, r3
 800605a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	2b0f      	cmp	r3, #15
 8006060:	d909      	bls.n	8006076 <UART_SetConfig+0x4e6>
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006068:	d205      	bcs.n	8006076 <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	b29a      	uxth	r2, r3
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	60da      	str	r2, [r3, #12]
 8006074:	e002      	b.n	800607c <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2200      	movs	r2, #0
 8006080:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2200      	movs	r2, #0
 8006086:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006088:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800608c:	4618      	mov	r0, r3
 800608e:	3728      	adds	r7, #40	@ 0x28
 8006090:	46bd      	mov	sp, r7
 8006092:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006096:	bf00      	nop
 8006098:	00f42400 	.word	0x00f42400

0800609c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060a8:	f003 0308 	and.w	r3, r3, #8
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d00a      	beq.n	80060c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	430a      	orrs	r2, r1
 80060c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ca:	f003 0301 	and.w	r3, r3, #1
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00a      	beq.n	80060e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	430a      	orrs	r2, r1
 80060e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ec:	f003 0302 	and.w	r3, r3, #2
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00a      	beq.n	800610a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	430a      	orrs	r2, r1
 8006108:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800610e:	f003 0304 	and.w	r3, r3, #4
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00a      	beq.n	800612c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	430a      	orrs	r2, r1
 800612a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006130:	f003 0310 	and.w	r3, r3, #16
 8006134:	2b00      	cmp	r3, #0
 8006136:	d00a      	beq.n	800614e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	430a      	orrs	r2, r1
 800614c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006152:	f003 0320 	and.w	r3, r3, #32
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00a      	beq.n	8006170 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	430a      	orrs	r2, r1
 800616e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006178:	2b00      	cmp	r3, #0
 800617a:	d01a      	beq.n	80061b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	430a      	orrs	r2, r1
 8006190:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006196:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800619a:	d10a      	bne.n	80061b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	430a      	orrs	r2, r1
 80061b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d00a      	beq.n	80061d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	430a      	orrs	r2, r1
 80061d2:	605a      	str	r2, [r3, #4]
  }
}
 80061d4:	bf00      	nop
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b098      	sub	sp, #96	@ 0x60
 80061e4:	af02      	add	r7, sp, #8
 80061e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061f0:	f7fa fec6 	bl	8000f80 <HAL_GetTick>
 80061f4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f003 0308 	and.w	r3, r3, #8
 8006200:	2b08      	cmp	r3, #8
 8006202:	d12e      	bne.n	8006262 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006204:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006208:	9300      	str	r3, [sp, #0]
 800620a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800620c:	2200      	movs	r2, #0
 800620e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 f88c 	bl	8006330 <UART_WaitOnFlagUntilTimeout>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d021      	beq.n	8006262 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006226:	e853 3f00 	ldrex	r3, [r3]
 800622a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800622c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800622e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006232:	653b      	str	r3, [r7, #80]	@ 0x50
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	461a      	mov	r2, r3
 800623a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800623c:	647b      	str	r3, [r7, #68]	@ 0x44
 800623e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006240:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006242:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006244:	e841 2300 	strex	r3, r2, [r1]
 8006248:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800624a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1e6      	bne.n	800621e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2220      	movs	r2, #32
 8006254:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e062      	b.n	8006328 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 0304 	and.w	r3, r3, #4
 800626c:	2b04      	cmp	r3, #4
 800626e:	d149      	bne.n	8006304 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006270:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006274:	9300      	str	r3, [sp, #0]
 8006276:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006278:	2200      	movs	r2, #0
 800627a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 f856 	bl	8006330 <UART_WaitOnFlagUntilTimeout>
 8006284:	4603      	mov	r3, r0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d03c      	beq.n	8006304 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006292:	e853 3f00 	ldrex	r3, [r3]
 8006296:	623b      	str	r3, [r7, #32]
   return(result);
 8006298:	6a3b      	ldr	r3, [r7, #32]
 800629a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800629e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	461a      	mov	r2, r3
 80062a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80062aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80062ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062b0:	e841 2300 	strex	r3, r2, [r1]
 80062b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80062b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d1e6      	bne.n	800628a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	3308      	adds	r3, #8
 80062c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	e853 3f00 	ldrex	r3, [r3]
 80062ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f023 0301 	bic.w	r3, r3, #1
 80062d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	3308      	adds	r3, #8
 80062da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80062dc:	61fa      	str	r2, [r7, #28]
 80062de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e0:	69b9      	ldr	r1, [r7, #24]
 80062e2:	69fa      	ldr	r2, [r7, #28]
 80062e4:	e841 2300 	strex	r3, r2, [r1]
 80062e8:	617b      	str	r3, [r7, #20]
   return(result);
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d1e5      	bne.n	80062bc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2220      	movs	r2, #32
 80062f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e011      	b.n	8006328 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2220      	movs	r2, #32
 8006308:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2220      	movs	r2, #32
 800630e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3758      	adds	r7, #88	@ 0x58
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	603b      	str	r3, [r7, #0]
 800633c:	4613      	mov	r3, r2
 800633e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006340:	e049      	b.n	80063d6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006348:	d045      	beq.n	80063d6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800634a:	f7fa fe19 	bl	8000f80 <HAL_GetTick>
 800634e:	4602      	mov	r2, r0
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	1ad3      	subs	r3, r2, r3
 8006354:	69ba      	ldr	r2, [r7, #24]
 8006356:	429a      	cmp	r2, r3
 8006358:	d302      	bcc.n	8006360 <UART_WaitOnFlagUntilTimeout+0x30>
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d101      	bne.n	8006364 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006360:	2303      	movs	r3, #3
 8006362:	e048      	b.n	80063f6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f003 0304 	and.w	r3, r3, #4
 800636e:	2b00      	cmp	r3, #0
 8006370:	d031      	beq.n	80063d6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	69db      	ldr	r3, [r3, #28]
 8006378:	f003 0308 	and.w	r3, r3, #8
 800637c:	2b08      	cmp	r3, #8
 800637e:	d110      	bne.n	80063a2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2208      	movs	r2, #8
 8006386:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006388:	68f8      	ldr	r0, [r7, #12]
 800638a:	f000 f838 	bl	80063fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2208      	movs	r2, #8
 8006392:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2200      	movs	r2, #0
 800639a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e029      	b.n	80063f6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	69db      	ldr	r3, [r3, #28]
 80063a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80063ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063b0:	d111      	bne.n	80063d6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80063ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80063bc:	68f8      	ldr	r0, [r7, #12]
 80063be:	f000 f81e 	bl	80063fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2220      	movs	r2, #32
 80063c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80063d2:	2303      	movs	r3, #3
 80063d4:	e00f      	b.n	80063f6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	69da      	ldr	r2, [r3, #28]
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	4013      	ands	r3, r2
 80063e0:	68ba      	ldr	r2, [r7, #8]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	bf0c      	ite	eq
 80063e6:	2301      	moveq	r3, #1
 80063e8:	2300      	movne	r3, #0
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	461a      	mov	r2, r3
 80063ee:	79fb      	ldrb	r3, [r7, #7]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d0a6      	beq.n	8006342 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063f4:	2300      	movs	r3, #0
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3710      	adds	r7, #16
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063fe:	b480      	push	{r7}
 8006400:	b095      	sub	sp, #84	@ 0x54
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800640c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800640e:	e853 3f00 	ldrex	r3, [r3]
 8006412:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006416:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800641a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	461a      	mov	r2, r3
 8006422:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006424:	643b      	str	r3, [r7, #64]	@ 0x40
 8006426:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006428:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800642a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800642c:	e841 2300 	strex	r3, r2, [r1]
 8006430:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006434:	2b00      	cmp	r3, #0
 8006436:	d1e6      	bne.n	8006406 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	3308      	adds	r3, #8
 800643e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006440:	6a3b      	ldr	r3, [r7, #32]
 8006442:	e853 3f00 	ldrex	r3, [r3]
 8006446:	61fb      	str	r3, [r7, #28]
   return(result);
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	f023 0301 	bic.w	r3, r3, #1
 800644e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	3308      	adds	r3, #8
 8006456:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006458:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800645a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800645e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006460:	e841 2300 	strex	r3, r2, [r1]
 8006464:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006468:	2b00      	cmp	r3, #0
 800646a:	d1e5      	bne.n	8006438 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006470:	2b01      	cmp	r3, #1
 8006472:	d118      	bne.n	80064a6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	e853 3f00 	ldrex	r3, [r3]
 8006480:	60bb      	str	r3, [r7, #8]
   return(result);
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	f023 0310 	bic.w	r3, r3, #16
 8006488:	647b      	str	r3, [r7, #68]	@ 0x44
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	461a      	mov	r2, r3
 8006490:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006492:	61bb      	str	r3, [r7, #24]
 8006494:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006496:	6979      	ldr	r1, [r7, #20]
 8006498:	69ba      	ldr	r2, [r7, #24]
 800649a:	e841 2300 	strex	r3, r2, [r1]
 800649e:	613b      	str	r3, [r7, #16]
   return(result);
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d1e6      	bne.n	8006474 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2220      	movs	r2, #32
 80064aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80064ba:	bf00      	nop
 80064bc:	3754      	adds	r7, #84	@ 0x54
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr

080064c6 <memset>:
 80064c6:	4402      	add	r2, r0
 80064c8:	4603      	mov	r3, r0
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d100      	bne.n	80064d0 <memset+0xa>
 80064ce:	4770      	bx	lr
 80064d0:	f803 1b01 	strb.w	r1, [r3], #1
 80064d4:	e7f9      	b.n	80064ca <memset+0x4>
	...

080064d8 <__libc_init_array>:
 80064d8:	b570      	push	{r4, r5, r6, lr}
 80064da:	4d0d      	ldr	r5, [pc, #52]	@ (8006510 <__libc_init_array+0x38>)
 80064dc:	4c0d      	ldr	r4, [pc, #52]	@ (8006514 <__libc_init_array+0x3c>)
 80064de:	1b64      	subs	r4, r4, r5
 80064e0:	10a4      	asrs	r4, r4, #2
 80064e2:	2600      	movs	r6, #0
 80064e4:	42a6      	cmp	r6, r4
 80064e6:	d109      	bne.n	80064fc <__libc_init_array+0x24>
 80064e8:	4d0b      	ldr	r5, [pc, #44]	@ (8006518 <__libc_init_array+0x40>)
 80064ea:	4c0c      	ldr	r4, [pc, #48]	@ (800651c <__libc_init_array+0x44>)
 80064ec:	f000 f818 	bl	8006520 <_init>
 80064f0:	1b64      	subs	r4, r4, r5
 80064f2:	10a4      	asrs	r4, r4, #2
 80064f4:	2600      	movs	r6, #0
 80064f6:	42a6      	cmp	r6, r4
 80064f8:	d105      	bne.n	8006506 <__libc_init_array+0x2e>
 80064fa:	bd70      	pop	{r4, r5, r6, pc}
 80064fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006500:	4798      	blx	r3
 8006502:	3601      	adds	r6, #1
 8006504:	e7ee      	b.n	80064e4 <__libc_init_array+0xc>
 8006506:	f855 3b04 	ldr.w	r3, [r5], #4
 800650a:	4798      	blx	r3
 800650c:	3601      	adds	r6, #1
 800650e:	e7f2      	b.n	80064f6 <__libc_init_array+0x1e>
 8006510:	08006588 	.word	0x08006588
 8006514:	08006588 	.word	0x08006588
 8006518:	08006588 	.word	0x08006588
 800651c:	0800658c 	.word	0x0800658c

08006520 <_init>:
 8006520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006522:	bf00      	nop
 8006524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006526:	bc08      	pop	{r3}
 8006528:	469e      	mov	lr, r3
 800652a:	4770      	bx	lr

0800652c <_fini>:
 800652c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800652e:	bf00      	nop
 8006530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006532:	bc08      	pop	{r3}
 8006534:	469e      	mov	lr, r3
 8006536:	4770      	bx	lr
