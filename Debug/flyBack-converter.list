
flyBack-converter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006790  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08006930  08006930  00007930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069b4  080069b4  0000805c  2**0
                  CONTENTS
  4 .ARM          00000008  080069b4  080069b4  000079b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069bc  080069bc  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069bc  080069bc  000079bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080069c0  080069c0  000079c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080069c4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  2000005c  08006a20  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000350  08006a20  00008350  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014564  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026c7  00000000  00000000  0001c5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001240  00000000  00000000  0001ecb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e37  00000000  00000000  0001fef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024864  00000000  00000000  00020d2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001474e  00000000  00000000  00045593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8a8b  00000000  00000000  00059ce1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014276c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005344  00000000  00000000  001427b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00147af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006918 	.word	0x08006918

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08006918 	.word	0x08006918

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <initHV>:
bool HV = false;



void initHV()
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000584:	217f      	movs	r1, #127	@ 0x7f
 8000586:	480b      	ldr	r0, [pc, #44]	@ (80005b4 <initHV+0x34>)
 8000588:	f001 fff8 	bl	800257c <HAL_ADCEx_Calibration_Start>
	startPump();
 800058c:	f000 f816 	bl	80005bc <startPump>
	do
	{
		if(HV == true)
 8000590:	4b09      	ldr	r3, [pc, #36]	@ (80005b8 <initHV+0x38>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d009      	beq.n	80005ac <initHV+0x2c>
		{
			startADC();
 8000598:	f000 f824 	bl	80005e4 <startADC>
			if(measureHV() < HV_REF_VALUE)
 800059c:	f000 f82c 	bl	80005f8 <measureHV>
 80005a0:	4603      	mov	r3, r0
 80005a2:	461a      	mov	r2, r3
 80005a4:	f240 53db 	movw	r3, #1499	@ 0x5db
 80005a8:	429a      	cmp	r2, r3
			{
				return;
			}
			else break;
 80005aa:	e002      	b.n	80005b2 <initHV+0x32>
		}
		else
		{
			startPump();
 80005ac:	f000 f806 	bl	80005bc <startPump>
			return;
 80005b0:	bf00      	nop
		}
	}
	while(true);
}
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	2000007c 	.word	0x2000007c
 80005b8:	20000078 	.word	0x20000078

080005bc <startPump>:


void startPump()
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_IT(&htim15, TIM_CHANNEL_1);
 80005c0:	2100      	movs	r1, #0
 80005c2:	4802      	ldr	r0, [pc, #8]	@ (80005cc <startPump+0x10>)
 80005c4:	f003 fdc2 	bl	800414c <HAL_TIM_PWM_Start_IT>
	//HAL_GPIO_WritePin(COUNTER_ENABLE_PORT, COUNTER_ENABLE_PIN, DISAB);
}
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	200000e4 	.word	0x200000e4

080005d0 <stopPump>:

void stopPump()
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop_IT(&htim15, TIM_CHANNEL_1);
 80005d4:	2100      	movs	r1, #0
 80005d6:	4802      	ldr	r0, [pc, #8]	@ (80005e0 <stopPump+0x10>)
 80005d8:	f003 feea 	bl	80043b0 <HAL_TIM_PWM_Stop_IT>
	//HAL_GPIO_WritePin(COUNTER_ENABLE_PORT, COUNTER_ENABLE_PIN, EN);
}
 80005dc:	bf00      	nop
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	200000e4 	.word	0x200000e4

080005e4 <startADC>:

void startADC()
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	HAL_ADC_Start_IT(&hadc1);
 80005e8:	4802      	ldr	r0, [pc, #8]	@ (80005f4 <startADC+0x10>)
 80005ea:	f001 f82f 	bl	800164c <HAL_ADC_Start_IT>
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	2000007c 	.word	0x2000007c

080005f8 <measureHV>:
{
	HAL_ADC_Stop_IT(&hadc1);
}

uint16_t measureHV()
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	return HAL_ADC_GetValue(&hadc1);
 80005fc:	4803      	ldr	r0, [pc, #12]	@ (800060c <measureHV+0x14>)
 80005fe:	f001 f8d9 	bl	80017b4 <HAL_ADC_GetValue>
 8000602:	4603      	mov	r3, r0
 8000604:	b29b      	uxth	r3, r3
}
 8000606:	4618      	mov	r0, r3
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	2000007c 	.word	0x2000007c

08000610 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
	{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
	    if(hadc->Instance == ADC1) //check if the interrupt comes from ACD1
	    {

	    }
	}
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr

08000624 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
	{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
	        if(htim->Instance == TIM15)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a0a      	ldr	r2, [pc, #40]	@ (800065c <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d10d      	bne.n	8000652 <HAL_TIM_PWM_PulseFinishedCallback+0x2e>
	        {
	        	counter++;
 8000636:	4b0a      	ldr	r3, [pc, #40]	@ (8000660 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	3301      	adds	r3, #1
 800063c:	4a08      	ldr	r2, [pc, #32]	@ (8000660 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 800063e:	6013      	str	r3, [r2, #0]
		        if(counter == 10)
 8000640:	4b07      	ldr	r3, [pc, #28]	@ (8000660 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2b0a      	cmp	r3, #10
 8000646:	d101      	bne.n	800064c <HAL_TIM_PWM_PulseFinishedCallback+0x28>
		        stopPump();
 8000648:	f7ff ffc2 	bl	80005d0 <stopPump>
		        HV = true;
 800064c:	4b05      	ldr	r3, [pc, #20]	@ (8000664 <HAL_TIM_PWM_PulseFinishedCallback+0x40>)
 800064e:	2201      	movs	r2, #1
 8000650:	701a      	strb	r2, [r3, #0]
	        }

	}
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40014000 	.word	0x40014000
 8000660:	200001fc 	.word	0x200001fc
 8000664:	20000078 	.word	0x20000078

08000668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800066e:	f000 fc1e 	bl	8000eae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000672:	f000 f84d 	bl	8000710 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000676:	f000 f9d3 	bl	8000a20 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800067a:	f000 f9a1 	bl	80009c0 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800067e:	f000 f899 	bl	80007b4 <MX_ADC1_Init>
  MX_TIM15_Init();
 8000682:	f000 f8fb 	bl	800087c <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  initHV();
 8000686:	f7ff ff7b 	bl	8000580 <initHV>
  uint32_t checkTimer = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(enableDataTransmit == true)
 800068e:	4b1c      	ldr	r3, [pc, #112]	@ (8000700 <main+0x98>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d015      	beq.n	80006c2 <main+0x5a>
	  {
		  snprintf(trans_str, 63, "ADC %d\n", (uint16_t)measureHV());
 8000696:	f7ff ffaf 	bl	80005f8 <measureHV>
 800069a:	4603      	mov	r3, r0
 800069c:	4a19      	ldr	r2, [pc, #100]	@ (8000704 <main+0x9c>)
 800069e:	213f      	movs	r1, #63	@ 0x3f
 80006a0:	4819      	ldr	r0, [pc, #100]	@ (8000708 <main+0xa0>)
 80006a2:	f005 fc85 	bl	8005fb0 <sniprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 80006a6:	4818      	ldr	r0, [pc, #96]	@ (8000708 <main+0xa0>)
 80006a8:	f7ff fd9a 	bl	80001e0 <strlen>
 80006ac:	4603      	mov	r3, r0
 80006ae:	b29a      	uxth	r2, r3
 80006b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006b4:	4914      	ldr	r1, [pc, #80]	@ (8000708 <main+0xa0>)
 80006b6:	4815      	ldr	r0, [pc, #84]	@ (800070c <main+0xa4>)
 80006b8:	f004 ff54 	bl	8005564 <HAL_UART_Transmit>
		  enableDataTransmit = false;
 80006bc:	4b10      	ldr	r3, [pc, #64]	@ (8000700 <main+0x98>)
 80006be:	2200      	movs	r2, #0
 80006c0:	701a      	strb	r2, [r3, #0]
	  }
	  if(HAL_GetTick() - checkTimer >= 1000)
 80006c2:	f000 fc5d 	bl	8000f80 <HAL_GetTick>
 80006c6:	4602      	mov	r2, r0
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	1ad3      	subs	r3, r2, r3
 80006cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80006d0:	d307      	bcc.n	80006e2 <main+0x7a>
	  {
	  		  checkTimer = HAL_GetTick();
 80006d2:	f000 fc55 	bl	8000f80 <HAL_GetTick>
 80006d6:	6078      	str	r0, [r7, #4]
	  		  startADC();
 80006d8:	f7ff ff84 	bl	80005e4 <startADC>
	  		  enableDataTransmit = true;
 80006dc:	4b08      	ldr	r3, [pc, #32]	@ (8000700 <main+0x98>)
 80006de:	2201      	movs	r2, #1
 80006e0:	701a      	strb	r2, [r3, #0]
	  }
	  if(measureHV() < 1500)
 80006e2:	f7ff ff89 	bl	80005f8 <measureHV>
 80006e6:	4603      	mov	r3, r0
 80006e8:	461a      	mov	r2, r3
 80006ea:	f240 53db 	movw	r3, #1499	@ 0x5db
 80006ee:	429a      	cmp	r2, r3
 80006f0:	d802      	bhi.n	80006f8 <main+0x90>
	  {
		  startPump();
 80006f2:	f7ff ff63 	bl	80005bc <startPump>
 80006f6:	e7ca      	b.n	800068e <main+0x26>
	  }
	  else
	  {
		  stopPump();
 80006f8:	f7ff ff6a 	bl	80005d0 <stopPump>
	  if(enableDataTransmit == true)
 80006fc:	e7c7      	b.n	800068e <main+0x26>
 80006fe:	bf00      	nop
 8000700:	200001b8 	.word	0x200001b8
 8000704:	08006930 	.word	0x08006930
 8000708:	200001bc 	.word	0x200001bc
 800070c:	20000130 	.word	0x20000130

08000710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b096      	sub	sp, #88	@ 0x58
 8000714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000716:	f107 0314 	add.w	r3, r7, #20
 800071a:	2244      	movs	r2, #68	@ 0x44
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f005 fc7a 	bl	8006018 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000724:	463b      	mov	r3, r7
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000732:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000736:	f002 fa65 	bl	8002c04 <HAL_PWREx_ControlVoltageScaling>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000740:	f000 f9ae 	bl	8000aa0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000744:	2302      	movs	r3, #2
 8000746:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000748:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800074c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800074e:	2340      	movs	r3, #64	@ 0x40
 8000750:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000752:	2302      	movs	r3, #2
 8000754:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000756:	2302      	movs	r3, #2
 8000758:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 800075a:	2302      	movs	r3, #2
 800075c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 800075e:	2314      	movs	r3, #20
 8000760:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000762:	2307      	movs	r3, #7
 8000764:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000766:	2302      	movs	r3, #2
 8000768:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 800076a:	2308      	movs	r3, #8
 800076c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076e:	f107 0314 	add.w	r3, r7, #20
 8000772:	4618      	mov	r0, r3
 8000774:	f002 fa9c 	bl	8002cb0 <HAL_RCC_OscConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800077e:	f000 f98f 	bl	8000aa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000782:	230f      	movs	r3, #15
 8000784:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000786:	2303      	movs	r3, #3
 8000788:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800078a:	2380      	movs	r3, #128	@ 0x80
 800078c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000792:	2300      	movs	r3, #0
 8000794:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000796:	463b      	mov	r3, r7
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f002 fe9c 	bl	80034d8 <HAL_RCC_ClockConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007a6:	f000 f97b 	bl	8000aa0 <Error_Handler>
  }
}
 80007aa:	bf00      	nop
 80007ac:	3758      	adds	r7, #88	@ 0x58
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
	...

080007b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b086      	sub	sp, #24
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ba:	463b      	mov	r3, r7
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]
 80007c8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007ca:	4b29      	ldr	r3, [pc, #164]	@ (8000870 <MX_ADC1_Init+0xbc>)
 80007cc:	4a29      	ldr	r2, [pc, #164]	@ (8000874 <MX_ADC1_Init+0xc0>)
 80007ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007d0:	4b27      	ldr	r3, [pc, #156]	@ (8000870 <MX_ADC1_Init+0xbc>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007d6:	4b26      	ldr	r3, [pc, #152]	@ (8000870 <MX_ADC1_Init+0xbc>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007dc:	4b24      	ldr	r3, [pc, #144]	@ (8000870 <MX_ADC1_Init+0xbc>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007e2:	4b23      	ldr	r3, [pc, #140]	@ (8000870 <MX_ADC1_Init+0xbc>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007e8:	4b21      	ldr	r3, [pc, #132]	@ (8000870 <MX_ADC1_Init+0xbc>)
 80007ea:	2204      	movs	r2, #4
 80007ec:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007ee:	4b20      	ldr	r3, [pc, #128]	@ (8000870 <MX_ADC1_Init+0xbc>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000870 <MX_ADC1_Init+0xbc>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80007fa:	4b1d      	ldr	r3, [pc, #116]	@ (8000870 <MX_ADC1_Init+0xbc>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000800:	4b1b      	ldr	r3, [pc, #108]	@ (8000870 <MX_ADC1_Init+0xbc>)
 8000802:	2200      	movs	r2, #0
 8000804:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000808:	4b19      	ldr	r3, [pc, #100]	@ (8000870 <MX_ADC1_Init+0xbc>)
 800080a:	2200      	movs	r2, #0
 800080c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800080e:	4b18      	ldr	r3, [pc, #96]	@ (8000870 <MX_ADC1_Init+0xbc>)
 8000810:	2200      	movs	r2, #0
 8000812:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000814:	4b16      	ldr	r3, [pc, #88]	@ (8000870 <MX_ADC1_Init+0xbc>)
 8000816:	2200      	movs	r2, #0
 8000818:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800081c:	4b14      	ldr	r3, [pc, #80]	@ (8000870 <MX_ADC1_Init+0xbc>)
 800081e:	2200      	movs	r2, #0
 8000820:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000822:	4b13      	ldr	r3, [pc, #76]	@ (8000870 <MX_ADC1_Init+0xbc>)
 8000824:	2200      	movs	r2, #0
 8000826:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800082a:	4811      	ldr	r0, [pc, #68]	@ (8000870 <MX_ADC1_Init+0xbc>)
 800082c:	f000 fdc8 	bl	80013c0 <HAL_ADC_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000836:	f000 f933 	bl	8000aa0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800083a:	4b0f      	ldr	r3, [pc, #60]	@ (8000878 <MX_ADC1_Init+0xc4>)
 800083c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800083e:	2306      	movs	r3, #6
 8000840:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000842:	2300      	movs	r3, #0
 8000844:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000846:	237f      	movs	r3, #127	@ 0x7f
 8000848:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800084a:	2304      	movs	r3, #4
 800084c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800084e:	2300      	movs	r3, #0
 8000850:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000852:	463b      	mov	r3, r7
 8000854:	4619      	mov	r1, r3
 8000856:	4806      	ldr	r0, [pc, #24]	@ (8000870 <MX_ADC1_Init+0xbc>)
 8000858:	f001 f982 	bl	8001b60 <HAL_ADC_ConfigChannel>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000862:	f000 f91d 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	3718      	adds	r7, #24
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	2000007c 	.word	0x2000007c
 8000874:	50040000 	.word	0x50040000
 8000878:	04300002 	.word	0x04300002

0800087c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b09a      	sub	sp, #104	@ 0x68
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000882:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000890:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800089c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]
 80008ac:	615a      	str	r2, [r3, #20]
 80008ae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	222c      	movs	r2, #44	@ 0x2c
 80008b4:	2100      	movs	r1, #0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f005 fbae 	bl	8006018 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80008bc:	4b3e      	ldr	r3, [pc, #248]	@ (80009b8 <MX_TIM15_Init+0x13c>)
 80008be:	4a3f      	ldr	r2, [pc, #252]	@ (80009bc <MX_TIM15_Init+0x140>)
 80008c0:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80008c2:	4b3d      	ldr	r3, [pc, #244]	@ (80009b8 <MX_TIM15_Init+0x13c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c8:	4b3b      	ldr	r3, [pc, #236]	@ (80009b8 <MX_TIM15_Init+0x13c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1000-1;
 80008ce:	4b3a      	ldr	r3, [pc, #232]	@ (80009b8 <MX_TIM15_Init+0x13c>)
 80008d0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008d4:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d6:	4b38      	ldr	r3, [pc, #224]	@ (80009b8 <MX_TIM15_Init+0x13c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80008dc:	4b36      	ldr	r3, [pc, #216]	@ (80009b8 <MX_TIM15_Init+0x13c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008e2:	4b35      	ldr	r3, [pc, #212]	@ (80009b8 <MX_TIM15_Init+0x13c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80008e8:	4833      	ldr	r0, [pc, #204]	@ (80009b8 <MX_TIM15_Init+0x13c>)
 80008ea:	f003 fb77 	bl	8003fdc <HAL_TIM_Base_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 80008f4:	f000 f8d4 	bl	8000aa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008fc:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80008fe:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000902:	4619      	mov	r1, r3
 8000904:	482c      	ldr	r0, [pc, #176]	@ (80009b8 <MX_TIM15_Init+0x13c>)
 8000906:	f004 f83d 	bl	8004984 <HAL_TIM_ConfigClockSource>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8000910:	f000 f8c6 	bl	8000aa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000914:	4828      	ldr	r0, [pc, #160]	@ (80009b8 <MX_TIM15_Init+0x13c>)
 8000916:	f003 fbb8 	bl	800408a <HAL_TIM_PWM_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8000920:	f000 f8be 	bl	8000aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000924:	2300      	movs	r3, #0
 8000926:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000928:	2300      	movs	r3, #0
 800092a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800092c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000930:	4619      	mov	r1, r3
 8000932:	4821      	ldr	r0, [pc, #132]	@ (80009b8 <MX_TIM15_Init+0x13c>)
 8000934:	f004 fcc4 	bl	80052c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 800093e:	f000 f8af 	bl	8000aa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000942:	2360      	movs	r3, #96	@ 0x60
 8000944:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 972;
 8000946:	f44f 7373 	mov.w	r3, #972	@ 0x3cc
 800094a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800094c:	2302      	movs	r3, #2
 800094e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000950:	2300      	movs	r3, #0
 8000952:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000954:	2300      	movs	r3, #0
 8000956:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000958:	2300      	movs	r3, #0
 800095a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800095c:	2300      	movs	r3, #0
 800095e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000960:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000964:	2200      	movs	r2, #0
 8000966:	4619      	mov	r1, r3
 8000968:	4813      	ldr	r0, [pc, #76]	@ (80009b8 <MX_TIM15_Init+0x13c>)
 800096a:	f003 fef7 	bl	800475c <HAL_TIM_PWM_ConfigChannel>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8000974:	f000 f894 	bl	8000aa0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000978:	2300      	movs	r3, #0
 800097a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800097c:	2300      	movs	r3, #0
 800097e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000980:	2300      	movs	r3, #0
 8000982:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000984:	2300      	movs	r3, #0
 8000986:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000988:	2300      	movs	r3, #0
 800098a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800098c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000990:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000992:	2300      	movs	r3, #0
 8000994:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	4619      	mov	r1, r3
 800099a:	4807      	ldr	r0, [pc, #28]	@ (80009b8 <MX_TIM15_Init+0x13c>)
 800099c:	f004 fcfe 	bl	800539c <HAL_TIMEx_ConfigBreakDeadTime>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_TIM15_Init+0x12e>
  {
    Error_Handler();
 80009a6:	f000 f87b 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80009aa:	4803      	ldr	r0, [pc, #12]	@ (80009b8 <MX_TIM15_Init+0x13c>)
 80009ac:	f000 f938 	bl	8000c20 <HAL_TIM_MspPostInit>

}
 80009b0:	bf00      	nop
 80009b2:	3768      	adds	r7, #104	@ 0x68
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	200000e4 	.word	0x200000e4
 80009bc:	40014000 	.word	0x40014000

080009c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009c4:	4b14      	ldr	r3, [pc, #80]	@ (8000a18 <MX_USART1_UART_Init+0x58>)
 80009c6:	4a15      	ldr	r2, [pc, #84]	@ (8000a1c <MX_USART1_UART_Init+0x5c>)
 80009c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009ca:	4b13      	ldr	r3, [pc, #76]	@ (8000a18 <MX_USART1_UART_Init+0x58>)
 80009cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009d2:	4b11      	ldr	r3, [pc, #68]	@ (8000a18 <MX_USART1_UART_Init+0x58>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a18 <MX_USART1_UART_Init+0x58>)
 80009da:	2200      	movs	r2, #0
 80009dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009de:	4b0e      	ldr	r3, [pc, #56]	@ (8000a18 <MX_USART1_UART_Init+0x58>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000a18 <MX_USART1_UART_Init+0x58>)
 80009e6:	220c      	movs	r2, #12
 80009e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000a18 <MX_USART1_UART_Init+0x58>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f0:	4b09      	ldr	r3, [pc, #36]	@ (8000a18 <MX_USART1_UART_Init+0x58>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009f6:	4b08      	ldr	r3, [pc, #32]	@ (8000a18 <MX_USART1_UART_Init+0x58>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009fc:	4b06      	ldr	r3, [pc, #24]	@ (8000a18 <MX_USART1_UART_Init+0x58>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a02:	4805      	ldr	r0, [pc, #20]	@ (8000a18 <MX_USART1_UART_Init+0x58>)
 8000a04:	f004 fd60 	bl	80054c8 <HAL_UART_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a0e:	f000 f847 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000130 	.word	0x20000130
 8000a1c:	40013800 	.word	0x40013800

08000a20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b088      	sub	sp, #32
 8000a24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a26:	f107 030c 	add.w	r3, r7, #12
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]
 8000a34:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a36:	4b18      	ldr	r3, [pc, #96]	@ (8000a98 <MX_GPIO_Init+0x78>)
 8000a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a3a:	4a17      	ldr	r2, [pc, #92]	@ (8000a98 <MX_GPIO_Init+0x78>)
 8000a3c:	f043 0304 	orr.w	r3, r3, #4
 8000a40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a42:	4b15      	ldr	r3, [pc, #84]	@ (8000a98 <MX_GPIO_Init+0x78>)
 8000a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a46:	f003 0304 	and.w	r3, r3, #4
 8000a4a:	60bb      	str	r3, [r7, #8]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4e:	4b12      	ldr	r3, [pc, #72]	@ (8000a98 <MX_GPIO_Init+0x78>)
 8000a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a52:	4a11      	ldr	r2, [pc, #68]	@ (8000a98 <MX_GPIO_Init+0x78>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a98 <MX_GPIO_Init+0x78>)
 8000a5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a6c:	480b      	ldr	r0, [pc, #44]	@ (8000a9c <MX_GPIO_Init+0x7c>)
 8000a6e:	f002 f8a3 	bl	8002bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a72:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a84:	f107 030c 	add.w	r3, r7, #12
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4804      	ldr	r0, [pc, #16]	@ (8000a9c <MX_GPIO_Init+0x7c>)
 8000a8c:	f001 ff1a 	bl	80028c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a90:	bf00      	nop
 8000a92:	3720      	adds	r7, #32
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	48000800 	.word	0x48000800

08000aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa4:	b672      	cpsid	i
}
 8000aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <Error_Handler+0x8>

08000aac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab2:	4b0f      	ldr	r3, [pc, #60]	@ (8000af0 <HAL_MspInit+0x44>)
 8000ab4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ab6:	4a0e      	ldr	r2, [pc, #56]	@ (8000af0 <HAL_MspInit+0x44>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000abe:	4b0c      	ldr	r3, [pc, #48]	@ (8000af0 <HAL_MspInit+0x44>)
 8000ac0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aca:	4b09      	ldr	r3, [pc, #36]	@ (8000af0 <HAL_MspInit+0x44>)
 8000acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ace:	4a08      	ldr	r2, [pc, #32]	@ (8000af0 <HAL_MspInit+0x44>)
 8000ad0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ad4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ad6:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <HAL_MspInit+0x44>)
 8000ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ada:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	40021000 	.word	0x40021000

08000af4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b0a4      	sub	sp, #144	@ 0x90
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	2268      	movs	r2, #104	@ 0x68
 8000b12:	2100      	movs	r1, #0
 8000b14:	4618      	mov	r0, r3
 8000b16:	f005 fa7f 	bl	8006018 <memset>
  if(hadc->Instance==ADC1)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a2a      	ldr	r2, [pc, #168]	@ (8000bc8 <HAL_ADC_MspInit+0xd4>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d14c      	bne.n	8000bbe <HAL_ADC_MspInit+0xca>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b24:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000b28:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000b2a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000b2e:	673b      	str	r3, [r7, #112]	@ 0x70
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000b30:	2302      	movs	r3, #2
 8000b32:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 8000b34:	2302      	movs	r3, #2
 8000b36:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 10;
 8000b38:	230a      	movs	r3, #10
 8000b3a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000b3c:	2307      	movs	r3, #7
 8000b3e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000b40:	2302      	movs	r3, #2
 8000b42:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV8;
 8000b44:	2308      	movs	r3, #8
 8000b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000b48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000b4c:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	4618      	mov	r0, r3
 8000b54:	f002 fee4 	bl	8003920 <HAL_RCCEx_PeriphCLKConfig>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000b5e:	f7ff ff9f 	bl	8000aa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000b62:	4b1a      	ldr	r3, [pc, #104]	@ (8000bcc <HAL_ADC_MspInit+0xd8>)
 8000b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b66:	4a19      	ldr	r2, [pc, #100]	@ (8000bcc <HAL_ADC_MspInit+0xd8>)
 8000b68:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000b6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b6e:	4b17      	ldr	r3, [pc, #92]	@ (8000bcc <HAL_ADC_MspInit+0xd8>)
 8000b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7a:	4b14      	ldr	r3, [pc, #80]	@ (8000bcc <HAL_ADC_MspInit+0xd8>)
 8000b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b7e:	4a13      	ldr	r2, [pc, #76]	@ (8000bcc <HAL_ADC_MspInit+0xd8>)
 8000b80:	f043 0304 	orr.w	r3, r3, #4
 8000b84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b86:	4b11      	ldr	r3, [pc, #68]	@ (8000bcc <HAL_ADC_MspInit+0xd8>)
 8000b88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b8a:	f003 0304 	and.w	r3, r3, #4
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b92:	2301      	movs	r3, #1
 8000b94:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b96:	230b      	movs	r3, #11
 8000b98:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba2:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4809      	ldr	r0, [pc, #36]	@ (8000bd0 <HAL_ADC_MspInit+0xdc>)
 8000baa:	f001 fe8b 	bl	80028c4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	2012      	movs	r0, #18
 8000bb4:	f001 fe4f 	bl	8002856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000bb8:	2012      	movs	r0, #18
 8000bba:	f001 fe68 	bl	800288e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000bbe:	bf00      	nop
 8000bc0:	3790      	adds	r7, #144	@ 0x90
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	50040000 	.word	0x50040000
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	48000800 	.word	0x48000800

08000bd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a0d      	ldr	r2, [pc, #52]	@ (8000c18 <HAL_TIM_Base_MspInit+0x44>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d113      	bne.n	8000c0e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000be6:	4b0d      	ldr	r3, [pc, #52]	@ (8000c1c <HAL_TIM_Base_MspInit+0x48>)
 8000be8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bea:	4a0c      	ldr	r2, [pc, #48]	@ (8000c1c <HAL_TIM_Base_MspInit+0x48>)
 8000bec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000bf0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8000c1c <HAL_TIM_Base_MspInit+0x48>)
 8000bf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bf6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2100      	movs	r1, #0
 8000c02:	2018      	movs	r0, #24
 8000c04:	f001 fe27 	bl	8002856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000c08:	2018      	movs	r0, #24
 8000c0a:	f001 fe40 	bl	800288e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000c0e:	bf00      	nop
 8000c10:	3710      	adds	r7, #16
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40014000 	.word	0x40014000
 8000c1c:	40021000 	.word	0x40021000

08000c20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b088      	sub	sp, #32
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 030c 	add.w	r3, r7, #12
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM15)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a11      	ldr	r2, [pc, #68]	@ (8000c84 <HAL_TIM_MspPostInit+0x64>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d11c      	bne.n	8000c7c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c42:	4b11      	ldr	r3, [pc, #68]	@ (8000c88 <HAL_TIM_MspPostInit+0x68>)
 8000c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c46:	4a10      	ldr	r2, [pc, #64]	@ (8000c88 <HAL_TIM_MspPostInit+0x68>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c88 <HAL_TIM_MspPostInit+0x68>)
 8000c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	68bb      	ldr	r3, [r7, #8]
    /**TIM15 GPIO Configuration
    PA2     ------> TIM15_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c5a:	2304      	movs	r3, #4
 8000c5c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8000c6a:	230e      	movs	r3, #14
 8000c6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6e:	f107 030c 	add.w	r3, r7, #12
 8000c72:	4619      	mov	r1, r3
 8000c74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c78:	f001 fe24 	bl	80028c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8000c7c:	bf00      	nop
 8000c7e:	3720      	adds	r7, #32
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40014000 	.word	0x40014000
 8000c88:	40021000 	.word	0x40021000

08000c8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b0a4      	sub	sp, #144	@ 0x90
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	2268      	movs	r2, #104	@ 0x68
 8000caa:	2100      	movs	r1, #0
 8000cac:	4618      	mov	r0, r3
 8000cae:	f005 f9b3 	bl	8006018 <memset>
  if(huart->Instance==USART1)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a21      	ldr	r2, [pc, #132]	@ (8000d3c <HAL_UART_MspInit+0xb0>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d13b      	bne.n	8000d34 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f002 fe29 	bl	8003920 <HAL_RCCEx_PeriphCLKConfig>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cd4:	f7ff fee4 	bl	8000aa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cd8:	4b19      	ldr	r3, [pc, #100]	@ (8000d40 <HAL_UART_MspInit+0xb4>)
 8000cda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cdc:	4a18      	ldr	r2, [pc, #96]	@ (8000d40 <HAL_UART_MspInit+0xb4>)
 8000cde:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ce2:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ce4:	4b16      	ldr	r3, [pc, #88]	@ (8000d40 <HAL_UART_MspInit+0xb4>)
 8000ce6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ce8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cec:	613b      	str	r3, [r7, #16]
 8000cee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf0:	4b13      	ldr	r3, [pc, #76]	@ (8000d40 <HAL_UART_MspInit+0xb4>)
 8000cf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf4:	4a12      	ldr	r2, [pc, #72]	@ (8000d40 <HAL_UART_MspInit+0xb4>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cfc:	4b10      	ldr	r3, [pc, #64]	@ (8000d40 <HAL_UART_MspInit+0xb4>)
 8000cfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d00:	f003 0301 	and.w	r3, r3, #1
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d08:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d0c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d20:	2307      	movs	r3, #7
 8000d22:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d26:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d30:	f001 fdc8 	bl	80028c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d34:	bf00      	nop
 8000d36:	3790      	adds	r7, #144	@ 0x90
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40013800 	.word	0x40013800
 8000d40:	40021000 	.word	0x40021000

08000d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d48:	bf00      	nop
 8000d4a:	e7fd      	b.n	8000d48 <NMI_Handler+0x4>

08000d4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <HardFault_Handler+0x4>

08000d54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d58:	bf00      	nop
 8000d5a:	e7fd      	b.n	8000d58 <MemManage_Handler+0x4>

08000d5c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d60:	bf00      	nop
 8000d62:	e7fd      	b.n	8000d60 <BusFault_Handler+0x4>

08000d64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d68:	bf00      	nop
 8000d6a:	e7fd      	b.n	8000d68 <UsageFault_Handler+0x4>

08000d6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d9a:	f000 f8dd 	bl	8000f58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
	...

08000da4 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000da8:	4802      	ldr	r0, [pc, #8]	@ (8000db4 <ADC1_IRQHandler+0x10>)
 8000daa:	f000 fd10 	bl	80017ce <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	2000007c 	.word	0x2000007c

08000db8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8000dbc:	4802      	ldr	r0, [pc, #8]	@ (8000dc8 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8000dbe:	f003 fbcb 	bl	8004558 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	200000e4 	.word	0x200000e4

08000dcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dd4:	4a14      	ldr	r2, [pc, #80]	@ (8000e28 <_sbrk+0x5c>)
 8000dd6:	4b15      	ldr	r3, [pc, #84]	@ (8000e2c <_sbrk+0x60>)
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000de0:	4b13      	ldr	r3, [pc, #76]	@ (8000e30 <_sbrk+0x64>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d102      	bne.n	8000dee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000de8:	4b11      	ldr	r3, [pc, #68]	@ (8000e30 <_sbrk+0x64>)
 8000dea:	4a12      	ldr	r2, [pc, #72]	@ (8000e34 <_sbrk+0x68>)
 8000dec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dee:	4b10      	ldr	r3, [pc, #64]	@ (8000e30 <_sbrk+0x64>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4413      	add	r3, r2
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d207      	bcs.n	8000e0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dfc:	f005 f914 	bl	8006028 <__errno>
 8000e00:	4603      	mov	r3, r0
 8000e02:	220c      	movs	r2, #12
 8000e04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e06:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0a:	e009      	b.n	8000e20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e0c:	4b08      	ldr	r3, [pc, #32]	@ (8000e30 <_sbrk+0x64>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e12:	4b07      	ldr	r3, [pc, #28]	@ (8000e30 <_sbrk+0x64>)
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4413      	add	r3, r2
 8000e1a:	4a05      	ldr	r2, [pc, #20]	@ (8000e30 <_sbrk+0x64>)
 8000e1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3718      	adds	r7, #24
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20028000 	.word	0x20028000
 8000e2c:	00000400 	.word	0x00000400
 8000e30:	20000200 	.word	0x20000200
 8000e34:	20000350 	.word	0x20000350

08000e38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e3c:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <SystemInit+0x20>)
 8000e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e42:	4a05      	ldr	r2, [pc, #20]	@ (8000e58 <SystemInit+0x20>)
 8000e44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e94 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e60:	f7ff ffea 	bl	8000e38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e64:	480c      	ldr	r0, [pc, #48]	@ (8000e98 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e66:	490d      	ldr	r1, [pc, #52]	@ (8000e9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e68:	4a0d      	ldr	r2, [pc, #52]	@ (8000ea0 <LoopForever+0xe>)
  movs r3, #0
 8000e6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e6c:	e002      	b.n	8000e74 <LoopCopyDataInit>

08000e6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e72:	3304      	adds	r3, #4

08000e74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e78:	d3f9      	bcc.n	8000e6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e7c:	4c0a      	ldr	r4, [pc, #40]	@ (8000ea8 <LoopForever+0x16>)
  movs r3, #0
 8000e7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e80:	e001      	b.n	8000e86 <LoopFillZerobss>

08000e82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e84:	3204      	adds	r2, #4

08000e86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e88:	d3fb      	bcc.n	8000e82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e8a:	f005 f8d3 	bl	8006034 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e8e:	f7ff fbeb 	bl	8000668 <main>

08000e92 <LoopForever>:

LoopForever:
    b LoopForever
 8000e92:	e7fe      	b.n	8000e92 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e94:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8000e98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e9c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000ea0:	080069c4 	.word	0x080069c4
  ldr r2, =_sbss
 8000ea4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000ea8:	20000350 	.word	0x20000350

08000eac <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000eac:	e7fe      	b.n	8000eac <CAN1_RX0_IRQHandler>

08000eae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b082      	sub	sp, #8
 8000eb2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb8:	2003      	movs	r0, #3
 8000eba:	f001 fcc1 	bl	8002840 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ebe:	200f      	movs	r0, #15
 8000ec0:	f000 f80e 	bl	8000ee0 <HAL_InitTick>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d002      	beq.n	8000ed0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	71fb      	strb	r3, [r7, #7]
 8000ece:	e001      	b.n	8000ed4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ed0:	f7ff fdec 	bl	8000aac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000eec:	4b17      	ldr	r3, [pc, #92]	@ (8000f4c <HAL_InitTick+0x6c>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d023      	beq.n	8000f3c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ef4:	4b16      	ldr	r3, [pc, #88]	@ (8000f50 <HAL_InitTick+0x70>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	4b14      	ldr	r3, [pc, #80]	@ (8000f4c <HAL_InitTick+0x6c>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4619      	mov	r1, r3
 8000efe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f001 fccd 	bl	80028aa <HAL_SYSTICK_Config>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d10f      	bne.n	8000f36 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2b0f      	cmp	r3, #15
 8000f1a:	d809      	bhi.n	8000f30 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	6879      	ldr	r1, [r7, #4]
 8000f20:	f04f 30ff 	mov.w	r0, #4294967295
 8000f24:	f001 fc97 	bl	8002856 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f28:	4a0a      	ldr	r2, [pc, #40]	@ (8000f54 <HAL_InitTick+0x74>)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6013      	str	r3, [r2, #0]
 8000f2e:	e007      	b.n	8000f40 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	73fb      	strb	r3, [r7, #15]
 8000f34:	e004      	b.n	8000f40 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	73fb      	strb	r3, [r7, #15]
 8000f3a:	e001      	b.n	8000f40 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000008 	.word	0x20000008
 8000f50:	20000000 	.word	0x20000000
 8000f54:	20000004 	.word	0x20000004

08000f58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f5c:	4b06      	ldr	r3, [pc, #24]	@ (8000f78 <HAL_IncTick+0x20>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	461a      	mov	r2, r3
 8000f62:	4b06      	ldr	r3, [pc, #24]	@ (8000f7c <HAL_IncTick+0x24>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4413      	add	r3, r2
 8000f68:	4a04      	ldr	r2, [pc, #16]	@ (8000f7c <HAL_IncTick+0x24>)
 8000f6a:	6013      	str	r3, [r2, #0]
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	20000008 	.word	0x20000008
 8000f7c:	20000204 	.word	0x20000204

08000f80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  return uwTick;
 8000f84:	4b03      	ldr	r3, [pc, #12]	@ (8000f94 <HAL_GetTick+0x14>)
 8000f86:	681b      	ldr	r3, [r3, #0]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	20000204 	.word	0x20000204

08000f98 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	431a      	orrs	r2, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	b083      	sub	sp, #12
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
 8000fc6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001000:	b480      	push	{r7}
 8001002:	b087      	sub	sp, #28
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
 800100c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	3360      	adds	r3, #96	@ 0x60
 8001012:	461a      	mov	r2, r3
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	4413      	add	r3, r2
 800101a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	4b08      	ldr	r3, [pc, #32]	@ (8001044 <LL_ADC_SetOffset+0x44>)
 8001022:	4013      	ands	r3, r2
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800102a:	683a      	ldr	r2, [r7, #0]
 800102c:	430a      	orrs	r2, r1
 800102e:	4313      	orrs	r3, r2
 8001030:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001038:	bf00      	nop
 800103a:	371c      	adds	r7, #28
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	03fff000 	.word	0x03fff000

08001048 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3360      	adds	r3, #96	@ 0x60
 8001056:	461a      	mov	r2, r3
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	4413      	add	r3, r2
 800105e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001068:	4618      	mov	r0, r3
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001074:	b480      	push	{r7}
 8001076:	b087      	sub	sp, #28
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	3360      	adds	r3, #96	@ 0x60
 8001084:	461a      	mov	r2, r3
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	4413      	add	r3, r2
 800108c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	431a      	orrs	r2, r3
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800109e:	bf00      	nop
 80010a0:	371c      	adds	r7, #28
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80010aa:	b480      	push	{r7}
 80010ac:	b083      	sub	sp, #12
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
 80010b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	695b      	ldr	r3, [r3, #20]
 80010b8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	431a      	orrs	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	615a      	str	r2, [r3, #20]
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d101      	bne.n	80010e8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80010e4:	2301      	movs	r3, #1
 80010e6:	e000      	b.n	80010ea <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80010f6:	b480      	push	{r7}
 80010f8:	b087      	sub	sp, #28
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	60f8      	str	r0, [r7, #12]
 80010fe:	60b9      	str	r1, [r7, #8]
 8001100:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	3330      	adds	r3, #48	@ 0x30
 8001106:	461a      	mov	r2, r3
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	0a1b      	lsrs	r3, r3, #8
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	f003 030c 	and.w	r3, r3, #12
 8001112:	4413      	add	r3, r2
 8001114:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	f003 031f 	and.w	r3, r3, #31
 8001120:	211f      	movs	r1, #31
 8001122:	fa01 f303 	lsl.w	r3, r1, r3
 8001126:	43db      	mvns	r3, r3
 8001128:	401a      	ands	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	0e9b      	lsrs	r3, r3, #26
 800112e:	f003 011f 	and.w	r1, r3, #31
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	f003 031f 	and.w	r3, r3, #31
 8001138:	fa01 f303 	lsl.w	r3, r1, r3
 800113c:	431a      	orrs	r2, r3
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001142:	bf00      	nop
 8001144:	371c      	adds	r7, #28
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800114e:	b480      	push	{r7}
 8001150:	b083      	sub	sp, #12
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d101      	bne.n	8001166 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001162:	2301      	movs	r3, #1
 8001164:	e000      	b.n	8001168 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001166:	2300      	movs	r3, #0
}
 8001168:	4618      	mov	r0, r3
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001174:	b480      	push	{r7}
 8001176:	b087      	sub	sp, #28
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	3314      	adds	r3, #20
 8001184:	461a      	mov	r2, r3
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	0e5b      	lsrs	r3, r3, #25
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	4413      	add	r3, r2
 8001192:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	0d1b      	lsrs	r3, r3, #20
 800119c:	f003 031f 	and.w	r3, r3, #31
 80011a0:	2107      	movs	r1, #7
 80011a2:	fa01 f303 	lsl.w	r3, r1, r3
 80011a6:	43db      	mvns	r3, r3
 80011a8:	401a      	ands	r2, r3
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	0d1b      	lsrs	r3, r3, #20
 80011ae:	f003 031f 	and.w	r3, r3, #31
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	fa01 f303 	lsl.w	r3, r1, r3
 80011b8:	431a      	orrs	r2, r3
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80011be:	bf00      	nop
 80011c0:	371c      	adds	r7, #28
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
	...

080011cc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011e4:	43db      	mvns	r3, r3
 80011e6:	401a      	ands	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f003 0318 	and.w	r3, r3, #24
 80011ee:	4908      	ldr	r1, [pc, #32]	@ (8001210 <LL_ADC_SetChannelSingleDiff+0x44>)
 80011f0:	40d9      	lsrs	r1, r3
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	400b      	ands	r3, r1
 80011f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011fa:	431a      	orrs	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001202:	bf00      	nop
 8001204:	3714      	adds	r7, #20
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	0007ffff 	.word	0x0007ffff

08001214 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001224:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	6093      	str	r3, [r2, #8]
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001248:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800124c:	d101      	bne.n	8001252 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800124e:	2301      	movs	r3, #1
 8001250:	e000      	b.n	8001254 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001252:	2300      	movs	r3, #0
}
 8001254:	4618      	mov	r0, r3
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001270:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001274:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001298:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800129c:	d101      	bne.n	80012a2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800129e:	2301      	movs	r3, #1
 80012a0:	e000      	b.n	80012a4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80012a2:	2300      	movs	r3, #0
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80012c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80012c4:	f043 0201 	orr.w	r2, r3, #1
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80012cc:	bf00      	nop
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80012e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80012ec:	f043 0202 	orr.w	r2, r3, #2
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	2b01      	cmp	r3, #1
 8001312:	d101      	bne.n	8001318 <LL_ADC_IsEnabled+0x18>
 8001314:	2301      	movs	r3, #1
 8001316:	e000      	b.n	800131a <LL_ADC_IsEnabled+0x1a>
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001326:	b480      	push	{r7}
 8001328:	b083      	sub	sp, #12
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	2b02      	cmp	r3, #2
 8001338:	d101      	bne.n	800133e <LL_ADC_IsDisableOngoing+0x18>
 800133a:	2301      	movs	r3, #1
 800133c:	e000      	b.n	8001340 <LL_ADC_IsDisableOngoing+0x1a>
 800133e:	2300      	movs	r3, #0
}
 8001340:	4618      	mov	r0, r3
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800135c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001360:	f043 0204 	orr.w	r2, r3, #4
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	f003 0304 	and.w	r3, r3, #4
 8001384:	2b04      	cmp	r3, #4
 8001386:	d101      	bne.n	800138c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001388:	2301      	movs	r3, #1
 800138a:	e000      	b.n	800138e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800139a:	b480      	push	{r7}
 800139c:	b083      	sub	sp, #12
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	f003 0308 	and.w	r3, r3, #8
 80013aa:	2b08      	cmp	r3, #8
 80013ac:	d101      	bne.n	80013b2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80013ae:	2301      	movs	r3, #1
 80013b0:	e000      	b.n	80013b4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b088      	sub	sp, #32
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013c8:	2300      	movs	r3, #0
 80013ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e129      	b.n	800162e <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	691b      	ldr	r3, [r3, #16]
 80013de:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d109      	bne.n	80013fc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff fb83 	bl	8000af4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2200      	movs	r2, #0
 80013f2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff ff19 	bl	8001238 <LL_ADC_IsDeepPowerDownEnabled>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d004      	beq.n	8001416 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff feff 	bl	8001214 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff ff34 	bl	8001288 <LL_ADC_IsInternalRegulatorEnabled>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d115      	bne.n	8001452 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff ff18 	bl	8001260 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001430:	4b81      	ldr	r3, [pc, #516]	@ (8001638 <HAL_ADC_Init+0x278>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	099b      	lsrs	r3, r3, #6
 8001436:	4a81      	ldr	r2, [pc, #516]	@ (800163c <HAL_ADC_Init+0x27c>)
 8001438:	fba2 2303 	umull	r2, r3, r2, r3
 800143c:	099b      	lsrs	r3, r3, #6
 800143e:	3301      	adds	r3, #1
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001444:	e002      	b.n	800144c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	3b01      	subs	r3, #1
 800144a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1f9      	bne.n	8001446 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff ff16 	bl	8001288 <LL_ADC_IsInternalRegulatorEnabled>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d10d      	bne.n	800147e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001466:	f043 0210 	orr.w	r2, r3, #16
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001472:	f043 0201 	orr.w	r2, r3, #1
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff ff76 	bl	8001374 <LL_ADC_REG_IsConversionOngoing>
 8001488:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800148e:	f003 0310 	and.w	r3, r3, #16
 8001492:	2b00      	cmp	r3, #0
 8001494:	f040 80c2 	bne.w	800161c <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	2b00      	cmp	r3, #0
 800149c:	f040 80be 	bne.w	800161c <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014a4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80014a8:	f043 0202 	orr.w	r2, r3, #2
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff ff23 	bl	8001300 <LL_ADC_IsEnabled>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d10b      	bne.n	80014d8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80014c0:	485f      	ldr	r0, [pc, #380]	@ (8001640 <HAL_ADC_Init+0x280>)
 80014c2:	f7ff ff1d 	bl	8001300 <LL_ADC_IsEnabled>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d105      	bne.n	80014d8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	4619      	mov	r1, r3
 80014d2:	485c      	ldr	r0, [pc, #368]	@ (8001644 <HAL_ADC_Init+0x284>)
 80014d4:	f7ff fd60 	bl	8000f98 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	7e5b      	ldrb	r3, [r3, #25]
 80014dc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014e2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80014e8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80014ee:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014f6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014f8:	4313      	orrs	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d106      	bne.n	8001514 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800150a:	3b01      	subs	r3, #1
 800150c:	045b      	lsls	r3, r3, #17
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4313      	orrs	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001518:	2b00      	cmp	r3, #0
 800151a:	d009      	beq.n	8001530 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001520:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001528:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4313      	orrs	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	68da      	ldr	r2, [r3, #12]
 8001536:	4b44      	ldr	r3, [pc, #272]	@ (8001648 <HAL_ADC_Init+0x288>)
 8001538:	4013      	ands	r3, r2
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	6812      	ldr	r2, [r2, #0]
 800153e:	69b9      	ldr	r1, [r7, #24]
 8001540:	430b      	orrs	r3, r1
 8001542:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff26 	bl	800139a <LL_ADC_INJ_IsConversionOngoing>
 800154e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d140      	bne.n	80015d8 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d13d      	bne.n	80015d8 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	7e1b      	ldrb	r3, [r3, #24]
 8001564:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001566:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800156e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001570:	4313      	orrs	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800157e:	f023 0306 	bic.w	r3, r3, #6
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	6812      	ldr	r2, [r2, #0]
 8001586:	69b9      	ldr	r1, [r7, #24]
 8001588:	430b      	orrs	r3, r1
 800158a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001592:	2b01      	cmp	r3, #1
 8001594:	d118      	bne.n	80015c8 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	691b      	ldr	r3, [r3, #16]
 800159c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80015a0:	f023 0304 	bic.w	r3, r3, #4
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80015ac:	4311      	orrs	r1, r2
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80015b2:	4311      	orrs	r1, r2
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80015b8:	430a      	orrs	r2, r1
 80015ba:	431a      	orrs	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f042 0201 	orr.w	r2, r2, #1
 80015c4:	611a      	str	r2, [r3, #16]
 80015c6:	e007      	b.n	80015d8 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	691a      	ldr	r2, [r3, #16]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f022 0201 	bic.w	r2, r2, #1
 80015d6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	691b      	ldr	r3, [r3, #16]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d10c      	bne.n	80015fa <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e6:	f023 010f 	bic.w	r1, r3, #15
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	1e5a      	subs	r2, r3, #1
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	430a      	orrs	r2, r1
 80015f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80015f8:	e007      	b.n	800160a <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f022 020f 	bic.w	r2, r2, #15
 8001608:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800160e:	f023 0303 	bic.w	r3, r3, #3
 8001612:	f043 0201 	orr.w	r2, r3, #1
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	659a      	str	r2, [r3, #88]	@ 0x58
 800161a:	e007      	b.n	800162c <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001620:	f043 0210 	orr.w	r2, r3, #16
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800162c:	7ffb      	ldrb	r3, [r7, #31]
}
 800162e:	4618      	mov	r0, r3
 8001630:	3720      	adds	r7, #32
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000000 	.word	0x20000000
 800163c:	053e2d63 	.word	0x053e2d63
 8001640:	50040000 	.word	0x50040000
 8001644:	50040300 	.word	0x50040300
 8001648:	fff0c007 	.word	0xfff0c007

0800164c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff fe8b 	bl	8001374 <LL_ADC_REG_IsConversionOngoing>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	f040 80a0 	bne.w	80017a6 <HAL_ADC_Start_IT+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800166c:	2b01      	cmp	r3, #1
 800166e:	d101      	bne.n	8001674 <HAL_ADC_Start_IT+0x28>
 8001670:	2302      	movs	r3, #2
 8001672:	e09b      	b.n	80017ac <HAL_ADC_Start_IT+0x160>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2201      	movs	r2, #1
 8001678:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f000 fe6b 	bl	8002358 <ADC_Enable>
 8001682:	4603      	mov	r3, r0
 8001684:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001686:	7bfb      	ldrb	r3, [r7, #15]
 8001688:	2b00      	cmp	r3, #0
 800168a:	f040 8087 	bne.w	800179c <HAL_ADC_Start_IT+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001692:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001696:	f023 0301 	bic.w	r3, r3, #1
 800169a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d006      	beq.n	80016bc <HAL_ADC_Start_IT+0x70>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016b2:	f023 0206 	bic.w	r2, r3, #6
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80016ba:	e002      	b.n	80016c2 <HAL_ADC_Start_IT+0x76>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2200      	movs	r2, #0
 80016c0:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	221c      	movs	r2, #28
 80016c8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	685a      	ldr	r2, [r3, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f022 021c 	bic.w	r2, r2, #28
 80016e0:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	2b08      	cmp	r3, #8
 80016e8:	d108      	bne.n	80016fc <HAL_ADC_Start_IT+0xb0>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	685a      	ldr	r2, [r3, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f042 0208 	orr.w	r2, r2, #8
 80016f8:	605a      	str	r2, [r3, #4]
          break;
 80016fa:	e008      	b.n	800170e <HAL_ADC_Start_IT+0xc2>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	685a      	ldr	r2, [r3, #4]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f042 0204 	orr.w	r2, r2, #4
 800170a:	605a      	str	r2, [r3, #4]
          break;
 800170c:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001712:	2b00      	cmp	r3, #0
 8001714:	d107      	bne.n	8001726 <HAL_ADC_Start_IT+0xda>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	685a      	ldr	r2, [r3, #4]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f042 0210 	orr.w	r2, r2, #16
 8001724:	605a      	str	r2, [r3, #4]
          }
        }
      }
#else
      /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d02d      	beq.n	8001790 <HAL_ADC_Start_IT+0x144>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001738:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800173c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Enable as well injected interruptions in case
         HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
         allows to start regular and injected conversions when JAUTO is
         set with a single call to HAL_ADC_Start_IT() */
        switch (hadc->Init.EOCSelection)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	695b      	ldr	r3, [r3, #20]
 8001748:	2b08      	cmp	r3, #8
 800174a:	d110      	bne.n	800176e <HAL_ADC_Start_IT+0x122>
        {
          case ADC_EOC_SEQ_CONV:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	685a      	ldr	r2, [r3, #4]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f022 0220 	bic.w	r2, r2, #32
 800175a:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	685a      	ldr	r2, [r3, #4]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800176a:	605a      	str	r2, [r3, #4]
            break;
 800176c:	e010      	b.n	8001790 <HAL_ADC_Start_IT+0x144>
          /* case ADC_EOC_SINGLE_CONV */
          default:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800177c:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	685a      	ldr	r2, [r3, #4]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f042 0220 	orr.w	r2, r2, #32
 800178c:	605a      	str	r2, [r3, #4]
            break;
 800178e:	bf00      	nop
        }
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff fdd9 	bl	800134c <LL_ADC_REG_StartConversion>
 800179a:	e006      	b.n	80017aa <HAL_ADC_Start_IT+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80017a4:	e001      	b.n	80017aa <HAL_ADC_Start_IT+0x15e>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80017a6:	2302      	movs	r3, #2
 80017a8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80017aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b088      	sub	sp, #32
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80017d6:	2300      	movs	r3, #0
 80017d8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d017      	beq.n	8001824 <HAL_ADC_IRQHandler+0x56>
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d012      	beq.n	8001824 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001802:	f003 0310 	and.w	r3, r3, #16
 8001806:	2b00      	cmp	r3, #0
 8001808:	d105      	bne.n	8001816 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800180e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 ff38 	bl	800268c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2202      	movs	r2, #2
 8001822:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	f003 0304 	and.w	r3, r3, #4
 800182a:	2b00      	cmp	r3, #0
 800182c:	d004      	beq.n	8001838 <HAL_ADC_IRQHandler+0x6a>
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	2b00      	cmp	r3, #0
 8001836:	d109      	bne.n	800184c <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800183e:	2b00      	cmp	r3, #0
 8001840:	d05e      	beq.n	8001900 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	f003 0308 	and.w	r3, r3, #8
 8001848:	2b00      	cmp	r3, #0
 800184a:	d059      	beq.n	8001900 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001850:	f003 0310 	and.w	r3, r3, #16
 8001854:	2b00      	cmp	r3, #0
 8001856:	d105      	bne.n	8001864 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800185c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff fc31 	bl	80010d0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d03e      	beq.n	80018f2 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d135      	bne.n	80018f2 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0308 	and.w	r3, r3, #8
 8001890:	2b08      	cmp	r3, #8
 8001892:	d12e      	bne.n	80018f2 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff fd6b 	bl	8001374 <LL_ADC_REG_IsConversionOngoing>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d11a      	bne.n	80018da <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	685a      	ldr	r2, [r3, #4]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f022 020c 	bic.w	r2, r2, #12
 80018b2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	659a      	str	r2, [r3, #88]	@ 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d112      	bne.n	80018f2 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018d0:	f043 0201 	orr.w	r2, r3, #1
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	659a      	str	r2, [r3, #88]	@ 0x58
 80018d8:	e00b      	b.n	80018f2 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018de:	f043 0210 	orr.w	r2, r3, #16
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018ea:	f043 0201 	orr.w	r2, r3, #1
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7fe fe8c 	bl	8000610 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	220c      	movs	r2, #12
 80018fe:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	f003 0320 	and.w	r3, r3, #32
 8001906:	2b00      	cmp	r3, #0
 8001908:	d004      	beq.n	8001914 <HAL_ADC_IRQHandler+0x146>
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	f003 0320 	and.w	r3, r3, #32
 8001910:	2b00      	cmp	r3, #0
 8001912:	d109      	bne.n	8001928 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800191a:	2b00      	cmp	r3, #0
 800191c:	d072      	beq.n	8001a04 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001924:	2b00      	cmp	r3, #0
 8001926:	d06d      	beq.n	8001a04 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800192c:	f003 0310 	and.w	r3, r3, #16
 8001930:	2b00      	cmp	r3, #0
 8001932:	d105      	bne.n	8001940 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001938:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff fc02 	bl	800114e <LL_ADC_INJ_IsTriggerSourceSWStart>
 800194a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff fbbd 	bl	80010d0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001956:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d047      	beq.n	80019f6 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d007      	beq.n	8001980 <HAL_ADC_IRQHandler+0x1b2>
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d03f      	beq.n	80019f6 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800197c:	2b00      	cmp	r3, #0
 800197e:	d13a      	bne.n	80019f6 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800198a:	2b40      	cmp	r3, #64	@ 0x40
 800198c:	d133      	bne.n	80019f6 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d12e      	bne.n	80019f6 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff fcfc 	bl	800139a <LL_ADC_INJ_IsConversionOngoing>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d11a      	bne.n	80019de <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	685a      	ldr	r2, [r3, #4]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80019b6:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	659a      	str	r2, [r3, #88]	@ 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d112      	bne.n	80019f6 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d4:	f043 0201 	orr.w	r2, r3, #1
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	659a      	str	r2, [r3, #88]	@ 0x58
 80019dc:	e00b      	b.n	80019f6 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019e2:	f043 0210 	orr.w	r2, r3, #16
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	659a      	str	r2, [r3, #88]	@ 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019ee:	f043 0201 	orr.w	r2, r3, #1
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	65da      	str	r2, [r3, #92]	@ 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 fe20 	bl	800263c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2260      	movs	r2, #96	@ 0x60
 8001a02:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d011      	beq.n	8001a32 <HAL_ADC_IRQHandler+0x264>
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d00c      	beq.n	8001a32 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a1c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f000 f886 	bl	8001b36 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2280      	movs	r2, #128	@ 0x80
 8001a30:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d012      	beq.n	8001a62 <HAL_ADC_IRQHandler+0x294>
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d00d      	beq.n	8001a62 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a4a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f000 fe06 	bl	8002664 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a60:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d012      	beq.n	8001a92 <HAL_ADC_IRQHandler+0x2c4>
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d00d      	beq.n	8001a92 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a7a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f000 fdf8 	bl	8002678 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a90:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	f003 0310 	and.w	r3, r3, #16
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d02a      	beq.n	8001af2 <HAL_ADC_IRQHandler+0x324>
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	f003 0310 	and.w	r3, r3, #16
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d025      	beq.n	8001af2 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d102      	bne.n	8001ab4 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	61fb      	str	r3, [r7, #28]
 8001ab2:	e008      	b.n	8001ac6 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d10e      	bne.n	8001aea <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ad0:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001adc:	f043 0202 	orr.w	r2, r3, #2
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f000 f830 	bl	8001b4a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2210      	movs	r2, #16
 8001af0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d018      	beq.n	8001b2e <HAL_ADC_IRQHandler+0x360>
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d013      	beq.n	8001b2e <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b0a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b16:	f043 0208 	orr.w	r2, r3, #8
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b26:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f000 fd91 	bl	8002650 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001b2e:	bf00      	nop
 8001b30:	3720      	adds	r7, #32
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b083      	sub	sp, #12
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
	...

08001b60 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b0b6      	sub	sp, #216	@ 0xd8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d101      	bne.n	8001b82 <HAL_ADC_ConfigChannel+0x22>
 8001b7e:	2302      	movs	r3, #2
 8001b80:	e3d5      	b.n	800232e <HAL_ADC_ConfigChannel+0x7ce>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff fbf0 	bl	8001374 <LL_ADC_REG_IsConversionOngoing>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f040 83ba 	bne.w	8002310 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	2b05      	cmp	r3, #5
 8001baa:	d824      	bhi.n	8001bf6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	3b02      	subs	r3, #2
 8001bb2:	2b03      	cmp	r3, #3
 8001bb4:	d81b      	bhi.n	8001bee <HAL_ADC_ConfigChannel+0x8e>
 8001bb6:	a201      	add	r2, pc, #4	@ (adr r2, 8001bbc <HAL_ADC_ConfigChannel+0x5c>)
 8001bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bbc:	08001bcd 	.word	0x08001bcd
 8001bc0:	08001bd5 	.word	0x08001bd5
 8001bc4:	08001bdd 	.word	0x08001bdd
 8001bc8:	08001be5 	.word	0x08001be5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001bcc:	230c      	movs	r3, #12
 8001bce:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001bd2:	e010      	b.n	8001bf6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001bd4:	2312      	movs	r3, #18
 8001bd6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001bda:	e00c      	b.n	8001bf6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001bdc:	2318      	movs	r3, #24
 8001bde:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001be2:	e008      	b.n	8001bf6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001be4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001be8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001bec:	e003      	b.n	8001bf6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001bee:	2306      	movs	r3, #6
 8001bf0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001bf4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6818      	ldr	r0, [r3, #0]
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001c04:	f7ff fa77 	bl	80010f6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff fbb1 	bl	8001374 <LL_ADC_REG_IsConversionOngoing>
 8001c12:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff fbbd 	bl	800139a <LL_ADC_INJ_IsConversionOngoing>
 8001c20:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f040 81bf 	bne.w	8001fac <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	f040 81ba 	bne.w	8001fac <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001c40:	d10f      	bne.n	8001c62 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6818      	ldr	r0, [r3, #0]
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f7ff fa91 	bl	8001174 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff fa25 	bl	80010aa <LL_ADC_SetSamplingTimeCommonConfig>
 8001c60:	e00e      	b.n	8001c80 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6818      	ldr	r0, [r3, #0]
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	6819      	ldr	r1, [r3, #0]
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	f7ff fa80 	bl	8001174 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2100      	movs	r1, #0
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff fa15 	bl	80010aa <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	695a      	ldr	r2, [r3, #20]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	08db      	lsrs	r3, r3, #3
 8001c8c:	f003 0303 	and.w	r3, r3, #3
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	d00a      	beq.n	8001cb8 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6818      	ldr	r0, [r3, #0]
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	6919      	ldr	r1, [r3, #16]
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001cb2:	f7ff f9a5 	bl	8001000 <LL_ADC_SetOffset>
 8001cb6:	e179      	b.n	8001fac <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff f9c2 	bl	8001048 <LL_ADC_GetOffsetChannel>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d10a      	bne.n	8001ce4 <HAL_ADC_ConfigChannel+0x184>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff f9b7 	bl	8001048 <LL_ADC_GetOffsetChannel>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	0e9b      	lsrs	r3, r3, #26
 8001cde:	f003 021f 	and.w	r2, r3, #31
 8001ce2:	e01e      	b.n	8001d22 <HAL_ADC_ConfigChannel+0x1c2>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2100      	movs	r1, #0
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff f9ac 	bl	8001048 <LL_ADC_GetOffsetChannel>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001cfa:	fa93 f3a3 	rbit	r3, r3
 8001cfe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001d06:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001d0a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8001d12:	2320      	movs	r3, #32
 8001d14:	e004      	b.n	8001d20 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8001d16:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001d1a:	fab3 f383 	clz	r3, r3
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d105      	bne.n	8001d3a <HAL_ADC_ConfigChannel+0x1da>
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	0e9b      	lsrs	r3, r3, #26
 8001d34:	f003 031f 	and.w	r3, r3, #31
 8001d38:	e018      	b.n	8001d6c <HAL_ADC_ConfigChannel+0x20c>
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001d46:	fa93 f3a3 	rbit	r3, r3
 8001d4a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001d4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001d52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001d56:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8001d5e:	2320      	movs	r3, #32
 8001d60:	e004      	b.n	8001d6c <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8001d62:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d66:	fab3 f383 	clz	r3, r3
 8001d6a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d106      	bne.n	8001d7e <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2200      	movs	r2, #0
 8001d76:	2100      	movs	r1, #0
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff f97b 	bl	8001074 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2101      	movs	r1, #1
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff f95f 	bl	8001048 <LL_ADC_GetOffsetChannel>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d10a      	bne.n	8001daa <HAL_ADC_ConfigChannel+0x24a>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2101      	movs	r1, #1
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff f954 	bl	8001048 <LL_ADC_GetOffsetChannel>
 8001da0:	4603      	mov	r3, r0
 8001da2:	0e9b      	lsrs	r3, r3, #26
 8001da4:	f003 021f 	and.w	r2, r3, #31
 8001da8:	e01e      	b.n	8001de8 <HAL_ADC_ConfigChannel+0x288>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2101      	movs	r1, #1
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff f949 	bl	8001048 <LL_ADC_GetOffsetChannel>
 8001db6:	4603      	mov	r3, r0
 8001db8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001dc0:	fa93 f3a3 	rbit	r3, r3
 8001dc4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001dc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001dcc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001dd0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d101      	bne.n	8001ddc <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8001dd8:	2320      	movs	r3, #32
 8001dda:	e004      	b.n	8001de6 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8001ddc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001de0:	fab3 f383 	clz	r3, r3
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d105      	bne.n	8001e00 <HAL_ADC_ConfigChannel+0x2a0>
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	0e9b      	lsrs	r3, r3, #26
 8001dfa:	f003 031f 	and.w	r3, r3, #31
 8001dfe:	e018      	b.n	8001e32 <HAL_ADC_ConfigChannel+0x2d2>
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e08:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001e0c:	fa93 f3a3 	rbit	r3, r3
 8001e10:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001e14:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001e18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001e1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d101      	bne.n	8001e28 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8001e24:	2320      	movs	r3, #32
 8001e26:	e004      	b.n	8001e32 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8001e28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001e2c:	fab3 f383 	clz	r3, r3
 8001e30:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d106      	bne.n	8001e44 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff f918 	bl	8001074 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2102      	movs	r1, #2
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff f8fc 	bl	8001048 <LL_ADC_GetOffsetChannel>
 8001e50:	4603      	mov	r3, r0
 8001e52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d10a      	bne.n	8001e70 <HAL_ADC_ConfigChannel+0x310>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2102      	movs	r1, #2
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff f8f1 	bl	8001048 <LL_ADC_GetOffsetChannel>
 8001e66:	4603      	mov	r3, r0
 8001e68:	0e9b      	lsrs	r3, r3, #26
 8001e6a:	f003 021f 	and.w	r2, r3, #31
 8001e6e:	e01e      	b.n	8001eae <HAL_ADC_ConfigChannel+0x34e>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2102      	movs	r1, #2
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff f8e6 	bl	8001048 <LL_ADC_GetOffsetChannel>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e82:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001e86:	fa93 f3a3 	rbit	r3, r3
 8001e8a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001e8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001e92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001e96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d101      	bne.n	8001ea2 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8001e9e:	2320      	movs	r3, #32
 8001ea0:	e004      	b.n	8001eac <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8001ea2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ea6:	fab3 f383 	clz	r3, r3
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d105      	bne.n	8001ec6 <HAL_ADC_ConfigChannel+0x366>
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	0e9b      	lsrs	r3, r3, #26
 8001ec0:	f003 031f 	and.w	r3, r3, #31
 8001ec4:	e014      	b.n	8001ef0 <HAL_ADC_ConfigChannel+0x390>
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ecc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001ece:	fa93 f3a3 	rbit	r3, r3
 8001ed2:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001ed4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ed6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001eda:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8001ee2:	2320      	movs	r3, #32
 8001ee4:	e004      	b.n	8001ef0 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8001ee6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001eea:	fab3 f383 	clz	r3, r3
 8001eee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d106      	bne.n	8001f02 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	2102      	movs	r1, #2
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff f8b9 	bl	8001074 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2103      	movs	r1, #3
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff f89d 	bl	8001048 <LL_ADC_GetOffsetChannel>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d10a      	bne.n	8001f2e <HAL_ADC_ConfigChannel+0x3ce>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2103      	movs	r1, #3
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff f892 	bl	8001048 <LL_ADC_GetOffsetChannel>
 8001f24:	4603      	mov	r3, r0
 8001f26:	0e9b      	lsrs	r3, r3, #26
 8001f28:	f003 021f 	and.w	r2, r3, #31
 8001f2c:	e017      	b.n	8001f5e <HAL_ADC_ConfigChannel+0x3fe>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2103      	movs	r1, #3
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff f887 	bl	8001048 <LL_ADC_GetOffsetChannel>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001f40:	fa93 f3a3 	rbit	r3, r3
 8001f44:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001f46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f48:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001f4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d101      	bne.n	8001f54 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8001f50:	2320      	movs	r3, #32
 8001f52:	e003      	b.n	8001f5c <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8001f54:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f56:	fab3 f383 	clz	r3, r3
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d105      	bne.n	8001f76 <HAL_ADC_ConfigChannel+0x416>
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	0e9b      	lsrs	r3, r3, #26
 8001f70:	f003 031f 	and.w	r3, r3, #31
 8001f74:	e011      	b.n	8001f9a <HAL_ADC_ConfigChannel+0x43a>
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f7e:	fa93 f3a3 	rbit	r3, r3
 8001f82:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001f84:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f86:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001f88:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8001f8e:	2320      	movs	r3, #32
 8001f90:	e003      	b.n	8001f9a <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8001f92:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f94:	fab3 f383 	clz	r3, r3
 8001f98:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d106      	bne.n	8001fac <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	2103      	movs	r1, #3
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff f864 	bl	8001074 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff f9a5 	bl	8001300 <LL_ADC_IsEnabled>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f040 813f 	bne.w	800223c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6818      	ldr	r0, [r3, #0]
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	6819      	ldr	r1, [r3, #0]
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	f7ff f8fe 	bl	80011cc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	4a8e      	ldr	r2, [pc, #568]	@ (8002210 <HAL_ADC_ConfigChannel+0x6b0>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	f040 8130 	bne.w	800223c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d10b      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x4a4>
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	0e9b      	lsrs	r3, r3, #26
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	f003 031f 	and.w	r3, r3, #31
 8001ff8:	2b09      	cmp	r3, #9
 8001ffa:	bf94      	ite	ls
 8001ffc:	2301      	movls	r3, #1
 8001ffe:	2300      	movhi	r3, #0
 8002000:	b2db      	uxtb	r3, r3
 8002002:	e019      	b.n	8002038 <HAL_ADC_ConfigChannel+0x4d8>
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800200c:	fa93 f3a3 	rbit	r3, r3
 8002010:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002012:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002014:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002016:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002018:	2b00      	cmp	r3, #0
 800201a:	d101      	bne.n	8002020 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 800201c:	2320      	movs	r3, #32
 800201e:	e003      	b.n	8002028 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002020:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002022:	fab3 f383 	clz	r3, r3
 8002026:	b2db      	uxtb	r3, r3
 8002028:	3301      	adds	r3, #1
 800202a:	f003 031f 	and.w	r3, r3, #31
 800202e:	2b09      	cmp	r3, #9
 8002030:	bf94      	ite	ls
 8002032:	2301      	movls	r3, #1
 8002034:	2300      	movhi	r3, #0
 8002036:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002038:	2b00      	cmp	r3, #0
 800203a:	d079      	beq.n	8002130 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002044:	2b00      	cmp	r3, #0
 8002046:	d107      	bne.n	8002058 <HAL_ADC_ConfigChannel+0x4f8>
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	0e9b      	lsrs	r3, r3, #26
 800204e:	3301      	adds	r3, #1
 8002050:	069b      	lsls	r3, r3, #26
 8002052:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002056:	e015      	b.n	8002084 <HAL_ADC_ConfigChannel+0x524>
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002060:	fa93 f3a3 	rbit	r3, r3
 8002064:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002066:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002068:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800206a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002070:	2320      	movs	r3, #32
 8002072:	e003      	b.n	800207c <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002074:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002076:	fab3 f383 	clz	r3, r3
 800207a:	b2db      	uxtb	r3, r3
 800207c:	3301      	adds	r3, #1
 800207e:	069b      	lsls	r3, r3, #26
 8002080:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800208c:	2b00      	cmp	r3, #0
 800208e:	d109      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x544>
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	0e9b      	lsrs	r3, r3, #26
 8002096:	3301      	adds	r3, #1
 8002098:	f003 031f 	and.w	r3, r3, #31
 800209c:	2101      	movs	r1, #1
 800209e:	fa01 f303 	lsl.w	r3, r1, r3
 80020a2:	e017      	b.n	80020d4 <HAL_ADC_ConfigChannel+0x574>
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020ac:	fa93 f3a3 	rbit	r3, r3
 80020b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80020b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020b4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80020b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d101      	bne.n	80020c0 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80020bc:	2320      	movs	r3, #32
 80020be:	e003      	b.n	80020c8 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80020c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020c2:	fab3 f383 	clz	r3, r3
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	3301      	adds	r3, #1
 80020ca:	f003 031f 	and.w	r3, r3, #31
 80020ce:	2101      	movs	r1, #1
 80020d0:	fa01 f303 	lsl.w	r3, r1, r3
 80020d4:	ea42 0103 	orr.w	r1, r2, r3
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d10a      	bne.n	80020fa <HAL_ADC_ConfigChannel+0x59a>
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	0e9b      	lsrs	r3, r3, #26
 80020ea:	3301      	adds	r3, #1
 80020ec:	f003 021f 	and.w	r2, r3, #31
 80020f0:	4613      	mov	r3, r2
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	4413      	add	r3, r2
 80020f6:	051b      	lsls	r3, r3, #20
 80020f8:	e018      	b.n	800212c <HAL_ADC_ConfigChannel+0x5cc>
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002102:	fa93 f3a3 	rbit	r3, r3
 8002106:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800210a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800210c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002112:	2320      	movs	r3, #32
 8002114:	e003      	b.n	800211e <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002118:	fab3 f383 	clz	r3, r3
 800211c:	b2db      	uxtb	r3, r3
 800211e:	3301      	adds	r3, #1
 8002120:	f003 021f 	and.w	r2, r3, #31
 8002124:	4613      	mov	r3, r2
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	4413      	add	r3, r2
 800212a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800212c:	430b      	orrs	r3, r1
 800212e:	e080      	b.n	8002232 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002138:	2b00      	cmp	r3, #0
 800213a:	d107      	bne.n	800214c <HAL_ADC_ConfigChannel+0x5ec>
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	0e9b      	lsrs	r3, r3, #26
 8002142:	3301      	adds	r3, #1
 8002144:	069b      	lsls	r3, r3, #26
 8002146:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800214a:	e015      	b.n	8002178 <HAL_ADC_ConfigChannel+0x618>
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002154:	fa93 f3a3 	rbit	r3, r3
 8002158:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800215a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800215e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002160:	2b00      	cmp	r3, #0
 8002162:	d101      	bne.n	8002168 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002164:	2320      	movs	r3, #32
 8002166:	e003      	b.n	8002170 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800216a:	fab3 f383 	clz	r3, r3
 800216e:	b2db      	uxtb	r3, r3
 8002170:	3301      	adds	r3, #1
 8002172:	069b      	lsls	r3, r3, #26
 8002174:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002180:	2b00      	cmp	r3, #0
 8002182:	d109      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x638>
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	0e9b      	lsrs	r3, r3, #26
 800218a:	3301      	adds	r3, #1
 800218c:	f003 031f 	and.w	r3, r3, #31
 8002190:	2101      	movs	r1, #1
 8002192:	fa01 f303 	lsl.w	r3, r1, r3
 8002196:	e017      	b.n	80021c8 <HAL_ADC_ConfigChannel+0x668>
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	fa93 f3a3 	rbit	r3, r3
 80021a4:	61bb      	str	r3, [r7, #24]
  return result;
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80021aa:	6a3b      	ldr	r3, [r7, #32]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d101      	bne.n	80021b4 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80021b0:	2320      	movs	r3, #32
 80021b2:	e003      	b.n	80021bc <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80021b4:	6a3b      	ldr	r3, [r7, #32]
 80021b6:	fab3 f383 	clz	r3, r3
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	3301      	adds	r3, #1
 80021be:	f003 031f 	and.w	r3, r3, #31
 80021c2:	2101      	movs	r1, #1
 80021c4:	fa01 f303 	lsl.w	r3, r1, r3
 80021c8:	ea42 0103 	orr.w	r1, r2, r3
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d10d      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x694>
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	0e9b      	lsrs	r3, r3, #26
 80021de:	3301      	adds	r3, #1
 80021e0:	f003 021f 	and.w	r2, r3, #31
 80021e4:	4613      	mov	r3, r2
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	4413      	add	r3, r2
 80021ea:	3b1e      	subs	r3, #30
 80021ec:	051b      	lsls	r3, r3, #20
 80021ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80021f2:	e01d      	b.n	8002230 <HAL_ADC_ConfigChannel+0x6d0>
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	fa93 f3a3 	rbit	r3, r3
 8002200:	60fb      	str	r3, [r7, #12]
  return result;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d103      	bne.n	8002214 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800220c:	2320      	movs	r3, #32
 800220e:	e005      	b.n	800221c <HAL_ADC_ConfigChannel+0x6bc>
 8002210:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	fab3 f383 	clz	r3, r3
 800221a:	b2db      	uxtb	r3, r3
 800221c:	3301      	adds	r3, #1
 800221e:	f003 021f 	and.w	r2, r3, #31
 8002222:	4613      	mov	r3, r2
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	4413      	add	r3, r2
 8002228:	3b1e      	subs	r3, #30
 800222a:	051b      	lsls	r3, r3, #20
 800222c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002230:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002236:	4619      	mov	r1, r3
 8002238:	f7fe ff9c 	bl	8001174 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	4b3d      	ldr	r3, [pc, #244]	@ (8002338 <HAL_ADC_ConfigChannel+0x7d8>)
 8002242:	4013      	ands	r3, r2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d06c      	beq.n	8002322 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002248:	483c      	ldr	r0, [pc, #240]	@ (800233c <HAL_ADC_ConfigChannel+0x7dc>)
 800224a:	f7fe fecb 	bl	8000fe4 <LL_ADC_GetCommonPathInternalCh>
 800224e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a3a      	ldr	r2, [pc, #232]	@ (8002340 <HAL_ADC_ConfigChannel+0x7e0>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d127      	bne.n	80022ac <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800225c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002260:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d121      	bne.n	80022ac <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a35      	ldr	r2, [pc, #212]	@ (8002344 <HAL_ADC_ConfigChannel+0x7e4>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d157      	bne.n	8002322 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002272:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002276:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800227a:	4619      	mov	r1, r3
 800227c:	482f      	ldr	r0, [pc, #188]	@ (800233c <HAL_ADC_ConfigChannel+0x7dc>)
 800227e:	f7fe fe9e 	bl	8000fbe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002282:	4b31      	ldr	r3, [pc, #196]	@ (8002348 <HAL_ADC_ConfigChannel+0x7e8>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	099b      	lsrs	r3, r3, #6
 8002288:	4a30      	ldr	r2, [pc, #192]	@ (800234c <HAL_ADC_ConfigChannel+0x7ec>)
 800228a:	fba2 2303 	umull	r2, r3, r2, r3
 800228e:	099b      	lsrs	r3, r3, #6
 8002290:	1c5a      	adds	r2, r3, #1
 8002292:	4613      	mov	r3, r2
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	4413      	add	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800229c:	e002      	b.n	80022a4 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	3b01      	subs	r3, #1
 80022a2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1f9      	bne.n	800229e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022aa:	e03a      	b.n	8002322 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a27      	ldr	r2, [pc, #156]	@ (8002350 <HAL_ADC_ConfigChannel+0x7f0>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d113      	bne.n	80022de <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80022b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80022ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d10d      	bne.n	80022de <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a1f      	ldr	r2, [pc, #124]	@ (8002344 <HAL_ADC_ConfigChannel+0x7e4>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d12a      	bne.n	8002322 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80022d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022d4:	4619      	mov	r1, r3
 80022d6:	4819      	ldr	r0, [pc, #100]	@ (800233c <HAL_ADC_ConfigChannel+0x7dc>)
 80022d8:	f7fe fe71 	bl	8000fbe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022dc:	e021      	b.n	8002322 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a1c      	ldr	r2, [pc, #112]	@ (8002354 <HAL_ADC_ConfigChannel+0x7f4>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d11c      	bne.n	8002322 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80022e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80022ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d116      	bne.n	8002322 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a12      	ldr	r2, [pc, #72]	@ (8002344 <HAL_ADC_ConfigChannel+0x7e4>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d111      	bne.n	8002322 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002302:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002306:	4619      	mov	r1, r3
 8002308:	480c      	ldr	r0, [pc, #48]	@ (800233c <HAL_ADC_ConfigChannel+0x7dc>)
 800230a:	f7fe fe58 	bl	8000fbe <LL_ADC_SetCommonPathInternalCh>
 800230e:	e008      	b.n	8002322 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002314:	f043 0220 	orr.w	r2, r3, #32
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800232a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800232e:	4618      	mov	r0, r3
 8002330:	37d8      	adds	r7, #216	@ 0xd8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	80080000 	.word	0x80080000
 800233c:	50040300 	.word	0x50040300
 8002340:	c7520000 	.word	0xc7520000
 8002344:	50040000 	.word	0x50040000
 8002348:	20000000 	.word	0x20000000
 800234c:	053e2d63 	.word	0x053e2d63
 8002350:	cb840000 	.word	0xcb840000
 8002354:	80000001 	.word	0x80000001

08002358 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002360:	2300      	movs	r3, #0
 8002362:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4618      	mov	r0, r3
 800236a:	f7fe ffc9 	bl	8001300 <LL_ADC_IsEnabled>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d169      	bne.n	8002448 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	689a      	ldr	r2, [r3, #8]
 800237a:	4b36      	ldr	r3, [pc, #216]	@ (8002454 <ADC_Enable+0xfc>)
 800237c:	4013      	ands	r3, r2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00d      	beq.n	800239e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002386:	f043 0210 	orr.w	r2, r3, #16
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002392:	f043 0201 	orr.w	r2, r3, #1
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e055      	b.n	800244a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7fe ff84 	bl	80012b0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80023a8:	482b      	ldr	r0, [pc, #172]	@ (8002458 <ADC_Enable+0x100>)
 80023aa:	f7fe fe1b 	bl	8000fe4 <LL_ADC_GetCommonPathInternalCh>
 80023ae:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80023b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d013      	beq.n	80023e0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023b8:	4b28      	ldr	r3, [pc, #160]	@ (800245c <ADC_Enable+0x104>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	099b      	lsrs	r3, r3, #6
 80023be:	4a28      	ldr	r2, [pc, #160]	@ (8002460 <ADC_Enable+0x108>)
 80023c0:	fba2 2303 	umull	r2, r3, r2, r3
 80023c4:	099b      	lsrs	r3, r3, #6
 80023c6:	1c5a      	adds	r2, r3, #1
 80023c8:	4613      	mov	r3, r2
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	4413      	add	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80023d2:	e002      	b.n	80023da <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1f9      	bne.n	80023d4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80023e0:	f7fe fdce 	bl	8000f80 <HAL_GetTick>
 80023e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80023e6:	e028      	b.n	800243a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7fe ff87 	bl	8001300 <LL_ADC_IsEnabled>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d104      	bne.n	8002402 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7fe ff57 	bl	80012b0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002402:	f7fe fdbd 	bl	8000f80 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d914      	bls.n	800243a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b01      	cmp	r3, #1
 800241c:	d00d      	beq.n	800243a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002422:	f043 0210 	orr.w	r2, r3, #16
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800242e:	f043 0201 	orr.w	r2, r3, #1
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e007      	b.n	800244a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	2b01      	cmp	r3, #1
 8002446:	d1cf      	bne.n	80023e8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	8000003f 	.word	0x8000003f
 8002458:	50040300 	.word	0x50040300
 800245c:	20000000 	.word	0x20000000
 8002460:	053e2d63 	.word	0x053e2d63

08002464 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4618      	mov	r0, r3
 8002472:	f7fe ff58 	bl	8001326 <LL_ADC_IsDisableOngoing>
 8002476:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4618      	mov	r0, r3
 800247e:	f7fe ff3f 	bl	8001300 <LL_ADC_IsEnabled>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d047      	beq.n	8002518 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d144      	bne.n	8002518 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f003 030d 	and.w	r3, r3, #13
 8002498:	2b01      	cmp	r3, #1
 800249a:	d10c      	bne.n	80024b6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7fe ff19 	bl	80012d8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2203      	movs	r2, #3
 80024ac:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80024ae:	f7fe fd67 	bl	8000f80 <HAL_GetTick>
 80024b2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80024b4:	e029      	b.n	800250a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ba:	f043 0210 	orr.w	r2, r3, #16
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024c6:	f043 0201 	orr.w	r2, r3, #1
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e023      	b.n	800251a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80024d2:	f7fe fd55 	bl	8000f80 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d914      	bls.n	800250a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00d      	beq.n	800250a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f2:	f043 0210 	orr.w	r2, r3, #16
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024fe:	f043 0201 	orr.w	r2, r3, #1
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e007      	b.n	800251a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	2b00      	cmp	r3, #0
 8002516:	d1dc      	bne.n	80024d2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <LL_ADC_StartCalibration>:
{
 8002522:	b480      	push	{r7}
 8002524:	b083      	sub	sp, #12
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
 800252a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002534:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800253e:	4313      	orrs	r3, r2
 8002540:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	609a      	str	r2, [r3, #8]
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <LL_ADC_IsCalibrationOnGoing>:
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002564:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002568:	d101      	bne.n	800256e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800256a:	2301      	movs	r3, #1
 800256c:	e000      	b.n	8002570 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002586:	2300      	movs	r3, #0
 8002588:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002590:	2b01      	cmp	r3, #1
 8002592:	d101      	bne.n	8002598 <HAL_ADCEx_Calibration_Start+0x1c>
 8002594:	2302      	movs	r3, #2
 8002596:	e04d      	b.n	8002634 <HAL_ADCEx_Calibration_Start+0xb8>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f7ff ff5f 	bl	8002464 <ADC_Disable>
 80025a6:	4603      	mov	r3, r0
 80025a8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80025aa:	7bfb      	ldrb	r3, [r7, #15]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d136      	bne.n	800261e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025b4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80025b8:	f023 0302 	bic.w	r3, r3, #2
 80025bc:	f043 0202 	orr.w	r2, r3, #2
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6839      	ldr	r1, [r7, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff ffa9 	bl	8002522 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80025d0:	e014      	b.n	80025fc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	3301      	adds	r3, #1
 80025d6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 80025de:	d30d      	bcc.n	80025fc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025e4:	f023 0312 	bic.w	r3, r3, #18
 80025e8:	f043 0210 	orr.w	r2, r3, #16
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e01b      	b.n	8002634 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff ffa7 	bl	8002554 <LL_ADC_IsCalibrationOnGoing>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d1e2      	bne.n	80025d2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002610:	f023 0303 	bic.w	r3, r3, #3
 8002614:	f043 0201 	orr.w	r2, r3, #1
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	659a      	str	r2, [r3, #88]	@ 0x58
 800261c:	e005      	b.n	800262a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002622:	f043 0210 	orr.w	r2, r3, #16
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002632:	7bfb      	ldrb	r3, [r7, #15]
}
 8002634:	4618      	mov	r0, r3
 8002636:	3710      	adds	r7, #16
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026b0:	4b0c      	ldr	r3, [pc, #48]	@ (80026e4 <__NVIC_SetPriorityGrouping+0x44>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026b6:	68ba      	ldr	r2, [r7, #8]
 80026b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026bc:	4013      	ands	r3, r2
 80026be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026d2:	4a04      	ldr	r2, [pc, #16]	@ (80026e4 <__NVIC_SetPriorityGrouping+0x44>)
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	60d3      	str	r3, [r2, #12]
}
 80026d8:	bf00      	nop
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr
 80026e4:	e000ed00 	.word	0xe000ed00

080026e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026ec:	4b04      	ldr	r3, [pc, #16]	@ (8002700 <__NVIC_GetPriorityGrouping+0x18>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	0a1b      	lsrs	r3, r3, #8
 80026f2:	f003 0307 	and.w	r3, r3, #7
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	e000ed00 	.word	0xe000ed00

08002704 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800270e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002712:	2b00      	cmp	r3, #0
 8002714:	db0b      	blt.n	800272e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002716:	79fb      	ldrb	r3, [r7, #7]
 8002718:	f003 021f 	and.w	r2, r3, #31
 800271c:	4907      	ldr	r1, [pc, #28]	@ (800273c <__NVIC_EnableIRQ+0x38>)
 800271e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002722:	095b      	lsrs	r3, r3, #5
 8002724:	2001      	movs	r0, #1
 8002726:	fa00 f202 	lsl.w	r2, r0, r2
 800272a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800272e:	bf00      	nop
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	e000e100 	.word	0xe000e100

08002740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	4603      	mov	r3, r0
 8002748:	6039      	str	r1, [r7, #0]
 800274a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800274c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002750:	2b00      	cmp	r3, #0
 8002752:	db0a      	blt.n	800276a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	b2da      	uxtb	r2, r3
 8002758:	490c      	ldr	r1, [pc, #48]	@ (800278c <__NVIC_SetPriority+0x4c>)
 800275a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275e:	0112      	lsls	r2, r2, #4
 8002760:	b2d2      	uxtb	r2, r2
 8002762:	440b      	add	r3, r1
 8002764:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002768:	e00a      	b.n	8002780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	b2da      	uxtb	r2, r3
 800276e:	4908      	ldr	r1, [pc, #32]	@ (8002790 <__NVIC_SetPriority+0x50>)
 8002770:	79fb      	ldrb	r3, [r7, #7]
 8002772:	f003 030f 	and.w	r3, r3, #15
 8002776:	3b04      	subs	r3, #4
 8002778:	0112      	lsls	r2, r2, #4
 800277a:	b2d2      	uxtb	r2, r2
 800277c:	440b      	add	r3, r1
 800277e:	761a      	strb	r2, [r3, #24]
}
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	e000e100 	.word	0xe000e100
 8002790:	e000ed00 	.word	0xe000ed00

08002794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002794:	b480      	push	{r7}
 8002796:	b089      	sub	sp, #36	@ 0x24
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f003 0307 	and.w	r3, r3, #7
 80027a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	f1c3 0307 	rsb	r3, r3, #7
 80027ae:	2b04      	cmp	r3, #4
 80027b0:	bf28      	it	cs
 80027b2:	2304      	movcs	r3, #4
 80027b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	3304      	adds	r3, #4
 80027ba:	2b06      	cmp	r3, #6
 80027bc:	d902      	bls.n	80027c4 <NVIC_EncodePriority+0x30>
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	3b03      	subs	r3, #3
 80027c2:	e000      	b.n	80027c6 <NVIC_EncodePriority+0x32>
 80027c4:	2300      	movs	r3, #0
 80027c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027c8:	f04f 32ff 	mov.w	r2, #4294967295
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	fa02 f303 	lsl.w	r3, r2, r3
 80027d2:	43da      	mvns	r2, r3
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	401a      	ands	r2, r3
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027dc:	f04f 31ff 	mov.w	r1, #4294967295
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	fa01 f303 	lsl.w	r3, r1, r3
 80027e6:	43d9      	mvns	r1, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027ec:	4313      	orrs	r3, r2
         );
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3724      	adds	r7, #36	@ 0x24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
	...

080027fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	3b01      	subs	r3, #1
 8002808:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800280c:	d301      	bcc.n	8002812 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800280e:	2301      	movs	r3, #1
 8002810:	e00f      	b.n	8002832 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002812:	4a0a      	ldr	r2, [pc, #40]	@ (800283c <SysTick_Config+0x40>)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3b01      	subs	r3, #1
 8002818:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800281a:	210f      	movs	r1, #15
 800281c:	f04f 30ff 	mov.w	r0, #4294967295
 8002820:	f7ff ff8e 	bl	8002740 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002824:	4b05      	ldr	r3, [pc, #20]	@ (800283c <SysTick_Config+0x40>)
 8002826:	2200      	movs	r2, #0
 8002828:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800282a:	4b04      	ldr	r3, [pc, #16]	@ (800283c <SysTick_Config+0x40>)
 800282c:	2207      	movs	r2, #7
 800282e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	e000e010 	.word	0xe000e010

08002840 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f7ff ff29 	bl	80026a0 <__NVIC_SetPriorityGrouping>
}
 800284e:	bf00      	nop
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b086      	sub	sp, #24
 800285a:	af00      	add	r7, sp, #0
 800285c:	4603      	mov	r3, r0
 800285e:	60b9      	str	r1, [r7, #8]
 8002860:	607a      	str	r2, [r7, #4]
 8002862:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002864:	2300      	movs	r3, #0
 8002866:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002868:	f7ff ff3e 	bl	80026e8 <__NVIC_GetPriorityGrouping>
 800286c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	68b9      	ldr	r1, [r7, #8]
 8002872:	6978      	ldr	r0, [r7, #20]
 8002874:	f7ff ff8e 	bl	8002794 <NVIC_EncodePriority>
 8002878:	4602      	mov	r2, r0
 800287a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800287e:	4611      	mov	r1, r2
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff ff5d 	bl	8002740 <__NVIC_SetPriority>
}
 8002886:	bf00      	nop
 8002888:	3718      	adds	r7, #24
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b082      	sub	sp, #8
 8002892:	af00      	add	r7, sp, #0
 8002894:	4603      	mov	r3, r0
 8002896:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff ff31 	bl	8002704 <__NVIC_EnableIRQ>
}
 80028a2:	bf00      	nop
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b082      	sub	sp, #8
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7ff ffa2 	bl	80027fc <SysTick_Config>
 80028b8:	4603      	mov	r3, r0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
	...

080028c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b087      	sub	sp, #28
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028ce:	2300      	movs	r3, #0
 80028d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028d2:	e154      	b.n	8002b7e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	2101      	movs	r1, #1
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	fa01 f303 	lsl.w	r3, r1, r3
 80028e0:	4013      	ands	r3, r2
 80028e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f000 8146 	beq.w	8002b78 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 0303 	and.w	r3, r3, #3
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d005      	beq.n	8002904 <HAL_GPIO_Init+0x40>
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f003 0303 	and.w	r3, r3, #3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d130      	bne.n	8002966 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	2203      	movs	r2, #3
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	43db      	mvns	r3, r3
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	4013      	ands	r3, r2
 800291a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	68da      	ldr	r2, [r3, #12]
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	4313      	orrs	r3, r2
 800292c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800293a:	2201      	movs	r2, #1
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	43db      	mvns	r3, r3
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	4013      	ands	r3, r2
 8002948:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	091b      	lsrs	r3, r3, #4
 8002950:	f003 0201 	and.w	r2, r3, #1
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	fa02 f303 	lsl.w	r3, r2, r3
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	4313      	orrs	r3, r2
 800295e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f003 0303 	and.w	r3, r3, #3
 800296e:	2b03      	cmp	r3, #3
 8002970:	d017      	beq.n	80029a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	2203      	movs	r2, #3
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	43db      	mvns	r3, r3
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	4013      	ands	r3, r2
 8002988:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	689a      	ldr	r2, [r3, #8]
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	4313      	orrs	r3, r2
 800299a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f003 0303 	and.w	r3, r3, #3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d123      	bne.n	80029f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	08da      	lsrs	r2, r3, #3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	3208      	adds	r2, #8
 80029b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	f003 0307 	and.w	r3, r3, #7
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	220f      	movs	r2, #15
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	43db      	mvns	r3, r3
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	4013      	ands	r3, r2
 80029d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	691a      	ldr	r2, [r3, #16]
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	08da      	lsrs	r2, r3, #3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3208      	adds	r2, #8
 80029f0:	6939      	ldr	r1, [r7, #16]
 80029f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	2203      	movs	r2, #3
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	43db      	mvns	r3, r3
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f003 0203 	and.w	r2, r3, #3
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f000 80a0 	beq.w	8002b78 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a38:	4b58      	ldr	r3, [pc, #352]	@ (8002b9c <HAL_GPIO_Init+0x2d8>)
 8002a3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a3c:	4a57      	ldr	r2, [pc, #348]	@ (8002b9c <HAL_GPIO_Init+0x2d8>)
 8002a3e:	f043 0301 	orr.w	r3, r3, #1
 8002a42:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a44:	4b55      	ldr	r3, [pc, #340]	@ (8002b9c <HAL_GPIO_Init+0x2d8>)
 8002a46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	60bb      	str	r3, [r7, #8]
 8002a4e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a50:	4a53      	ldr	r2, [pc, #332]	@ (8002ba0 <HAL_GPIO_Init+0x2dc>)
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	089b      	lsrs	r3, r3, #2
 8002a56:	3302      	adds	r3, #2
 8002a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	f003 0303 	and.w	r3, r3, #3
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	220f      	movs	r2, #15
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	4013      	ands	r3, r2
 8002a72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002a7a:	d019      	beq.n	8002ab0 <HAL_GPIO_Init+0x1ec>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a49      	ldr	r2, [pc, #292]	@ (8002ba4 <HAL_GPIO_Init+0x2e0>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d013      	beq.n	8002aac <HAL_GPIO_Init+0x1e8>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a48      	ldr	r2, [pc, #288]	@ (8002ba8 <HAL_GPIO_Init+0x2e4>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d00d      	beq.n	8002aa8 <HAL_GPIO_Init+0x1e4>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a47      	ldr	r2, [pc, #284]	@ (8002bac <HAL_GPIO_Init+0x2e8>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d007      	beq.n	8002aa4 <HAL_GPIO_Init+0x1e0>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a46      	ldr	r2, [pc, #280]	@ (8002bb0 <HAL_GPIO_Init+0x2ec>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d101      	bne.n	8002aa0 <HAL_GPIO_Init+0x1dc>
 8002a9c:	2304      	movs	r3, #4
 8002a9e:	e008      	b.n	8002ab2 <HAL_GPIO_Init+0x1ee>
 8002aa0:	2307      	movs	r3, #7
 8002aa2:	e006      	b.n	8002ab2 <HAL_GPIO_Init+0x1ee>
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e004      	b.n	8002ab2 <HAL_GPIO_Init+0x1ee>
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	e002      	b.n	8002ab2 <HAL_GPIO_Init+0x1ee>
 8002aac:	2301      	movs	r3, #1
 8002aae:	e000      	b.n	8002ab2 <HAL_GPIO_Init+0x1ee>
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	f002 0203 	and.w	r2, r2, #3
 8002ab8:	0092      	lsls	r2, r2, #2
 8002aba:	4093      	lsls	r3, r2
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ac2:	4937      	ldr	r1, [pc, #220]	@ (8002ba0 <HAL_GPIO_Init+0x2dc>)
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	089b      	lsrs	r3, r3, #2
 8002ac8:	3302      	adds	r3, #2
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ad0:	4b38      	ldr	r3, [pc, #224]	@ (8002bb4 <HAL_GPIO_Init+0x2f0>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	4013      	ands	r3, r2
 8002ade:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d003      	beq.n	8002af4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002af4:	4a2f      	ldr	r2, [pc, #188]	@ (8002bb4 <HAL_GPIO_Init+0x2f0>)
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002afa:	4b2e      	ldr	r3, [pc, #184]	@ (8002bb4 <HAL_GPIO_Init+0x2f0>)
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	43db      	mvns	r3, r3
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	4013      	ands	r3, r2
 8002b08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b1e:	4a25      	ldr	r2, [pc, #148]	@ (8002bb4 <HAL_GPIO_Init+0x2f0>)
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002b24:	4b23      	ldr	r3, [pc, #140]	@ (8002bb4 <HAL_GPIO_Init+0x2f0>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	4013      	ands	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d003      	beq.n	8002b48 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b48:	4a1a      	ldr	r2, [pc, #104]	@ (8002bb4 <HAL_GPIO_Init+0x2f0>)
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002b4e:	4b19      	ldr	r3, [pc, #100]	@ (8002bb4 <HAL_GPIO_Init+0x2f0>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	43db      	mvns	r3, r3
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b72:	4a10      	ldr	r2, [pc, #64]	@ (8002bb4 <HAL_GPIO_Init+0x2f0>)
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	fa22 f303 	lsr.w	r3, r2, r3
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f47f aea3 	bne.w	80028d4 <HAL_GPIO_Init+0x10>
  }
}
 8002b8e:	bf00      	nop
 8002b90:	bf00      	nop
 8002b92:	371c      	adds	r7, #28
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	40010000 	.word	0x40010000
 8002ba4:	48000400 	.word	0x48000400
 8002ba8:	48000800 	.word	0x48000800
 8002bac:	48000c00 	.word	0x48000c00
 8002bb0:	48001000 	.word	0x48001000
 8002bb4:	40010400 	.word	0x40010400

08002bb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	807b      	strh	r3, [r7, #2]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bc8:	787b      	ldrb	r3, [r7, #1]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bce:	887a      	ldrh	r2, [r7, #2]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002bd4:	e002      	b.n	8002bdc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002bd6:	887a      	ldrh	r2, [r7, #2]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002bec:	4b04      	ldr	r3, [pc, #16]	@ (8002c00 <HAL_PWREx_GetVoltageRange+0x18>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	40007000 	.word	0x40007000

08002c04 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c12:	d130      	bne.n	8002c76 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c14:	4b23      	ldr	r3, [pc, #140]	@ (8002ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c20:	d038      	beq.n	8002c94 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c22:	4b20      	ldr	r3, [pc, #128]	@ (8002ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c2a:	4a1e      	ldr	r2, [pc, #120]	@ (8002ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c2c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c30:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c32:	4b1d      	ldr	r3, [pc, #116]	@ (8002ca8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2232      	movs	r2, #50	@ 0x32
 8002c38:	fb02 f303 	mul.w	r3, r2, r3
 8002c3c:	4a1b      	ldr	r2, [pc, #108]	@ (8002cac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c42:	0c9b      	lsrs	r3, r3, #18
 8002c44:	3301      	adds	r3, #1
 8002c46:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c48:	e002      	b.n	8002c50 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c50:	4b14      	ldr	r3, [pc, #80]	@ (8002ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c52:	695b      	ldr	r3, [r3, #20]
 8002c54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c5c:	d102      	bne.n	8002c64 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1f2      	bne.n	8002c4a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c64:	4b0f      	ldr	r3, [pc, #60]	@ (8002ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c70:	d110      	bne.n	8002c94 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e00f      	b.n	8002c96 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c76:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c82:	d007      	beq.n	8002c94 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c84:	4b07      	ldr	r3, [pc, #28]	@ (8002ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c8c:	4a05      	ldr	r2, [pc, #20]	@ (8002ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c92:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3714      	adds	r7, #20
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	40007000 	.word	0x40007000
 8002ca8:	20000000 	.word	0x20000000
 8002cac:	431bde83 	.word	0x431bde83

08002cb0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b088      	sub	sp, #32
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d102      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	f000 bc02 	b.w	80034c8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cc4:	4b96      	ldr	r3, [pc, #600]	@ (8002f20 <HAL_RCC_OscConfig+0x270>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f003 030c 	and.w	r3, r3, #12
 8002ccc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cce:	4b94      	ldr	r3, [pc, #592]	@ (8002f20 <HAL_RCC_OscConfig+0x270>)
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0310 	and.w	r3, r3, #16
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f000 80e4 	beq.w	8002eae <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d007      	beq.n	8002cfc <HAL_RCC_OscConfig+0x4c>
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	2b0c      	cmp	r3, #12
 8002cf0:	f040 808b 	bne.w	8002e0a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	f040 8087 	bne.w	8002e0a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cfc:	4b88      	ldr	r3, [pc, #544]	@ (8002f20 <HAL_RCC_OscConfig+0x270>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d005      	beq.n	8002d14 <HAL_RCC_OscConfig+0x64>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d101      	bne.n	8002d14 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e3d9      	b.n	80034c8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a1a      	ldr	r2, [r3, #32]
 8002d18:	4b81      	ldr	r3, [pc, #516]	@ (8002f20 <HAL_RCC_OscConfig+0x270>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0308 	and.w	r3, r3, #8
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d004      	beq.n	8002d2e <HAL_RCC_OscConfig+0x7e>
 8002d24:	4b7e      	ldr	r3, [pc, #504]	@ (8002f20 <HAL_RCC_OscConfig+0x270>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d2c:	e005      	b.n	8002d3a <HAL_RCC_OscConfig+0x8a>
 8002d2e:	4b7c      	ldr	r3, [pc, #496]	@ (8002f20 <HAL_RCC_OscConfig+0x270>)
 8002d30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d34:	091b      	lsrs	r3, r3, #4
 8002d36:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d223      	bcs.n	8002d86 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f000 fd8c 	bl	8003860 <RCC_SetFlashLatencyFromMSIRange>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e3ba      	b.n	80034c8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d52:	4b73      	ldr	r3, [pc, #460]	@ (8002f20 <HAL_RCC_OscConfig+0x270>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a72      	ldr	r2, [pc, #456]	@ (8002f20 <HAL_RCC_OscConfig+0x270>)
 8002d58:	f043 0308 	orr.w	r3, r3, #8
 8002d5c:	6013      	str	r3, [r2, #0]
 8002d5e:	4b70      	ldr	r3, [pc, #448]	@ (8002f20 <HAL_RCC_OscConfig+0x270>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	496d      	ldr	r1, [pc, #436]	@ (8002f20 <HAL_RCC_OscConfig+0x270>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d70:	4b6b      	ldr	r3, [pc, #428]	@ (8002f20 <HAL_RCC_OscConfig+0x270>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	69db      	ldr	r3, [r3, #28]
 8002d7c:	021b      	lsls	r3, r3, #8
 8002d7e:	4968      	ldr	r1, [pc, #416]	@ (8002f20 <HAL_RCC_OscConfig+0x270>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	604b      	str	r3, [r1, #4]
 8002d84:	e025      	b.n	8002dd2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d86:	4b66      	ldr	r3, [pc, #408]	@ (8002f20 <HAL_RCC_OscConfig+0x270>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a65      	ldr	r2, [pc, #404]	@ (8002f20 <HAL_RCC_OscConfig+0x270>)
 8002d8c:	f043 0308 	orr.w	r3, r3, #8
 8002d90:	6013      	str	r3, [r2, #0]
 8002d92:	4b63      	ldr	r3, [pc, #396]	@ (8002f20 <HAL_RCC_OscConfig+0x270>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	4960      	ldr	r1, [pc, #384]	@ (8002f20 <HAL_RCC_OscConfig+0x270>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002da4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f20 <HAL_RCC_OscConfig+0x270>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	69db      	ldr	r3, [r3, #28]
 8002db0:	021b      	lsls	r3, r3, #8
 8002db2:	495b      	ldr	r1, [pc, #364]	@ (8002f20 <HAL_RCC_OscConfig+0x270>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d109      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f000 fd4c 	bl	8003860 <RCC_SetFlashLatencyFromMSIRange>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e37a      	b.n	80034c8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002dd2:	f000 fc81 	bl	80036d8 <HAL_RCC_GetSysClockFreq>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	4b51      	ldr	r3, [pc, #324]	@ (8002f20 <HAL_RCC_OscConfig+0x270>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	091b      	lsrs	r3, r3, #4
 8002dde:	f003 030f 	and.w	r3, r3, #15
 8002de2:	4950      	ldr	r1, [pc, #320]	@ (8002f24 <HAL_RCC_OscConfig+0x274>)
 8002de4:	5ccb      	ldrb	r3, [r1, r3]
 8002de6:	f003 031f 	and.w	r3, r3, #31
 8002dea:	fa22 f303 	lsr.w	r3, r2, r3
 8002dee:	4a4e      	ldr	r2, [pc, #312]	@ (8002f28 <HAL_RCC_OscConfig+0x278>)
 8002df0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002df2:	4b4e      	ldr	r3, [pc, #312]	@ (8002f2c <HAL_RCC_OscConfig+0x27c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7fe f872 	bl	8000ee0 <HAL_InitTick>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002e00:	7bfb      	ldrb	r3, [r7, #15]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d052      	beq.n	8002eac <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002e06:	7bfb      	ldrb	r3, [r7, #15]
 8002e08:	e35e      	b.n	80034c8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d032      	beq.n	8002e78 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e12:	4b43      	ldr	r3, [pc, #268]	@ (8002f20 <HAL_RCC_OscConfig+0x270>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a42      	ldr	r2, [pc, #264]	@ (8002f20 <HAL_RCC_OscConfig+0x270>)
 8002e18:	f043 0301 	orr.w	r3, r3, #1
 8002e1c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e1e:	f7fe f8af 	bl	8000f80 <HAL_GetTick>
 8002e22:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e24:	e008      	b.n	8002e38 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e26:	f7fe f8ab 	bl	8000f80 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e347      	b.n	80034c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e38:	4b39      	ldr	r3, [pc, #228]	@ (8002f20 <HAL_RCC_OscConfig+0x270>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d0f0      	beq.n	8002e26 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e44:	4b36      	ldr	r3, [pc, #216]	@ (8002f20 <HAL_RCC_OscConfig+0x270>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a35      	ldr	r2, [pc, #212]	@ (8002f20 <HAL_RCC_OscConfig+0x270>)
 8002e4a:	f043 0308 	orr.w	r3, r3, #8
 8002e4e:	6013      	str	r3, [r2, #0]
 8002e50:	4b33      	ldr	r3, [pc, #204]	@ (8002f20 <HAL_RCC_OscConfig+0x270>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	4930      	ldr	r1, [pc, #192]	@ (8002f20 <HAL_RCC_OscConfig+0x270>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e62:	4b2f      	ldr	r3, [pc, #188]	@ (8002f20 <HAL_RCC_OscConfig+0x270>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	021b      	lsls	r3, r3, #8
 8002e70:	492b      	ldr	r1, [pc, #172]	@ (8002f20 <HAL_RCC_OscConfig+0x270>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	604b      	str	r3, [r1, #4]
 8002e76:	e01a      	b.n	8002eae <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e78:	4b29      	ldr	r3, [pc, #164]	@ (8002f20 <HAL_RCC_OscConfig+0x270>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a28      	ldr	r2, [pc, #160]	@ (8002f20 <HAL_RCC_OscConfig+0x270>)
 8002e7e:	f023 0301 	bic.w	r3, r3, #1
 8002e82:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e84:	f7fe f87c 	bl	8000f80 <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e8c:	f7fe f878 	bl	8000f80 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e314      	b.n	80034c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e9e:	4b20      	ldr	r3, [pc, #128]	@ (8002f20 <HAL_RCC_OscConfig+0x270>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1f0      	bne.n	8002e8c <HAL_RCC_OscConfig+0x1dc>
 8002eaa:	e000      	b.n	8002eae <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002eac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d073      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	2b08      	cmp	r3, #8
 8002ebe:	d005      	beq.n	8002ecc <HAL_RCC_OscConfig+0x21c>
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	2b0c      	cmp	r3, #12
 8002ec4:	d10e      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	2b03      	cmp	r3, #3
 8002eca:	d10b      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ecc:	4b14      	ldr	r3, [pc, #80]	@ (8002f20 <HAL_RCC_OscConfig+0x270>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d063      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x2f0>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d15f      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e2f1      	b.n	80034c8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002eec:	d106      	bne.n	8002efc <HAL_RCC_OscConfig+0x24c>
 8002eee:	4b0c      	ldr	r3, [pc, #48]	@ (8002f20 <HAL_RCC_OscConfig+0x270>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a0b      	ldr	r2, [pc, #44]	@ (8002f20 <HAL_RCC_OscConfig+0x270>)
 8002ef4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ef8:	6013      	str	r3, [r2, #0]
 8002efa:	e025      	b.n	8002f48 <HAL_RCC_OscConfig+0x298>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f04:	d114      	bne.n	8002f30 <HAL_RCC_OscConfig+0x280>
 8002f06:	4b06      	ldr	r3, [pc, #24]	@ (8002f20 <HAL_RCC_OscConfig+0x270>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a05      	ldr	r2, [pc, #20]	@ (8002f20 <HAL_RCC_OscConfig+0x270>)
 8002f0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f10:	6013      	str	r3, [r2, #0]
 8002f12:	4b03      	ldr	r3, [pc, #12]	@ (8002f20 <HAL_RCC_OscConfig+0x270>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a02      	ldr	r2, [pc, #8]	@ (8002f20 <HAL_RCC_OscConfig+0x270>)
 8002f18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f1c:	6013      	str	r3, [r2, #0]
 8002f1e:	e013      	b.n	8002f48 <HAL_RCC_OscConfig+0x298>
 8002f20:	40021000 	.word	0x40021000
 8002f24:	08006938 	.word	0x08006938
 8002f28:	20000000 	.word	0x20000000
 8002f2c:	20000004 	.word	0x20000004
 8002f30:	4ba0      	ldr	r3, [pc, #640]	@ (80031b4 <HAL_RCC_OscConfig+0x504>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a9f      	ldr	r2, [pc, #636]	@ (80031b4 <HAL_RCC_OscConfig+0x504>)
 8002f36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f3a:	6013      	str	r3, [r2, #0]
 8002f3c:	4b9d      	ldr	r3, [pc, #628]	@ (80031b4 <HAL_RCC_OscConfig+0x504>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a9c      	ldr	r2, [pc, #624]	@ (80031b4 <HAL_RCC_OscConfig+0x504>)
 8002f42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d013      	beq.n	8002f78 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f50:	f7fe f816 	bl	8000f80 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f58:	f7fe f812 	bl	8000f80 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b64      	cmp	r3, #100	@ 0x64
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e2ae      	b.n	80034c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f6a:	4b92      	ldr	r3, [pc, #584]	@ (80031b4 <HAL_RCC_OscConfig+0x504>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d0f0      	beq.n	8002f58 <HAL_RCC_OscConfig+0x2a8>
 8002f76:	e014      	b.n	8002fa2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f78:	f7fe f802 	bl	8000f80 <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f80:	f7fd fffe 	bl	8000f80 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b64      	cmp	r3, #100	@ 0x64
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e29a      	b.n	80034c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f92:	4b88      	ldr	r3, [pc, #544]	@ (80031b4 <HAL_RCC_OscConfig+0x504>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1f0      	bne.n	8002f80 <HAL_RCC_OscConfig+0x2d0>
 8002f9e:	e000      	b.n	8002fa2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d060      	beq.n	8003070 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	2b04      	cmp	r3, #4
 8002fb2:	d005      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x310>
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	2b0c      	cmp	r3, #12
 8002fb8:	d119      	bne.n	8002fee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d116      	bne.n	8002fee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fc0:	4b7c      	ldr	r3, [pc, #496]	@ (80031b4 <HAL_RCC_OscConfig+0x504>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d005      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x328>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d101      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e277      	b.n	80034c8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd8:	4b76      	ldr	r3, [pc, #472]	@ (80031b4 <HAL_RCC_OscConfig+0x504>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	061b      	lsls	r3, r3, #24
 8002fe6:	4973      	ldr	r1, [pc, #460]	@ (80031b4 <HAL_RCC_OscConfig+0x504>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fec:	e040      	b.n	8003070 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d023      	beq.n	800303e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ff6:	4b6f      	ldr	r3, [pc, #444]	@ (80031b4 <HAL_RCC_OscConfig+0x504>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a6e      	ldr	r2, [pc, #440]	@ (80031b4 <HAL_RCC_OscConfig+0x504>)
 8002ffc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003000:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003002:	f7fd ffbd 	bl	8000f80 <HAL_GetTick>
 8003006:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003008:	e008      	b.n	800301c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800300a:	f7fd ffb9 	bl	8000f80 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	2b02      	cmp	r3, #2
 8003016:	d901      	bls.n	800301c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e255      	b.n	80034c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800301c:	4b65      	ldr	r3, [pc, #404]	@ (80031b4 <HAL_RCC_OscConfig+0x504>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003024:	2b00      	cmp	r3, #0
 8003026:	d0f0      	beq.n	800300a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003028:	4b62      	ldr	r3, [pc, #392]	@ (80031b4 <HAL_RCC_OscConfig+0x504>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	061b      	lsls	r3, r3, #24
 8003036:	495f      	ldr	r1, [pc, #380]	@ (80031b4 <HAL_RCC_OscConfig+0x504>)
 8003038:	4313      	orrs	r3, r2
 800303a:	604b      	str	r3, [r1, #4]
 800303c:	e018      	b.n	8003070 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800303e:	4b5d      	ldr	r3, [pc, #372]	@ (80031b4 <HAL_RCC_OscConfig+0x504>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a5c      	ldr	r2, [pc, #368]	@ (80031b4 <HAL_RCC_OscConfig+0x504>)
 8003044:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003048:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304a:	f7fd ff99 	bl	8000f80 <HAL_GetTick>
 800304e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003050:	e008      	b.n	8003064 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003052:	f7fd ff95 	bl	8000f80 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d901      	bls.n	8003064 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e231      	b.n	80034c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003064:	4b53      	ldr	r3, [pc, #332]	@ (80031b4 <HAL_RCC_OscConfig+0x504>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1f0      	bne.n	8003052 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0308 	and.w	r3, r3, #8
 8003078:	2b00      	cmp	r3, #0
 800307a:	d03c      	beq.n	80030f6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	695b      	ldr	r3, [r3, #20]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d01c      	beq.n	80030be <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003084:	4b4b      	ldr	r3, [pc, #300]	@ (80031b4 <HAL_RCC_OscConfig+0x504>)
 8003086:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800308a:	4a4a      	ldr	r2, [pc, #296]	@ (80031b4 <HAL_RCC_OscConfig+0x504>)
 800308c:	f043 0301 	orr.w	r3, r3, #1
 8003090:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003094:	f7fd ff74 	bl	8000f80 <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800309c:	f7fd ff70 	bl	8000f80 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e20c      	b.n	80034c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030ae:	4b41      	ldr	r3, [pc, #260]	@ (80031b4 <HAL_RCC_OscConfig+0x504>)
 80030b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d0ef      	beq.n	800309c <HAL_RCC_OscConfig+0x3ec>
 80030bc:	e01b      	b.n	80030f6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030be:	4b3d      	ldr	r3, [pc, #244]	@ (80031b4 <HAL_RCC_OscConfig+0x504>)
 80030c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030c4:	4a3b      	ldr	r2, [pc, #236]	@ (80031b4 <HAL_RCC_OscConfig+0x504>)
 80030c6:	f023 0301 	bic.w	r3, r3, #1
 80030ca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ce:	f7fd ff57 	bl	8000f80 <HAL_GetTick>
 80030d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030d4:	e008      	b.n	80030e8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030d6:	f7fd ff53 	bl	8000f80 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e1ef      	b.n	80034c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030e8:	4b32      	ldr	r3, [pc, #200]	@ (80031b4 <HAL_RCC_OscConfig+0x504>)
 80030ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1ef      	bne.n	80030d6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0304 	and.w	r3, r3, #4
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f000 80a6 	beq.w	8003250 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003104:	2300      	movs	r3, #0
 8003106:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003108:	4b2a      	ldr	r3, [pc, #168]	@ (80031b4 <HAL_RCC_OscConfig+0x504>)
 800310a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800310c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d10d      	bne.n	8003130 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003114:	4b27      	ldr	r3, [pc, #156]	@ (80031b4 <HAL_RCC_OscConfig+0x504>)
 8003116:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003118:	4a26      	ldr	r2, [pc, #152]	@ (80031b4 <HAL_RCC_OscConfig+0x504>)
 800311a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800311e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003120:	4b24      	ldr	r3, [pc, #144]	@ (80031b4 <HAL_RCC_OscConfig+0x504>)
 8003122:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003124:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003128:	60bb      	str	r3, [r7, #8]
 800312a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800312c:	2301      	movs	r3, #1
 800312e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003130:	4b21      	ldr	r3, [pc, #132]	@ (80031b8 <HAL_RCC_OscConfig+0x508>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003138:	2b00      	cmp	r3, #0
 800313a:	d118      	bne.n	800316e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800313c:	4b1e      	ldr	r3, [pc, #120]	@ (80031b8 <HAL_RCC_OscConfig+0x508>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a1d      	ldr	r2, [pc, #116]	@ (80031b8 <HAL_RCC_OscConfig+0x508>)
 8003142:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003146:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003148:	f7fd ff1a 	bl	8000f80 <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800314e:	e008      	b.n	8003162 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003150:	f7fd ff16 	bl	8000f80 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b02      	cmp	r3, #2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e1b2      	b.n	80034c8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003162:	4b15      	ldr	r3, [pc, #84]	@ (80031b8 <HAL_RCC_OscConfig+0x508>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800316a:	2b00      	cmp	r3, #0
 800316c:	d0f0      	beq.n	8003150 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d108      	bne.n	8003188 <HAL_RCC_OscConfig+0x4d8>
 8003176:	4b0f      	ldr	r3, [pc, #60]	@ (80031b4 <HAL_RCC_OscConfig+0x504>)
 8003178:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800317c:	4a0d      	ldr	r2, [pc, #52]	@ (80031b4 <HAL_RCC_OscConfig+0x504>)
 800317e:	f043 0301 	orr.w	r3, r3, #1
 8003182:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003186:	e029      	b.n	80031dc <HAL_RCC_OscConfig+0x52c>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	2b05      	cmp	r3, #5
 800318e:	d115      	bne.n	80031bc <HAL_RCC_OscConfig+0x50c>
 8003190:	4b08      	ldr	r3, [pc, #32]	@ (80031b4 <HAL_RCC_OscConfig+0x504>)
 8003192:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003196:	4a07      	ldr	r2, [pc, #28]	@ (80031b4 <HAL_RCC_OscConfig+0x504>)
 8003198:	f043 0304 	orr.w	r3, r3, #4
 800319c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031a0:	4b04      	ldr	r3, [pc, #16]	@ (80031b4 <HAL_RCC_OscConfig+0x504>)
 80031a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031a6:	4a03      	ldr	r2, [pc, #12]	@ (80031b4 <HAL_RCC_OscConfig+0x504>)
 80031a8:	f043 0301 	orr.w	r3, r3, #1
 80031ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031b0:	e014      	b.n	80031dc <HAL_RCC_OscConfig+0x52c>
 80031b2:	bf00      	nop
 80031b4:	40021000 	.word	0x40021000
 80031b8:	40007000 	.word	0x40007000
 80031bc:	4b9a      	ldr	r3, [pc, #616]	@ (8003428 <HAL_RCC_OscConfig+0x778>)
 80031be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031c2:	4a99      	ldr	r2, [pc, #612]	@ (8003428 <HAL_RCC_OscConfig+0x778>)
 80031c4:	f023 0301 	bic.w	r3, r3, #1
 80031c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031cc:	4b96      	ldr	r3, [pc, #600]	@ (8003428 <HAL_RCC_OscConfig+0x778>)
 80031ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031d2:	4a95      	ldr	r2, [pc, #596]	@ (8003428 <HAL_RCC_OscConfig+0x778>)
 80031d4:	f023 0304 	bic.w	r3, r3, #4
 80031d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d016      	beq.n	8003212 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e4:	f7fd fecc 	bl	8000f80 <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031ea:	e00a      	b.n	8003202 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ec:	f7fd fec8 	bl	8000f80 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e162      	b.n	80034c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003202:	4b89      	ldr	r3, [pc, #548]	@ (8003428 <HAL_RCC_OscConfig+0x778>)
 8003204:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0ed      	beq.n	80031ec <HAL_RCC_OscConfig+0x53c>
 8003210:	e015      	b.n	800323e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003212:	f7fd feb5 	bl	8000f80 <HAL_GetTick>
 8003216:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003218:	e00a      	b.n	8003230 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800321a:	f7fd feb1 	bl	8000f80 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003228:	4293      	cmp	r3, r2
 800322a:	d901      	bls.n	8003230 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e14b      	b.n	80034c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003230:	4b7d      	ldr	r3, [pc, #500]	@ (8003428 <HAL_RCC_OscConfig+0x778>)
 8003232:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1ed      	bne.n	800321a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800323e:	7ffb      	ldrb	r3, [r7, #31]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d105      	bne.n	8003250 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003244:	4b78      	ldr	r3, [pc, #480]	@ (8003428 <HAL_RCC_OscConfig+0x778>)
 8003246:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003248:	4a77      	ldr	r2, [pc, #476]	@ (8003428 <HAL_RCC_OscConfig+0x778>)
 800324a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800324e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0320 	and.w	r3, r3, #32
 8003258:	2b00      	cmp	r3, #0
 800325a:	d03c      	beq.n	80032d6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003260:	2b00      	cmp	r3, #0
 8003262:	d01c      	beq.n	800329e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003264:	4b70      	ldr	r3, [pc, #448]	@ (8003428 <HAL_RCC_OscConfig+0x778>)
 8003266:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800326a:	4a6f      	ldr	r2, [pc, #444]	@ (8003428 <HAL_RCC_OscConfig+0x778>)
 800326c:	f043 0301 	orr.w	r3, r3, #1
 8003270:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003274:	f7fd fe84 	bl	8000f80 <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800327c:	f7fd fe80 	bl	8000f80 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e11c      	b.n	80034c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800328e:	4b66      	ldr	r3, [pc, #408]	@ (8003428 <HAL_RCC_OscConfig+0x778>)
 8003290:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d0ef      	beq.n	800327c <HAL_RCC_OscConfig+0x5cc>
 800329c:	e01b      	b.n	80032d6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800329e:	4b62      	ldr	r3, [pc, #392]	@ (8003428 <HAL_RCC_OscConfig+0x778>)
 80032a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80032a4:	4a60      	ldr	r2, [pc, #384]	@ (8003428 <HAL_RCC_OscConfig+0x778>)
 80032a6:	f023 0301 	bic.w	r3, r3, #1
 80032aa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ae:	f7fd fe67 	bl	8000f80 <HAL_GetTick>
 80032b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032b4:	e008      	b.n	80032c8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032b6:	f7fd fe63 	bl	8000f80 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e0ff      	b.n	80034c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032c8:	4b57      	ldr	r3, [pc, #348]	@ (8003428 <HAL_RCC_OscConfig+0x778>)
 80032ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1ef      	bne.n	80032b6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f000 80f3 	beq.w	80034c6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	f040 80c9 	bne.w	800347c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80032ea:	4b4f      	ldr	r3, [pc, #316]	@ (8003428 <HAL_RCC_OscConfig+0x778>)
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	f003 0203 	and.w	r2, r3, #3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d12c      	bne.n	8003358 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003308:	3b01      	subs	r3, #1
 800330a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800330c:	429a      	cmp	r2, r3
 800330e:	d123      	bne.n	8003358 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800331a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800331c:	429a      	cmp	r2, r3
 800331e:	d11b      	bne.n	8003358 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800332a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800332c:	429a      	cmp	r2, r3
 800332e:	d113      	bne.n	8003358 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800333a:	085b      	lsrs	r3, r3, #1
 800333c:	3b01      	subs	r3, #1
 800333e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003340:	429a      	cmp	r2, r3
 8003342:	d109      	bne.n	8003358 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334e:	085b      	lsrs	r3, r3, #1
 8003350:	3b01      	subs	r3, #1
 8003352:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003354:	429a      	cmp	r2, r3
 8003356:	d06b      	beq.n	8003430 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	2b0c      	cmp	r3, #12
 800335c:	d062      	beq.n	8003424 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800335e:	4b32      	ldr	r3, [pc, #200]	@ (8003428 <HAL_RCC_OscConfig+0x778>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e0ac      	b.n	80034c8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800336e:	4b2e      	ldr	r3, [pc, #184]	@ (8003428 <HAL_RCC_OscConfig+0x778>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a2d      	ldr	r2, [pc, #180]	@ (8003428 <HAL_RCC_OscConfig+0x778>)
 8003374:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003378:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800337a:	f7fd fe01 	bl	8000f80 <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003380:	e008      	b.n	8003394 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003382:	f7fd fdfd 	bl	8000f80 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e099      	b.n	80034c8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003394:	4b24      	ldr	r3, [pc, #144]	@ (8003428 <HAL_RCC_OscConfig+0x778>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1f0      	bne.n	8003382 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033a0:	4b21      	ldr	r3, [pc, #132]	@ (8003428 <HAL_RCC_OscConfig+0x778>)
 80033a2:	68da      	ldr	r2, [r3, #12]
 80033a4:	4b21      	ldr	r3, [pc, #132]	@ (800342c <HAL_RCC_OscConfig+0x77c>)
 80033a6:	4013      	ands	r3, r2
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80033b0:	3a01      	subs	r2, #1
 80033b2:	0112      	lsls	r2, r2, #4
 80033b4:	4311      	orrs	r1, r2
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80033ba:	0212      	lsls	r2, r2, #8
 80033bc:	4311      	orrs	r1, r2
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80033c2:	0852      	lsrs	r2, r2, #1
 80033c4:	3a01      	subs	r2, #1
 80033c6:	0552      	lsls	r2, r2, #21
 80033c8:	4311      	orrs	r1, r2
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80033ce:	0852      	lsrs	r2, r2, #1
 80033d0:	3a01      	subs	r2, #1
 80033d2:	0652      	lsls	r2, r2, #25
 80033d4:	4311      	orrs	r1, r2
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80033da:	06d2      	lsls	r2, r2, #27
 80033dc:	430a      	orrs	r2, r1
 80033de:	4912      	ldr	r1, [pc, #72]	@ (8003428 <HAL_RCC_OscConfig+0x778>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80033e4:	4b10      	ldr	r3, [pc, #64]	@ (8003428 <HAL_RCC_OscConfig+0x778>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a0f      	ldr	r2, [pc, #60]	@ (8003428 <HAL_RCC_OscConfig+0x778>)
 80033ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033ee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033f0:	4b0d      	ldr	r3, [pc, #52]	@ (8003428 <HAL_RCC_OscConfig+0x778>)
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	4a0c      	ldr	r2, [pc, #48]	@ (8003428 <HAL_RCC_OscConfig+0x778>)
 80033f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033fc:	f7fd fdc0 	bl	8000f80 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003404:	f7fd fdbc 	bl	8000f80 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e058      	b.n	80034c8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003416:	4b04      	ldr	r3, [pc, #16]	@ (8003428 <HAL_RCC_OscConfig+0x778>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0f0      	beq.n	8003404 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003422:	e050      	b.n	80034c6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e04f      	b.n	80034c8 <HAL_RCC_OscConfig+0x818>
 8003428:	40021000 	.word	0x40021000
 800342c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003430:	4b27      	ldr	r3, [pc, #156]	@ (80034d0 <HAL_RCC_OscConfig+0x820>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d144      	bne.n	80034c6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800343c:	4b24      	ldr	r3, [pc, #144]	@ (80034d0 <HAL_RCC_OscConfig+0x820>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a23      	ldr	r2, [pc, #140]	@ (80034d0 <HAL_RCC_OscConfig+0x820>)
 8003442:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003446:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003448:	4b21      	ldr	r3, [pc, #132]	@ (80034d0 <HAL_RCC_OscConfig+0x820>)
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	4a20      	ldr	r2, [pc, #128]	@ (80034d0 <HAL_RCC_OscConfig+0x820>)
 800344e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003452:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003454:	f7fd fd94 	bl	8000f80 <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800345c:	f7fd fd90 	bl	8000f80 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e02c      	b.n	80034c8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800346e:	4b18      	ldr	r3, [pc, #96]	@ (80034d0 <HAL_RCC_OscConfig+0x820>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d0f0      	beq.n	800345c <HAL_RCC_OscConfig+0x7ac>
 800347a:	e024      	b.n	80034c6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	2b0c      	cmp	r3, #12
 8003480:	d01f      	beq.n	80034c2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003482:	4b13      	ldr	r3, [pc, #76]	@ (80034d0 <HAL_RCC_OscConfig+0x820>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a12      	ldr	r2, [pc, #72]	@ (80034d0 <HAL_RCC_OscConfig+0x820>)
 8003488:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800348c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800348e:	f7fd fd77 	bl	8000f80 <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003494:	e008      	b.n	80034a8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003496:	f7fd fd73 	bl	8000f80 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e00f      	b.n	80034c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034a8:	4b09      	ldr	r3, [pc, #36]	@ (80034d0 <HAL_RCC_OscConfig+0x820>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1f0      	bne.n	8003496 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80034b4:	4b06      	ldr	r3, [pc, #24]	@ (80034d0 <HAL_RCC_OscConfig+0x820>)
 80034b6:	68da      	ldr	r2, [r3, #12]
 80034b8:	4905      	ldr	r1, [pc, #20]	@ (80034d0 <HAL_RCC_OscConfig+0x820>)
 80034ba:	4b06      	ldr	r3, [pc, #24]	@ (80034d4 <HAL_RCC_OscConfig+0x824>)
 80034bc:	4013      	ands	r3, r2
 80034be:	60cb      	str	r3, [r1, #12]
 80034c0:	e001      	b.n	80034c6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e000      	b.n	80034c8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3720      	adds	r7, #32
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	40021000 	.word	0x40021000
 80034d4:	feeefffc 	.word	0xfeeefffc

080034d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d101      	bne.n	80034ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e0e7      	b.n	80036bc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034ec:	4b75      	ldr	r3, [pc, #468]	@ (80036c4 <HAL_RCC_ClockConfig+0x1ec>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0307 	and.w	r3, r3, #7
 80034f4:	683a      	ldr	r2, [r7, #0]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d910      	bls.n	800351c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034fa:	4b72      	ldr	r3, [pc, #456]	@ (80036c4 <HAL_RCC_ClockConfig+0x1ec>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f023 0207 	bic.w	r2, r3, #7
 8003502:	4970      	ldr	r1, [pc, #448]	@ (80036c4 <HAL_RCC_ClockConfig+0x1ec>)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	4313      	orrs	r3, r2
 8003508:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800350a:	4b6e      	ldr	r3, [pc, #440]	@ (80036c4 <HAL_RCC_ClockConfig+0x1ec>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0307 	and.w	r3, r3, #7
 8003512:	683a      	ldr	r2, [r7, #0]
 8003514:	429a      	cmp	r2, r3
 8003516:	d001      	beq.n	800351c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e0cf      	b.n	80036bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d010      	beq.n	800354a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	4b66      	ldr	r3, [pc, #408]	@ (80036c8 <HAL_RCC_ClockConfig+0x1f0>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003534:	429a      	cmp	r2, r3
 8003536:	d908      	bls.n	800354a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003538:	4b63      	ldr	r3, [pc, #396]	@ (80036c8 <HAL_RCC_ClockConfig+0x1f0>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	4960      	ldr	r1, [pc, #384]	@ (80036c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003546:	4313      	orrs	r3, r2
 8003548:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	d04c      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	2b03      	cmp	r3, #3
 800355c:	d107      	bne.n	800356e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800355e:	4b5a      	ldr	r3, [pc, #360]	@ (80036c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d121      	bne.n	80035ae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e0a6      	b.n	80036bc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	2b02      	cmp	r3, #2
 8003574:	d107      	bne.n	8003586 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003576:	4b54      	ldr	r3, [pc, #336]	@ (80036c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d115      	bne.n	80035ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e09a      	b.n	80036bc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d107      	bne.n	800359e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800358e:	4b4e      	ldr	r3, [pc, #312]	@ (80036c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d109      	bne.n	80035ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e08e      	b.n	80036bc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800359e:	4b4a      	ldr	r3, [pc, #296]	@ (80036c8 <HAL_RCC_ClockConfig+0x1f0>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e086      	b.n	80036bc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035ae:	4b46      	ldr	r3, [pc, #280]	@ (80036c8 <HAL_RCC_ClockConfig+0x1f0>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f023 0203 	bic.w	r2, r3, #3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	4943      	ldr	r1, [pc, #268]	@ (80036c8 <HAL_RCC_ClockConfig+0x1f0>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035c0:	f7fd fcde 	bl	8000f80 <HAL_GetTick>
 80035c4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035c6:	e00a      	b.n	80035de <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035c8:	f7fd fcda 	bl	8000f80 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e06e      	b.n	80036bc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035de:	4b3a      	ldr	r3, [pc, #232]	@ (80036c8 <HAL_RCC_ClockConfig+0x1f0>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f003 020c 	and.w	r2, r3, #12
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d1eb      	bne.n	80035c8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d010      	beq.n	800361e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689a      	ldr	r2, [r3, #8]
 8003600:	4b31      	ldr	r3, [pc, #196]	@ (80036c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003608:	429a      	cmp	r2, r3
 800360a:	d208      	bcs.n	800361e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800360c:	4b2e      	ldr	r3, [pc, #184]	@ (80036c8 <HAL_RCC_ClockConfig+0x1f0>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	492b      	ldr	r1, [pc, #172]	@ (80036c8 <HAL_RCC_ClockConfig+0x1f0>)
 800361a:	4313      	orrs	r3, r2
 800361c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800361e:	4b29      	ldr	r3, [pc, #164]	@ (80036c4 <HAL_RCC_ClockConfig+0x1ec>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0307 	and.w	r3, r3, #7
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	429a      	cmp	r2, r3
 800362a:	d210      	bcs.n	800364e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800362c:	4b25      	ldr	r3, [pc, #148]	@ (80036c4 <HAL_RCC_ClockConfig+0x1ec>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f023 0207 	bic.w	r2, r3, #7
 8003634:	4923      	ldr	r1, [pc, #140]	@ (80036c4 <HAL_RCC_ClockConfig+0x1ec>)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	4313      	orrs	r3, r2
 800363a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800363c:	4b21      	ldr	r3, [pc, #132]	@ (80036c4 <HAL_RCC_ClockConfig+0x1ec>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0307 	and.w	r3, r3, #7
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	429a      	cmp	r2, r3
 8003648:	d001      	beq.n	800364e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e036      	b.n	80036bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0304 	and.w	r3, r3, #4
 8003656:	2b00      	cmp	r3, #0
 8003658:	d008      	beq.n	800366c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800365a:	4b1b      	ldr	r3, [pc, #108]	@ (80036c8 <HAL_RCC_ClockConfig+0x1f0>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	4918      	ldr	r1, [pc, #96]	@ (80036c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003668:	4313      	orrs	r3, r2
 800366a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0308 	and.w	r3, r3, #8
 8003674:	2b00      	cmp	r3, #0
 8003676:	d009      	beq.n	800368c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003678:	4b13      	ldr	r3, [pc, #76]	@ (80036c8 <HAL_RCC_ClockConfig+0x1f0>)
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	00db      	lsls	r3, r3, #3
 8003686:	4910      	ldr	r1, [pc, #64]	@ (80036c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003688:	4313      	orrs	r3, r2
 800368a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800368c:	f000 f824 	bl	80036d8 <HAL_RCC_GetSysClockFreq>
 8003690:	4602      	mov	r2, r0
 8003692:	4b0d      	ldr	r3, [pc, #52]	@ (80036c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	091b      	lsrs	r3, r3, #4
 8003698:	f003 030f 	and.w	r3, r3, #15
 800369c:	490b      	ldr	r1, [pc, #44]	@ (80036cc <HAL_RCC_ClockConfig+0x1f4>)
 800369e:	5ccb      	ldrb	r3, [r1, r3]
 80036a0:	f003 031f 	and.w	r3, r3, #31
 80036a4:	fa22 f303 	lsr.w	r3, r2, r3
 80036a8:	4a09      	ldr	r2, [pc, #36]	@ (80036d0 <HAL_RCC_ClockConfig+0x1f8>)
 80036aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80036ac:	4b09      	ldr	r3, [pc, #36]	@ (80036d4 <HAL_RCC_ClockConfig+0x1fc>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7fd fc15 	bl	8000ee0 <HAL_InitTick>
 80036b6:	4603      	mov	r3, r0
 80036b8:	72fb      	strb	r3, [r7, #11]

  return status;
 80036ba:	7afb      	ldrb	r3, [r7, #11]
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40022000 	.word	0x40022000
 80036c8:	40021000 	.word	0x40021000
 80036cc:	08006938 	.word	0x08006938
 80036d0:	20000000 	.word	0x20000000
 80036d4:	20000004 	.word	0x20000004

080036d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036d8:	b480      	push	{r7}
 80036da:	b089      	sub	sp, #36	@ 0x24
 80036dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80036de:	2300      	movs	r3, #0
 80036e0:	61fb      	str	r3, [r7, #28]
 80036e2:	2300      	movs	r3, #0
 80036e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036e6:	4b3e      	ldr	r3, [pc, #248]	@ (80037e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f003 030c 	and.w	r3, r3, #12
 80036ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036f0:	4b3b      	ldr	r3, [pc, #236]	@ (80037e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	f003 0303 	and.w	r3, r3, #3
 80036f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d005      	beq.n	800370c <HAL_RCC_GetSysClockFreq+0x34>
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	2b0c      	cmp	r3, #12
 8003704:	d121      	bne.n	800374a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d11e      	bne.n	800374a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800370c:	4b34      	ldr	r3, [pc, #208]	@ (80037e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0308 	and.w	r3, r3, #8
 8003714:	2b00      	cmp	r3, #0
 8003716:	d107      	bne.n	8003728 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003718:	4b31      	ldr	r3, [pc, #196]	@ (80037e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800371a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800371e:	0a1b      	lsrs	r3, r3, #8
 8003720:	f003 030f 	and.w	r3, r3, #15
 8003724:	61fb      	str	r3, [r7, #28]
 8003726:	e005      	b.n	8003734 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003728:	4b2d      	ldr	r3, [pc, #180]	@ (80037e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	091b      	lsrs	r3, r3, #4
 800372e:	f003 030f 	and.w	r3, r3, #15
 8003732:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003734:	4a2b      	ldr	r2, [pc, #172]	@ (80037e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800373c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d10d      	bne.n	8003760 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003748:	e00a      	b.n	8003760 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	2b04      	cmp	r3, #4
 800374e:	d102      	bne.n	8003756 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003750:	4b25      	ldr	r3, [pc, #148]	@ (80037e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003752:	61bb      	str	r3, [r7, #24]
 8003754:	e004      	b.n	8003760 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	2b08      	cmp	r3, #8
 800375a:	d101      	bne.n	8003760 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800375c:	4b23      	ldr	r3, [pc, #140]	@ (80037ec <HAL_RCC_GetSysClockFreq+0x114>)
 800375e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	2b0c      	cmp	r3, #12
 8003764:	d134      	bne.n	80037d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003766:	4b1e      	ldr	r3, [pc, #120]	@ (80037e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	f003 0303 	and.w	r3, r3, #3
 800376e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	2b02      	cmp	r3, #2
 8003774:	d003      	beq.n	800377e <HAL_RCC_GetSysClockFreq+0xa6>
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	2b03      	cmp	r3, #3
 800377a:	d003      	beq.n	8003784 <HAL_RCC_GetSysClockFreq+0xac>
 800377c:	e005      	b.n	800378a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800377e:	4b1a      	ldr	r3, [pc, #104]	@ (80037e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003780:	617b      	str	r3, [r7, #20]
      break;
 8003782:	e005      	b.n	8003790 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003784:	4b19      	ldr	r3, [pc, #100]	@ (80037ec <HAL_RCC_GetSysClockFreq+0x114>)
 8003786:	617b      	str	r3, [r7, #20]
      break;
 8003788:	e002      	b.n	8003790 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	617b      	str	r3, [r7, #20]
      break;
 800378e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003790:	4b13      	ldr	r3, [pc, #76]	@ (80037e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	091b      	lsrs	r3, r3, #4
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	3301      	adds	r3, #1
 800379c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800379e:	4b10      	ldr	r3, [pc, #64]	@ (80037e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	0a1b      	lsrs	r3, r3, #8
 80037a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	fb03 f202 	mul.w	r2, r3, r2
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037b6:	4b0a      	ldr	r3, [pc, #40]	@ (80037e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	0e5b      	lsrs	r3, r3, #25
 80037bc:	f003 0303 	and.w	r3, r3, #3
 80037c0:	3301      	adds	r3, #1
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80037d0:	69bb      	ldr	r3, [r7, #24]
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3724      	adds	r7, #36	@ 0x24
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	40021000 	.word	0x40021000
 80037e4:	08006950 	.word	0x08006950
 80037e8:	00f42400 	.word	0x00f42400
 80037ec:	007a1200 	.word	0x007a1200

080037f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037f4:	4b03      	ldr	r3, [pc, #12]	@ (8003804 <HAL_RCC_GetHCLKFreq+0x14>)
 80037f6:	681b      	ldr	r3, [r3, #0]
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	20000000 	.word	0x20000000

08003808 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800380c:	f7ff fff0 	bl	80037f0 <HAL_RCC_GetHCLKFreq>
 8003810:	4602      	mov	r2, r0
 8003812:	4b06      	ldr	r3, [pc, #24]	@ (800382c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	0a1b      	lsrs	r3, r3, #8
 8003818:	f003 0307 	and.w	r3, r3, #7
 800381c:	4904      	ldr	r1, [pc, #16]	@ (8003830 <HAL_RCC_GetPCLK1Freq+0x28>)
 800381e:	5ccb      	ldrb	r3, [r1, r3]
 8003820:	f003 031f 	and.w	r3, r3, #31
 8003824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003828:	4618      	mov	r0, r3
 800382a:	bd80      	pop	{r7, pc}
 800382c:	40021000 	.word	0x40021000
 8003830:	08006948 	.word	0x08006948

08003834 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003838:	f7ff ffda 	bl	80037f0 <HAL_RCC_GetHCLKFreq>
 800383c:	4602      	mov	r2, r0
 800383e:	4b06      	ldr	r3, [pc, #24]	@ (8003858 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	0adb      	lsrs	r3, r3, #11
 8003844:	f003 0307 	and.w	r3, r3, #7
 8003848:	4904      	ldr	r1, [pc, #16]	@ (800385c <HAL_RCC_GetPCLK2Freq+0x28>)
 800384a:	5ccb      	ldrb	r3, [r1, r3]
 800384c:	f003 031f 	and.w	r3, r3, #31
 8003850:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003854:	4618      	mov	r0, r3
 8003856:	bd80      	pop	{r7, pc}
 8003858:	40021000 	.word	0x40021000
 800385c:	08006948 	.word	0x08006948

08003860 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003868:	2300      	movs	r3, #0
 800386a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800386c:	4b2a      	ldr	r3, [pc, #168]	@ (8003918 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800386e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003870:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d003      	beq.n	8003880 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003878:	f7ff f9b6 	bl	8002be8 <HAL_PWREx_GetVoltageRange>
 800387c:	6178      	str	r0, [r7, #20]
 800387e:	e014      	b.n	80038aa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003880:	4b25      	ldr	r3, [pc, #148]	@ (8003918 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003884:	4a24      	ldr	r2, [pc, #144]	@ (8003918 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003886:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800388a:	6593      	str	r3, [r2, #88]	@ 0x58
 800388c:	4b22      	ldr	r3, [pc, #136]	@ (8003918 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800388e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003890:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003894:	60fb      	str	r3, [r7, #12]
 8003896:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003898:	f7ff f9a6 	bl	8002be8 <HAL_PWREx_GetVoltageRange>
 800389c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800389e:	4b1e      	ldr	r3, [pc, #120]	@ (8003918 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038a2:	4a1d      	ldr	r2, [pc, #116]	@ (8003918 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038a8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038b0:	d10b      	bne.n	80038ca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2b80      	cmp	r3, #128	@ 0x80
 80038b6:	d919      	bls.n	80038ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2ba0      	cmp	r3, #160	@ 0xa0
 80038bc:	d902      	bls.n	80038c4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038be:	2302      	movs	r3, #2
 80038c0:	613b      	str	r3, [r7, #16]
 80038c2:	e013      	b.n	80038ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038c4:	2301      	movs	r3, #1
 80038c6:	613b      	str	r3, [r7, #16]
 80038c8:	e010      	b.n	80038ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2b80      	cmp	r3, #128	@ 0x80
 80038ce:	d902      	bls.n	80038d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80038d0:	2303      	movs	r3, #3
 80038d2:	613b      	str	r3, [r7, #16]
 80038d4:	e00a      	b.n	80038ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b80      	cmp	r3, #128	@ 0x80
 80038da:	d102      	bne.n	80038e2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038dc:	2302      	movs	r3, #2
 80038de:	613b      	str	r3, [r7, #16]
 80038e0:	e004      	b.n	80038ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b70      	cmp	r3, #112	@ 0x70
 80038e6:	d101      	bne.n	80038ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038e8:	2301      	movs	r3, #1
 80038ea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80038ec:	4b0b      	ldr	r3, [pc, #44]	@ (800391c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f023 0207 	bic.w	r2, r3, #7
 80038f4:	4909      	ldr	r1, [pc, #36]	@ (800391c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80038fc:	4b07      	ldr	r3, [pc, #28]	@ (800391c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0307 	and.w	r3, r3, #7
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	429a      	cmp	r2, r3
 8003908:	d001      	beq.n	800390e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e000      	b.n	8003910 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3718      	adds	r7, #24
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	40021000 	.word	0x40021000
 800391c:	40022000 	.word	0x40022000

08003920 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003928:	2300      	movs	r3, #0
 800392a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800392c:	2300      	movs	r3, #0
 800392e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003938:	2b00      	cmp	r3, #0
 800393a:	d031      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003940:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003944:	d01a      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003946:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800394a:	d814      	bhi.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800394c:	2b00      	cmp	r3, #0
 800394e:	d009      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003950:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003954:	d10f      	bne.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003956:	4b5d      	ldr	r3, [pc, #372]	@ (8003acc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	4a5c      	ldr	r2, [pc, #368]	@ (8003acc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800395c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003960:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003962:	e00c      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	3304      	adds	r3, #4
 8003968:	2100      	movs	r1, #0
 800396a:	4618      	mov	r0, r3
 800396c:	f000 fa44 	bl	8003df8 <RCCEx_PLLSAI1_Config>
 8003970:	4603      	mov	r3, r0
 8003972:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003974:	e003      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	74fb      	strb	r3, [r7, #19]
      break;
 800397a:	e000      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800397c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800397e:	7cfb      	ldrb	r3, [r7, #19]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d10b      	bne.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003984:	4b51      	ldr	r3, [pc, #324]	@ (8003acc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800398a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003992:	494e      	ldr	r1, [pc, #312]	@ (8003acc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003994:	4313      	orrs	r3, r2
 8003996:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800399a:	e001      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800399c:	7cfb      	ldrb	r3, [r7, #19]
 800399e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f000 809e 	beq.w	8003aea <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039ae:	2300      	movs	r3, #0
 80039b0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80039b2:	4b46      	ldr	r3, [pc, #280]	@ (8003acc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80039be:	2301      	movs	r3, #1
 80039c0:	e000      	b.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80039c2:	2300      	movs	r3, #0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00d      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039c8:	4b40      	ldr	r3, [pc, #256]	@ (8003acc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039cc:	4a3f      	ldr	r2, [pc, #252]	@ (8003acc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80039d4:	4b3d      	ldr	r3, [pc, #244]	@ (8003acc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039dc:	60bb      	str	r3, [r7, #8]
 80039de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039e0:	2301      	movs	r3, #1
 80039e2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039e4:	4b3a      	ldr	r3, [pc, #232]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a39      	ldr	r2, [pc, #228]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80039ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039f0:	f7fd fac6 	bl	8000f80 <HAL_GetTick>
 80039f4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80039f6:	e009      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039f8:	f7fd fac2 	bl	8000f80 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d902      	bls.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	74fb      	strb	r3, [r7, #19]
        break;
 8003a0a:	e005      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a0c:	4b30      	ldr	r3, [pc, #192]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d0ef      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003a18:	7cfb      	ldrb	r3, [r7, #19]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d15a      	bne.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a1e:	4b2b      	ldr	r3, [pc, #172]	@ (8003acc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a28:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d01e      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d019      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a3a:	4b24      	ldr	r3, [pc, #144]	@ (8003acc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a44:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a46:	4b21      	ldr	r3, [pc, #132]	@ (8003acc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a4c:	4a1f      	ldr	r2, [pc, #124]	@ (8003acc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a52:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a56:	4b1d      	ldr	r3, [pc, #116]	@ (8003acc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a5c:	4a1b      	ldr	r2, [pc, #108]	@ (8003acc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a62:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a66:	4a19      	ldr	r2, [pc, #100]	@ (8003acc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d016      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a78:	f7fd fa82 	bl	8000f80 <HAL_GetTick>
 8003a7c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a7e:	e00b      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a80:	f7fd fa7e 	bl	8000f80 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d902      	bls.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	74fb      	strb	r3, [r7, #19]
            break;
 8003a96:	e006      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a98:	4b0c      	ldr	r3, [pc, #48]	@ (8003acc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d0ec      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003aa6:	7cfb      	ldrb	r3, [r7, #19]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10b      	bne.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003aac:	4b07      	ldr	r3, [pc, #28]	@ (8003acc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ab2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003aba:	4904      	ldr	r1, [pc, #16]	@ (8003acc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003ac2:	e009      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ac4:	7cfb      	ldrb	r3, [r7, #19]
 8003ac6:	74bb      	strb	r3, [r7, #18]
 8003ac8:	e006      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003aca:	bf00      	nop
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ad4:	7cfb      	ldrb	r3, [r7, #19]
 8003ad6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ad8:	7c7b      	ldrb	r3, [r7, #17]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d105      	bne.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ade:	4b9e      	ldr	r3, [pc, #632]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ae2:	4a9d      	ldr	r2, [pc, #628]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ae4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ae8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00a      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003af6:	4b98      	ldr	r3, [pc, #608]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003afc:	f023 0203 	bic.w	r2, r3, #3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a1b      	ldr	r3, [r3, #32]
 8003b04:	4994      	ldr	r1, [pc, #592]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0302 	and.w	r3, r3, #2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00a      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b18:	4b8f      	ldr	r3, [pc, #572]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b1e:	f023 020c 	bic.w	r2, r3, #12
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b26:	498c      	ldr	r1, [pc, #560]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0304 	and.w	r3, r3, #4
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00a      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b3a:	4b87      	ldr	r3, [pc, #540]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b40:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b48:	4983      	ldr	r1, [pc, #524]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0308 	and.w	r3, r3, #8
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00a      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b5c:	4b7e      	ldr	r3, [pc, #504]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b62:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b6a:	497b      	ldr	r1, [pc, #492]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0320 	and.w	r3, r3, #32
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00a      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b7e:	4b76      	ldr	r3, [pc, #472]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b84:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b8c:	4972      	ldr	r1, [pc, #456]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00a      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ba0:	4b6d      	ldr	r3, [pc, #436]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ba6:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bae:	496a      	ldr	r1, [pc, #424]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00a      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003bc2:	4b65      	ldr	r3, [pc, #404]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bc8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bd0:	4961      	ldr	r1, [pc, #388]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00a      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003be4:	4b5c      	ldr	r3, [pc, #368]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bea:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bf2:	4959      	ldr	r1, [pc, #356]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00a      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c06:	4b54      	ldr	r3, [pc, #336]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c0c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c14:	4950      	ldr	r1, [pc, #320]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00a      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c28:	4b4b      	ldr	r3, [pc, #300]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c2e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c36:	4948      	ldr	r1, [pc, #288]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00a      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c4a:	4b43      	ldr	r3, [pc, #268]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003c50:	f023 0203 	bic.w	r2, r3, #3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c58:	493f      	ldr	r1, [pc, #252]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d028      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c6c:	4b3a      	ldr	r3, [pc, #232]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c72:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c7a:	4937      	ldr	r1, [pc, #220]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c8a:	d106      	bne.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c8c:	4b32      	ldr	r3, [pc, #200]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	4a31      	ldr	r2, [pc, #196]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c96:	60d3      	str	r3, [r2, #12]
 8003c98:	e011      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c9e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ca2:	d10c      	bne.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	3304      	adds	r3, #4
 8003ca8:	2101      	movs	r1, #1
 8003caa:	4618      	mov	r0, r3
 8003cac:	f000 f8a4 	bl	8003df8 <RCCEx_PLLSAI1_Config>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003cb4:	7cfb      	ldrb	r3, [r7, #19]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8003cba:	7cfb      	ldrb	r3, [r7, #19]
 8003cbc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d028      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003cca:	4b23      	ldr	r3, [pc, #140]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cd0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cd8:	491f      	ldr	r1, [pc, #124]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ce4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ce8:	d106      	bne.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cea:	4b1b      	ldr	r3, [pc, #108]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	4a1a      	ldr	r2, [pc, #104]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003cf0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cf4:	60d3      	str	r3, [r2, #12]
 8003cf6:	e011      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cfc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d00:	d10c      	bne.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	3304      	adds	r3, #4
 8003d06:	2101      	movs	r1, #1
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f000 f875 	bl	8003df8 <RCCEx_PLLSAI1_Config>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d12:	7cfb      	ldrb	r3, [r7, #19]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d001      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8003d18:	7cfb      	ldrb	r3, [r7, #19]
 8003d1a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d02b      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d28:	4b0b      	ldr	r3, [pc, #44]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d2e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d36:	4908      	ldr	r1, [pc, #32]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d46:	d109      	bne.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d48:	4b03      	ldr	r3, [pc, #12]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	4a02      	ldr	r2, [pc, #8]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d52:	60d3      	str	r3, [r2, #12]
 8003d54:	e014      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8003d56:	bf00      	nop
 8003d58:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d60:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d64:	d10c      	bne.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	3304      	adds	r3, #4
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f000 f843 	bl	8003df8 <RCCEx_PLLSAI1_Config>
 8003d72:	4603      	mov	r3, r0
 8003d74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d76:	7cfb      	ldrb	r3, [r7, #19]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8003d7c:	7cfb      	ldrb	r3, [r7, #19]
 8003d7e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d01c      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d8c:	4b19      	ldr	r3, [pc, #100]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d92:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d9a:	4916      	ldr	r1, [pc, #88]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003da6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003daa:	d10c      	bne.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	3304      	adds	r3, #4
 8003db0:	2102      	movs	r1, #2
 8003db2:	4618      	mov	r0, r3
 8003db4:	f000 f820 	bl	8003df8 <RCCEx_PLLSAI1_Config>
 8003db8:	4603      	mov	r3, r0
 8003dba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003dbc:	7cfb      	ldrb	r3, [r7, #19]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8003dc2:	7cfb      	ldrb	r3, [r7, #19]
 8003dc4:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00a      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003dd2:	4b08      	ldr	r3, [pc, #32]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dd8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003de0:	4904      	ldr	r1, [pc, #16]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003de8:	7cbb      	ldrb	r3, [r7, #18]
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3718      	adds	r7, #24
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	40021000 	.word	0x40021000

08003df8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e02:	2300      	movs	r3, #0
 8003e04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e06:	4b74      	ldr	r3, [pc, #464]	@ (8003fd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	f003 0303 	and.w	r3, r3, #3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d018      	beq.n	8003e44 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003e12:	4b71      	ldr	r3, [pc, #452]	@ (8003fd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	f003 0203 	and.w	r2, r3, #3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d10d      	bne.n	8003e3e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
       ||
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d009      	beq.n	8003e3e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003e2a:	4b6b      	ldr	r3, [pc, #428]	@ (8003fd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	091b      	lsrs	r3, r3, #4
 8003e30:	f003 0307 	and.w	r3, r3, #7
 8003e34:	1c5a      	adds	r2, r3, #1
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
       ||
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d047      	beq.n	8003ece <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	73fb      	strb	r3, [r7, #15]
 8003e42:	e044      	b.n	8003ece <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2b03      	cmp	r3, #3
 8003e4a:	d018      	beq.n	8003e7e <RCCEx_PLLSAI1_Config+0x86>
 8003e4c:	2b03      	cmp	r3, #3
 8003e4e:	d825      	bhi.n	8003e9c <RCCEx_PLLSAI1_Config+0xa4>
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d002      	beq.n	8003e5a <RCCEx_PLLSAI1_Config+0x62>
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d009      	beq.n	8003e6c <RCCEx_PLLSAI1_Config+0x74>
 8003e58:	e020      	b.n	8003e9c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e5a:	4b5f      	ldr	r3, [pc, #380]	@ (8003fd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d11d      	bne.n	8003ea2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e6a:	e01a      	b.n	8003ea2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e6c:	4b5a      	ldr	r3, [pc, #360]	@ (8003fd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d116      	bne.n	8003ea6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e7c:	e013      	b.n	8003ea6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e7e:	4b56      	ldr	r3, [pc, #344]	@ (8003fd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d10f      	bne.n	8003eaa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e8a:	4b53      	ldr	r3, [pc, #332]	@ (8003fd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d109      	bne.n	8003eaa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e9a:	e006      	b.n	8003eaa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	73fb      	strb	r3, [r7, #15]
      break;
 8003ea0:	e004      	b.n	8003eac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ea2:	bf00      	nop
 8003ea4:	e002      	b.n	8003eac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ea6:	bf00      	nop
 8003ea8:	e000      	b.n	8003eac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003eaa:	bf00      	nop
    }

    if(status == HAL_OK)
 8003eac:	7bfb      	ldrb	r3, [r7, #15]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10d      	bne.n	8003ece <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003eb2:	4b49      	ldr	r3, [pc, #292]	@ (8003fd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6819      	ldr	r1, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	011b      	lsls	r3, r3, #4
 8003ec6:	430b      	orrs	r3, r1
 8003ec8:	4943      	ldr	r1, [pc, #268]	@ (8003fd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ece:	7bfb      	ldrb	r3, [r7, #15]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d17c      	bne.n	8003fce <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003ed4:	4b40      	ldr	r3, [pc, #256]	@ (8003fd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a3f      	ldr	r2, [pc, #252]	@ (8003fd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003eda:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003ede:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ee0:	f7fd f84e 	bl	8000f80 <HAL_GetTick>
 8003ee4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ee6:	e009      	b.n	8003efc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ee8:	f7fd f84a 	bl	8000f80 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d902      	bls.n	8003efc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	73fb      	strb	r3, [r7, #15]
        break;
 8003efa:	e005      	b.n	8003f08 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003efc:	4b36      	ldr	r3, [pc, #216]	@ (8003fd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d1ef      	bne.n	8003ee8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f08:	7bfb      	ldrb	r3, [r7, #15]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d15f      	bne.n	8003fce <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d110      	bne.n	8003f36 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f14:	4b30      	ldr	r3, [pc, #192]	@ (8003fd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003f1c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	6892      	ldr	r2, [r2, #8]
 8003f24:	0211      	lsls	r1, r2, #8
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	68d2      	ldr	r2, [r2, #12]
 8003f2a:	06d2      	lsls	r2, r2, #27
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	492a      	ldr	r1, [pc, #168]	@ (8003fd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	610b      	str	r3, [r1, #16]
 8003f34:	e027      	b.n	8003f86 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d112      	bne.n	8003f62 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f3c:	4b26      	ldr	r3, [pc, #152]	@ (8003fd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003f44:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	6892      	ldr	r2, [r2, #8]
 8003f4c:	0211      	lsls	r1, r2, #8
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	6912      	ldr	r2, [r2, #16]
 8003f52:	0852      	lsrs	r2, r2, #1
 8003f54:	3a01      	subs	r2, #1
 8003f56:	0552      	lsls	r2, r2, #21
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	491f      	ldr	r1, [pc, #124]	@ (8003fd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	610b      	str	r3, [r1, #16]
 8003f60:	e011      	b.n	8003f86 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f62:	4b1d      	ldr	r3, [pc, #116]	@ (8003fd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003f6a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	6892      	ldr	r2, [r2, #8]
 8003f72:	0211      	lsls	r1, r2, #8
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	6952      	ldr	r2, [r2, #20]
 8003f78:	0852      	lsrs	r2, r2, #1
 8003f7a:	3a01      	subs	r2, #1
 8003f7c:	0652      	lsls	r2, r2, #25
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	4915      	ldr	r1, [pc, #84]	@ (8003fd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003f86:	4b14      	ldr	r3, [pc, #80]	@ (8003fd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a13      	ldr	r2, [pc, #76]	@ (8003fd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f8c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003f90:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f92:	f7fc fff5 	bl	8000f80 <HAL_GetTick>
 8003f96:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f98:	e009      	b.n	8003fae <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f9a:	f7fc fff1 	bl	8000f80 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d902      	bls.n	8003fae <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	73fb      	strb	r3, [r7, #15]
          break;
 8003fac:	e005      	b.n	8003fba <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003fae:	4b0a      	ldr	r3, [pc, #40]	@ (8003fd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d0ef      	beq.n	8003f9a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003fba:	7bfb      	ldrb	r3, [r7, #15]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d106      	bne.n	8003fce <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003fc0:	4b05      	ldr	r3, [pc, #20]	@ (8003fd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fc2:	691a      	ldr	r2, [r3, #16]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	4903      	ldr	r1, [pc, #12]	@ (8003fd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	40021000 	.word	0x40021000

08003fdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d101      	bne.n	8003fee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e049      	b.n	8004082 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d106      	bne.n	8004008 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f7fc fde6 	bl	8000bd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2202      	movs	r2, #2
 800400c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	3304      	adds	r3, #4
 8004018:	4619      	mov	r1, r3
 800401a:	4610      	mov	r0, r2
 800401c:	f000 fda4 	bl	8004b68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3708      	adds	r7, #8
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b082      	sub	sp, #8
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d101      	bne.n	800409c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e049      	b.n	8004130 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d106      	bne.n	80040b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 f841 	bl	8004138 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2202      	movs	r2, #2
 80040ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	3304      	adds	r3, #4
 80040c6:	4619      	mov	r1, r3
 80040c8:	4610      	mov	r0, r2
 80040ca:	f000 fd4d 	bl	8004b68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2201      	movs	r2, #1
 800411a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2201      	movs	r2, #1
 800412a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3708      	adds	r7, #8
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004156:	2300      	movs	r3, #0
 8004158:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d109      	bne.n	8004174 <HAL_TIM_PWM_Start_IT+0x28>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004166:	b2db      	uxtb	r3, r3
 8004168:	2b01      	cmp	r3, #1
 800416a:	bf14      	ite	ne
 800416c:	2301      	movne	r3, #1
 800416e:	2300      	moveq	r3, #0
 8004170:	b2db      	uxtb	r3, r3
 8004172:	e03c      	b.n	80041ee <HAL_TIM_PWM_Start_IT+0xa2>
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	2b04      	cmp	r3, #4
 8004178:	d109      	bne.n	800418e <HAL_TIM_PWM_Start_IT+0x42>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b01      	cmp	r3, #1
 8004184:	bf14      	ite	ne
 8004186:	2301      	movne	r3, #1
 8004188:	2300      	moveq	r3, #0
 800418a:	b2db      	uxtb	r3, r3
 800418c:	e02f      	b.n	80041ee <HAL_TIM_PWM_Start_IT+0xa2>
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	2b08      	cmp	r3, #8
 8004192:	d109      	bne.n	80041a8 <HAL_TIM_PWM_Start_IT+0x5c>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800419a:	b2db      	uxtb	r3, r3
 800419c:	2b01      	cmp	r3, #1
 800419e:	bf14      	ite	ne
 80041a0:	2301      	movne	r3, #1
 80041a2:	2300      	moveq	r3, #0
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	e022      	b.n	80041ee <HAL_TIM_PWM_Start_IT+0xa2>
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	2b0c      	cmp	r3, #12
 80041ac:	d109      	bne.n	80041c2 <HAL_TIM_PWM_Start_IT+0x76>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	bf14      	ite	ne
 80041ba:	2301      	movne	r3, #1
 80041bc:	2300      	moveq	r3, #0
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	e015      	b.n	80041ee <HAL_TIM_PWM_Start_IT+0xa2>
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	2b10      	cmp	r3, #16
 80041c6:	d109      	bne.n	80041dc <HAL_TIM_PWM_Start_IT+0x90>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	bf14      	ite	ne
 80041d4:	2301      	movne	r3, #1
 80041d6:	2300      	moveq	r3, #0
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	e008      	b.n	80041ee <HAL_TIM_PWM_Start_IT+0xa2>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	bf14      	ite	ne
 80041e8:	2301      	movne	r3, #1
 80041ea:	2300      	moveq	r3, #0
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e0ce      	b.n	8004394 <HAL_TIM_PWM_Start_IT+0x248>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d104      	bne.n	8004206 <HAL_TIM_PWM_Start_IT+0xba>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2202      	movs	r2, #2
 8004200:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004204:	e023      	b.n	800424e <HAL_TIM_PWM_Start_IT+0x102>
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	2b04      	cmp	r3, #4
 800420a:	d104      	bne.n	8004216 <HAL_TIM_PWM_Start_IT+0xca>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2202      	movs	r2, #2
 8004210:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004214:	e01b      	b.n	800424e <HAL_TIM_PWM_Start_IT+0x102>
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	2b08      	cmp	r3, #8
 800421a:	d104      	bne.n	8004226 <HAL_TIM_PWM_Start_IT+0xda>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2202      	movs	r2, #2
 8004220:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004224:	e013      	b.n	800424e <HAL_TIM_PWM_Start_IT+0x102>
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	2b0c      	cmp	r3, #12
 800422a:	d104      	bne.n	8004236 <HAL_TIM_PWM_Start_IT+0xea>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2202      	movs	r2, #2
 8004230:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004234:	e00b      	b.n	800424e <HAL_TIM_PWM_Start_IT+0x102>
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	2b10      	cmp	r3, #16
 800423a:	d104      	bne.n	8004246 <HAL_TIM_PWM_Start_IT+0xfa>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2202      	movs	r2, #2
 8004240:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004244:	e003      	b.n	800424e <HAL_TIM_PWM_Start_IT+0x102>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2202      	movs	r2, #2
 800424a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	2b0c      	cmp	r3, #12
 8004252:	d841      	bhi.n	80042d8 <HAL_TIM_PWM_Start_IT+0x18c>
 8004254:	a201      	add	r2, pc, #4	@ (adr r2, 800425c <HAL_TIM_PWM_Start_IT+0x110>)
 8004256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800425a:	bf00      	nop
 800425c:	08004291 	.word	0x08004291
 8004260:	080042d9 	.word	0x080042d9
 8004264:	080042d9 	.word	0x080042d9
 8004268:	080042d9 	.word	0x080042d9
 800426c:	080042a3 	.word	0x080042a3
 8004270:	080042d9 	.word	0x080042d9
 8004274:	080042d9 	.word	0x080042d9
 8004278:	080042d9 	.word	0x080042d9
 800427c:	080042b5 	.word	0x080042b5
 8004280:	080042d9 	.word	0x080042d9
 8004284:	080042d9 	.word	0x080042d9
 8004288:	080042d9 	.word	0x080042d9
 800428c:	080042c7 	.word	0x080042c7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68da      	ldr	r2, [r3, #12]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f042 0202 	orr.w	r2, r2, #2
 800429e:	60da      	str	r2, [r3, #12]
      break;
 80042a0:	e01d      	b.n	80042de <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68da      	ldr	r2, [r3, #12]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f042 0204 	orr.w	r2, r2, #4
 80042b0:	60da      	str	r2, [r3, #12]
      break;
 80042b2:	e014      	b.n	80042de <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68da      	ldr	r2, [r3, #12]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f042 0208 	orr.w	r2, r2, #8
 80042c2:	60da      	str	r2, [r3, #12]
      break;
 80042c4:	e00b      	b.n	80042de <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68da      	ldr	r2, [r3, #12]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f042 0210 	orr.w	r2, r2, #16
 80042d4:	60da      	str	r2, [r3, #12]
      break;
 80042d6:	e002      	b.n	80042de <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	73fb      	strb	r3, [r7, #15]
      break;
 80042dc:	bf00      	nop
  }

  if (status == HAL_OK)
 80042de:	7bfb      	ldrb	r3, [r7, #15]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d156      	bne.n	8004392 <HAL_TIM_PWM_Start_IT+0x246>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2201      	movs	r2, #1
 80042ea:	6839      	ldr	r1, [r7, #0]
 80042ec:	4618      	mov	r0, r3
 80042ee:	f000 ffc1 	bl	8005274 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a29      	ldr	r2, [pc, #164]	@ (800439c <HAL_TIM_PWM_Start_IT+0x250>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d009      	beq.n	8004310 <HAL_TIM_PWM_Start_IT+0x1c4>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a27      	ldr	r2, [pc, #156]	@ (80043a0 <HAL_TIM_PWM_Start_IT+0x254>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d004      	beq.n	8004310 <HAL_TIM_PWM_Start_IT+0x1c4>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a26      	ldr	r2, [pc, #152]	@ (80043a4 <HAL_TIM_PWM_Start_IT+0x258>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d101      	bne.n	8004314 <HAL_TIM_PWM_Start_IT+0x1c8>
 8004310:	2301      	movs	r3, #1
 8004312:	e000      	b.n	8004316 <HAL_TIM_PWM_Start_IT+0x1ca>
 8004314:	2300      	movs	r3, #0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d007      	beq.n	800432a <HAL_TIM_PWM_Start_IT+0x1de>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004328:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a1b      	ldr	r2, [pc, #108]	@ (800439c <HAL_TIM_PWM_Start_IT+0x250>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d00e      	beq.n	8004352 <HAL_TIM_PWM_Start_IT+0x206>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800433c:	d009      	beq.n	8004352 <HAL_TIM_PWM_Start_IT+0x206>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a19      	ldr	r2, [pc, #100]	@ (80043a8 <HAL_TIM_PWM_Start_IT+0x25c>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d004      	beq.n	8004352 <HAL_TIM_PWM_Start_IT+0x206>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a14      	ldr	r2, [pc, #80]	@ (80043a0 <HAL_TIM_PWM_Start_IT+0x254>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d115      	bne.n	800437e <HAL_TIM_PWM_Start_IT+0x232>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	689a      	ldr	r2, [r3, #8]
 8004358:	4b14      	ldr	r3, [pc, #80]	@ (80043ac <HAL_TIM_PWM_Start_IT+0x260>)
 800435a:	4013      	ands	r3, r2
 800435c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	2b06      	cmp	r3, #6
 8004362:	d015      	beq.n	8004390 <HAL_TIM_PWM_Start_IT+0x244>
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800436a:	d011      	beq.n	8004390 <HAL_TIM_PWM_Start_IT+0x244>
      {
        __HAL_TIM_ENABLE(htim);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f042 0201 	orr.w	r2, r2, #1
 800437a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800437c:	e008      	b.n	8004390 <HAL_TIM_PWM_Start_IT+0x244>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f042 0201 	orr.w	r2, r2, #1
 800438c:	601a      	str	r2, [r3, #0]
 800438e:	e000      	b.n	8004392 <HAL_TIM_PWM_Start_IT+0x246>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004390:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004392:	7bfb      	ldrb	r3, [r7, #15]
}
 8004394:	4618      	mov	r0, r3
 8004396:	3710      	adds	r7, #16
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	40012c00 	.word	0x40012c00
 80043a0:	40014000 	.word	0x40014000
 80043a4:	40014400 	.word	0x40014400
 80043a8:	40000400 	.word	0x40000400
 80043ac:	00010007 	.word	0x00010007

080043b0 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043ba:	2300      	movs	r3, #0
 80043bc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	2b0c      	cmp	r3, #12
 80043c2:	d841      	bhi.n	8004448 <HAL_TIM_PWM_Stop_IT+0x98>
 80043c4:	a201      	add	r2, pc, #4	@ (adr r2, 80043cc <HAL_TIM_PWM_Stop_IT+0x1c>)
 80043c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ca:	bf00      	nop
 80043cc:	08004401 	.word	0x08004401
 80043d0:	08004449 	.word	0x08004449
 80043d4:	08004449 	.word	0x08004449
 80043d8:	08004449 	.word	0x08004449
 80043dc:	08004413 	.word	0x08004413
 80043e0:	08004449 	.word	0x08004449
 80043e4:	08004449 	.word	0x08004449
 80043e8:	08004449 	.word	0x08004449
 80043ec:	08004425 	.word	0x08004425
 80043f0:	08004449 	.word	0x08004449
 80043f4:	08004449 	.word	0x08004449
 80043f8:	08004449 	.word	0x08004449
 80043fc:	08004437 	.word	0x08004437
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68da      	ldr	r2, [r3, #12]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f022 0202 	bic.w	r2, r2, #2
 800440e:	60da      	str	r2, [r3, #12]
      break;
 8004410:	e01d      	b.n	800444e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68da      	ldr	r2, [r3, #12]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 0204 	bic.w	r2, r2, #4
 8004420:	60da      	str	r2, [r3, #12]
      break;
 8004422:	e014      	b.n	800444e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68da      	ldr	r2, [r3, #12]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f022 0208 	bic.w	r2, r2, #8
 8004432:	60da      	str	r2, [r3, #12]
      break;
 8004434:	e00b      	b.n	800444e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68da      	ldr	r2, [r3, #12]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f022 0210 	bic.w	r2, r2, #16
 8004444:	60da      	str	r2, [r3, #12]
      break;
 8004446:	e002      	b.n	800444e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	73fb      	strb	r3, [r7, #15]
      break;
 800444c:	bf00      	nop
  }

  if (status == HAL_OK)
 800444e:	7bfb      	ldrb	r3, [r7, #15]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d176      	bne.n	8004542 <HAL_TIM_PWM_Stop_IT+0x192>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2200      	movs	r2, #0
 800445a:	6839      	ldr	r1, [r7, #0]
 800445c:	4618      	mov	r0, r3
 800445e:	f000 ff09 	bl	8005274 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a39      	ldr	r2, [pc, #228]	@ (800454c <HAL_TIM_PWM_Stop_IT+0x19c>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d009      	beq.n	8004480 <HAL_TIM_PWM_Stop_IT+0xd0>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a37      	ldr	r2, [pc, #220]	@ (8004550 <HAL_TIM_PWM_Stop_IT+0x1a0>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d004      	beq.n	8004480 <HAL_TIM_PWM_Stop_IT+0xd0>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a36      	ldr	r2, [pc, #216]	@ (8004554 <HAL_TIM_PWM_Stop_IT+0x1a4>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d101      	bne.n	8004484 <HAL_TIM_PWM_Stop_IT+0xd4>
 8004480:	2301      	movs	r3, #1
 8004482:	e000      	b.n	8004486 <HAL_TIM_PWM_Stop_IT+0xd6>
 8004484:	2300      	movs	r3, #0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d017      	beq.n	80044ba <HAL_TIM_PWM_Stop_IT+0x10a>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	6a1a      	ldr	r2, [r3, #32]
 8004490:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004494:	4013      	ands	r3, r2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d10f      	bne.n	80044ba <HAL_TIM_PWM_Stop_IT+0x10a>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	6a1a      	ldr	r2, [r3, #32]
 80044a0:	f240 4344 	movw	r3, #1092	@ 0x444
 80044a4:	4013      	ands	r3, r2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d107      	bne.n	80044ba <HAL_TIM_PWM_Stop_IT+0x10a>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80044b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	6a1a      	ldr	r2, [r3, #32]
 80044c0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80044c4:	4013      	ands	r3, r2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10f      	bne.n	80044ea <HAL_TIM_PWM_Stop_IT+0x13a>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	6a1a      	ldr	r2, [r3, #32]
 80044d0:	f240 4344 	movw	r3, #1092	@ 0x444
 80044d4:	4013      	ands	r3, r2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d107      	bne.n	80044ea <HAL_TIM_PWM_Stop_IT+0x13a>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f022 0201 	bic.w	r2, r2, #1
 80044e8:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d104      	bne.n	80044fa <HAL_TIM_PWM_Stop_IT+0x14a>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044f8:	e023      	b.n	8004542 <HAL_TIM_PWM_Stop_IT+0x192>
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	2b04      	cmp	r3, #4
 80044fe:	d104      	bne.n	800450a <HAL_TIM_PWM_Stop_IT+0x15a>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004508:	e01b      	b.n	8004542 <HAL_TIM_PWM_Stop_IT+0x192>
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	2b08      	cmp	r3, #8
 800450e:	d104      	bne.n	800451a <HAL_TIM_PWM_Stop_IT+0x16a>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004518:	e013      	b.n	8004542 <HAL_TIM_PWM_Stop_IT+0x192>
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	2b0c      	cmp	r3, #12
 800451e:	d104      	bne.n	800452a <HAL_TIM_PWM_Stop_IT+0x17a>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004528:	e00b      	b.n	8004542 <HAL_TIM_PWM_Stop_IT+0x192>
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	2b10      	cmp	r3, #16
 800452e:	d104      	bne.n	800453a <HAL_TIM_PWM_Stop_IT+0x18a>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004538:	e003      	b.n	8004542 <HAL_TIM_PWM_Stop_IT+0x192>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2201      	movs	r2, #1
 800453e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8004542:	7bfb      	ldrb	r3, [r7, #15]
}
 8004544:	4618      	mov	r0, r3
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	40012c00 	.word	0x40012c00
 8004550:	40014000 	.word	0x40014000
 8004554:	40014400 	.word	0x40014400

08004558 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d020      	beq.n	80045bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d01b      	beq.n	80045bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f06f 0202 	mvn.w	r2, #2
 800458c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2201      	movs	r2, #1
 8004592:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	f003 0303 	and.w	r3, r3, #3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d003      	beq.n	80045aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 facb 	bl	8004b3e <HAL_TIM_IC_CaptureCallback>
 80045a8:	e005      	b.n	80045b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 fabd 	bl	8004b2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f7fc f837 	bl	8000624 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	f003 0304 	and.w	r3, r3, #4
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d020      	beq.n	8004608 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f003 0304 	and.w	r3, r3, #4
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d01b      	beq.n	8004608 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f06f 0204 	mvn.w	r2, #4
 80045d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2202      	movs	r2, #2
 80045de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	699b      	ldr	r3, [r3, #24]
 80045e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d003      	beq.n	80045f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 faa5 	bl	8004b3e <HAL_TIM_IC_CaptureCallback>
 80045f4:	e005      	b.n	8004602 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 fa97 	bl	8004b2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f7fc f811 	bl	8000624 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	f003 0308 	and.w	r3, r3, #8
 800460e:	2b00      	cmp	r3, #0
 8004610:	d020      	beq.n	8004654 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f003 0308 	and.w	r3, r3, #8
 8004618:	2b00      	cmp	r3, #0
 800461a:	d01b      	beq.n	8004654 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f06f 0208 	mvn.w	r2, #8
 8004624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2204      	movs	r2, #4
 800462a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	69db      	ldr	r3, [r3, #28]
 8004632:	f003 0303 	and.w	r3, r3, #3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d003      	beq.n	8004642 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 fa7f 	bl	8004b3e <HAL_TIM_IC_CaptureCallback>
 8004640:	e005      	b.n	800464e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 fa71 	bl	8004b2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f7fb ffeb 	bl	8000624 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	f003 0310 	and.w	r3, r3, #16
 800465a:	2b00      	cmp	r3, #0
 800465c:	d020      	beq.n	80046a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f003 0310 	and.w	r3, r3, #16
 8004664:	2b00      	cmp	r3, #0
 8004666:	d01b      	beq.n	80046a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f06f 0210 	mvn.w	r2, #16
 8004670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2208      	movs	r2, #8
 8004676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	69db      	ldr	r3, [r3, #28]
 800467e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004682:	2b00      	cmp	r3, #0
 8004684:	d003      	beq.n	800468e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 fa59 	bl	8004b3e <HAL_TIM_IC_CaptureCallback>
 800468c:	e005      	b.n	800469a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 fa4b 	bl	8004b2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f7fb ffc5 	bl	8000624 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00c      	beq.n	80046c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f003 0301 	and.w	r3, r3, #1
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d007      	beq.n	80046c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f06f 0201 	mvn.w	r2, #1
 80046bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 fa29 	bl	8004b16 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00c      	beq.n	80046e8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d007      	beq.n	80046e8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80046e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 fedc 	bl	80054a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00c      	beq.n	800470c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d007      	beq.n	800470c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 fed4 	bl	80054b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00c      	beq.n	8004730 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800471c:	2b00      	cmp	r3, #0
 800471e:	d007      	beq.n	8004730 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 fa11 	bl	8004b52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	f003 0320 	and.w	r3, r3, #32
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00c      	beq.n	8004754 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f003 0320 	and.w	r3, r3, #32
 8004740:	2b00      	cmp	r3, #0
 8004742:	d007      	beq.n	8004754 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f06f 0220 	mvn.w	r2, #32
 800474c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 fe9c 	bl	800548c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004754:	bf00      	nop
 8004756:	3710      	adds	r7, #16
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b086      	sub	sp, #24
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004768:	2300      	movs	r3, #0
 800476a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004772:	2b01      	cmp	r3, #1
 8004774:	d101      	bne.n	800477a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004776:	2302      	movs	r3, #2
 8004778:	e0ff      	b.n	800497a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2201      	movs	r2, #1
 800477e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2b14      	cmp	r3, #20
 8004786:	f200 80f0 	bhi.w	800496a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800478a:	a201      	add	r2, pc, #4	@ (adr r2, 8004790 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800478c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004790:	080047e5 	.word	0x080047e5
 8004794:	0800496b 	.word	0x0800496b
 8004798:	0800496b 	.word	0x0800496b
 800479c:	0800496b 	.word	0x0800496b
 80047a0:	08004825 	.word	0x08004825
 80047a4:	0800496b 	.word	0x0800496b
 80047a8:	0800496b 	.word	0x0800496b
 80047ac:	0800496b 	.word	0x0800496b
 80047b0:	08004867 	.word	0x08004867
 80047b4:	0800496b 	.word	0x0800496b
 80047b8:	0800496b 	.word	0x0800496b
 80047bc:	0800496b 	.word	0x0800496b
 80047c0:	080048a7 	.word	0x080048a7
 80047c4:	0800496b 	.word	0x0800496b
 80047c8:	0800496b 	.word	0x0800496b
 80047cc:	0800496b 	.word	0x0800496b
 80047d0:	080048e9 	.word	0x080048e9
 80047d4:	0800496b 	.word	0x0800496b
 80047d8:	0800496b 	.word	0x0800496b
 80047dc:	0800496b 	.word	0x0800496b
 80047e0:	08004929 	.word	0x08004929
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68b9      	ldr	r1, [r7, #8]
 80047ea:	4618      	mov	r0, r3
 80047ec:	f000 fa2a 	bl	8004c44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	699a      	ldr	r2, [r3, #24]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f042 0208 	orr.w	r2, r2, #8
 80047fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	699a      	ldr	r2, [r3, #24]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 0204 	bic.w	r2, r2, #4
 800480e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	6999      	ldr	r1, [r3, #24]
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	691a      	ldr	r2, [r3, #16]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	430a      	orrs	r2, r1
 8004820:	619a      	str	r2, [r3, #24]
      break;
 8004822:	e0a5      	b.n	8004970 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68b9      	ldr	r1, [r7, #8]
 800482a:	4618      	mov	r0, r3
 800482c:	f000 fa86 	bl	8004d3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	699a      	ldr	r2, [r3, #24]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800483e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	699a      	ldr	r2, [r3, #24]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800484e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	6999      	ldr	r1, [r3, #24]
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	021a      	lsls	r2, r3, #8
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	430a      	orrs	r2, r1
 8004862:	619a      	str	r2, [r3, #24]
      break;
 8004864:	e084      	b.n	8004970 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68b9      	ldr	r1, [r7, #8]
 800486c:	4618      	mov	r0, r3
 800486e:	f000 fadf 	bl	8004e30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	69da      	ldr	r2, [r3, #28]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f042 0208 	orr.w	r2, r2, #8
 8004880:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	69da      	ldr	r2, [r3, #28]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f022 0204 	bic.w	r2, r2, #4
 8004890:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	69d9      	ldr	r1, [r3, #28]
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	691a      	ldr	r2, [r3, #16]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	430a      	orrs	r2, r1
 80048a2:	61da      	str	r2, [r3, #28]
      break;
 80048a4:	e064      	b.n	8004970 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68b9      	ldr	r1, [r7, #8]
 80048ac:	4618      	mov	r0, r3
 80048ae:	f000 fb37 	bl	8004f20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	69da      	ldr	r2, [r3, #28]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	69da      	ldr	r2, [r3, #28]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	69d9      	ldr	r1, [r3, #28]
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	021a      	lsls	r2, r3, #8
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	430a      	orrs	r2, r1
 80048e4:	61da      	str	r2, [r3, #28]
      break;
 80048e6:	e043      	b.n	8004970 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68b9      	ldr	r1, [r7, #8]
 80048ee:	4618      	mov	r0, r3
 80048f0:	f000 fb74 	bl	8004fdc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f042 0208 	orr.w	r2, r2, #8
 8004902:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f022 0204 	bic.w	r2, r2, #4
 8004912:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	691a      	ldr	r2, [r3, #16]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	430a      	orrs	r2, r1
 8004924:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004926:	e023      	b.n	8004970 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68b9      	ldr	r1, [r7, #8]
 800492e:	4618      	mov	r0, r3
 8004930:	f000 fbac 	bl	800508c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004942:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004952:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	021a      	lsls	r2, r3, #8
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	430a      	orrs	r2, r1
 8004966:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004968:	e002      	b.n	8004970 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	75fb      	strb	r3, [r7, #23]
      break;
 800496e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004978:	7dfb      	ldrb	r3, [r7, #23]
}
 800497a:	4618      	mov	r0, r3
 800497c:	3718      	adds	r7, #24
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop

08004984 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800498e:	2300      	movs	r3, #0
 8004990:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004998:	2b01      	cmp	r3, #1
 800499a:	d101      	bne.n	80049a0 <HAL_TIM_ConfigClockSource+0x1c>
 800499c:	2302      	movs	r3, #2
 800499e:	e0b6      	b.n	8004b0e <HAL_TIM_ConfigClockSource+0x18a>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2202      	movs	r2, #2
 80049ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80049c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80049ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68ba      	ldr	r2, [r7, #8]
 80049d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049dc:	d03e      	beq.n	8004a5c <HAL_TIM_ConfigClockSource+0xd8>
 80049de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049e2:	f200 8087 	bhi.w	8004af4 <HAL_TIM_ConfigClockSource+0x170>
 80049e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049ea:	f000 8086 	beq.w	8004afa <HAL_TIM_ConfigClockSource+0x176>
 80049ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049f2:	d87f      	bhi.n	8004af4 <HAL_TIM_ConfigClockSource+0x170>
 80049f4:	2b70      	cmp	r3, #112	@ 0x70
 80049f6:	d01a      	beq.n	8004a2e <HAL_TIM_ConfigClockSource+0xaa>
 80049f8:	2b70      	cmp	r3, #112	@ 0x70
 80049fa:	d87b      	bhi.n	8004af4 <HAL_TIM_ConfigClockSource+0x170>
 80049fc:	2b60      	cmp	r3, #96	@ 0x60
 80049fe:	d050      	beq.n	8004aa2 <HAL_TIM_ConfigClockSource+0x11e>
 8004a00:	2b60      	cmp	r3, #96	@ 0x60
 8004a02:	d877      	bhi.n	8004af4 <HAL_TIM_ConfigClockSource+0x170>
 8004a04:	2b50      	cmp	r3, #80	@ 0x50
 8004a06:	d03c      	beq.n	8004a82 <HAL_TIM_ConfigClockSource+0xfe>
 8004a08:	2b50      	cmp	r3, #80	@ 0x50
 8004a0a:	d873      	bhi.n	8004af4 <HAL_TIM_ConfigClockSource+0x170>
 8004a0c:	2b40      	cmp	r3, #64	@ 0x40
 8004a0e:	d058      	beq.n	8004ac2 <HAL_TIM_ConfigClockSource+0x13e>
 8004a10:	2b40      	cmp	r3, #64	@ 0x40
 8004a12:	d86f      	bhi.n	8004af4 <HAL_TIM_ConfigClockSource+0x170>
 8004a14:	2b30      	cmp	r3, #48	@ 0x30
 8004a16:	d064      	beq.n	8004ae2 <HAL_TIM_ConfigClockSource+0x15e>
 8004a18:	2b30      	cmp	r3, #48	@ 0x30
 8004a1a:	d86b      	bhi.n	8004af4 <HAL_TIM_ConfigClockSource+0x170>
 8004a1c:	2b20      	cmp	r3, #32
 8004a1e:	d060      	beq.n	8004ae2 <HAL_TIM_ConfigClockSource+0x15e>
 8004a20:	2b20      	cmp	r3, #32
 8004a22:	d867      	bhi.n	8004af4 <HAL_TIM_ConfigClockSource+0x170>
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d05c      	beq.n	8004ae2 <HAL_TIM_ConfigClockSource+0x15e>
 8004a28:	2b10      	cmp	r3, #16
 8004a2a:	d05a      	beq.n	8004ae2 <HAL_TIM_ConfigClockSource+0x15e>
 8004a2c:	e062      	b.n	8004af4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a3e:	f000 fbf9 	bl	8005234 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004a50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68ba      	ldr	r2, [r7, #8]
 8004a58:	609a      	str	r2, [r3, #8]
      break;
 8004a5a:	e04f      	b.n	8004afc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a6c:	f000 fbe2 	bl	8005234 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	689a      	ldr	r2, [r3, #8]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a7e:	609a      	str	r2, [r3, #8]
      break;
 8004a80:	e03c      	b.n	8004afc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a8e:	461a      	mov	r2, r3
 8004a90:	f000 fb56 	bl	8005140 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2150      	movs	r1, #80	@ 0x50
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f000 fbaf 	bl	80051fe <TIM_ITRx_SetConfig>
      break;
 8004aa0:	e02c      	b.n	8004afc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004aae:	461a      	mov	r2, r3
 8004ab0:	f000 fb75 	bl	800519e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2160      	movs	r1, #96	@ 0x60
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 fb9f 	bl	80051fe <TIM_ITRx_SetConfig>
      break;
 8004ac0:	e01c      	b.n	8004afc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ace:	461a      	mov	r2, r3
 8004ad0:	f000 fb36 	bl	8005140 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2140      	movs	r1, #64	@ 0x40
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 fb8f 	bl	80051fe <TIM_ITRx_SetConfig>
      break;
 8004ae0:	e00c      	b.n	8004afc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4619      	mov	r1, r3
 8004aec:	4610      	mov	r0, r2
 8004aee:	f000 fb86 	bl	80051fe <TIM_ITRx_SetConfig>
      break;
 8004af2:	e003      	b.n	8004afc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	73fb      	strb	r3, [r7, #15]
      break;
 8004af8:	e000      	b.n	8004afc <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004afa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3710      	adds	r7, #16
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b083      	sub	sp, #12
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004b1e:	bf00      	nop
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b083      	sub	sp, #12
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b32:	bf00      	nop
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr

08004b3e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b3e:	b480      	push	{r7}
 8004b40:	b083      	sub	sp, #12
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b46:	bf00      	nop
 8004b48:	370c      	adds	r7, #12
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr

08004b52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b52:	b480      	push	{r7}
 8004b54:	b083      	sub	sp, #12
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b5a:	bf00      	nop
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
	...

08004b68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a2e      	ldr	r2, [pc, #184]	@ (8004c34 <TIM_Base_SetConfig+0xcc>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d007      	beq.n	8004b90 <TIM_Base_SetConfig+0x28>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b86:	d003      	beq.n	8004b90 <TIM_Base_SetConfig+0x28>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a2b      	ldr	r2, [pc, #172]	@ (8004c38 <TIM_Base_SetConfig+0xd0>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d108      	bne.n	8004ba2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a23      	ldr	r2, [pc, #140]	@ (8004c34 <TIM_Base_SetConfig+0xcc>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d00f      	beq.n	8004bca <TIM_Base_SetConfig+0x62>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bb0:	d00b      	beq.n	8004bca <TIM_Base_SetConfig+0x62>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a20      	ldr	r2, [pc, #128]	@ (8004c38 <TIM_Base_SetConfig+0xd0>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d007      	beq.n	8004bca <TIM_Base_SetConfig+0x62>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a1f      	ldr	r2, [pc, #124]	@ (8004c3c <TIM_Base_SetConfig+0xd4>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d003      	beq.n	8004bca <TIM_Base_SetConfig+0x62>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a1e      	ldr	r2, [pc, #120]	@ (8004c40 <TIM_Base_SetConfig+0xd8>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d108      	bne.n	8004bdc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	689a      	ldr	r2, [r3, #8]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a0c      	ldr	r2, [pc, #48]	@ (8004c34 <TIM_Base_SetConfig+0xcc>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d007      	beq.n	8004c18 <TIM_Base_SetConfig+0xb0>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a0c      	ldr	r2, [pc, #48]	@ (8004c3c <TIM_Base_SetConfig+0xd4>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d003      	beq.n	8004c18 <TIM_Base_SetConfig+0xb0>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a0b      	ldr	r2, [pc, #44]	@ (8004c40 <TIM_Base_SetConfig+0xd8>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d103      	bne.n	8004c20 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	691a      	ldr	r2, [r3, #16]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	615a      	str	r2, [r3, #20]
}
 8004c26:	bf00      	nop
 8004c28:	3714      	adds	r7, #20
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	40012c00 	.word	0x40012c00
 8004c38:	40000400 	.word	0x40000400
 8004c3c:	40014000 	.word	0x40014000
 8004c40:	40014400 	.word	0x40014400

08004c44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b087      	sub	sp, #28
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a1b      	ldr	r3, [r3, #32]
 8004c52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a1b      	ldr	r3, [r3, #32]
 8004c58:	f023 0201 	bic.w	r2, r3, #1
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f023 0303 	bic.w	r3, r3, #3
 8004c7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	f023 0302 	bic.w	r3, r3, #2
 8004c90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	697a      	ldr	r2, [r7, #20]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a24      	ldr	r2, [pc, #144]	@ (8004d30 <TIM_OC1_SetConfig+0xec>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d007      	beq.n	8004cb4 <TIM_OC1_SetConfig+0x70>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a23      	ldr	r2, [pc, #140]	@ (8004d34 <TIM_OC1_SetConfig+0xf0>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d003      	beq.n	8004cb4 <TIM_OC1_SetConfig+0x70>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a22      	ldr	r2, [pc, #136]	@ (8004d38 <TIM_OC1_SetConfig+0xf4>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d10c      	bne.n	8004cce <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	f023 0308 	bic.w	r3, r3, #8
 8004cba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	f023 0304 	bic.w	r3, r3, #4
 8004ccc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a17      	ldr	r2, [pc, #92]	@ (8004d30 <TIM_OC1_SetConfig+0xec>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d007      	beq.n	8004ce6 <TIM_OC1_SetConfig+0xa2>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a16      	ldr	r2, [pc, #88]	@ (8004d34 <TIM_OC1_SetConfig+0xf0>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d003      	beq.n	8004ce6 <TIM_OC1_SetConfig+0xa2>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a15      	ldr	r2, [pc, #84]	@ (8004d38 <TIM_OC1_SetConfig+0xf4>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d111      	bne.n	8004d0a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004cec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004cf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	693a      	ldr	r2, [r7, #16]
 8004d0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	685a      	ldr	r2, [r3, #4]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	697a      	ldr	r2, [r7, #20]
 8004d22:	621a      	str	r2, [r3, #32]
}
 8004d24:	bf00      	nop
 8004d26:	371c      	adds	r7, #28
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr
 8004d30:	40012c00 	.word	0x40012c00
 8004d34:	40014000 	.word	0x40014000
 8004d38:	40014400 	.word	0x40014400

08004d3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b087      	sub	sp, #28
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a1b      	ldr	r3, [r3, #32]
 8004d50:	f023 0210 	bic.w	r2, r3, #16
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	021b      	lsls	r3, r3, #8
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	f023 0320 	bic.w	r3, r3, #32
 8004d8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	011b      	lsls	r3, r3, #4
 8004d92:	697a      	ldr	r2, [r7, #20]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a22      	ldr	r2, [pc, #136]	@ (8004e24 <TIM_OC2_SetConfig+0xe8>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d10d      	bne.n	8004dbc <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004da6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	011b      	lsls	r3, r3, #4
 8004dae:	697a      	ldr	r2, [r7, #20]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004dba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a19      	ldr	r2, [pc, #100]	@ (8004e24 <TIM_OC2_SetConfig+0xe8>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d007      	beq.n	8004dd4 <TIM_OC2_SetConfig+0x98>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a18      	ldr	r2, [pc, #96]	@ (8004e28 <TIM_OC2_SetConfig+0xec>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d003      	beq.n	8004dd4 <TIM_OC2_SetConfig+0x98>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a17      	ldr	r2, [pc, #92]	@ (8004e2c <TIM_OC2_SetConfig+0xf0>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d113      	bne.n	8004dfc <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004dda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004de2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	693a      	ldr	r2, [r7, #16]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	693a      	ldr	r2, [r7, #16]
 8004e00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	685a      	ldr	r2, [r3, #4]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	621a      	str	r2, [r3, #32]
}
 8004e16:	bf00      	nop
 8004e18:	371c      	adds	r7, #28
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	40012c00 	.word	0x40012c00
 8004e28:	40014000 	.word	0x40014000
 8004e2c:	40014400 	.word	0x40014400

08004e30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b087      	sub	sp, #28
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a1b      	ldr	r3, [r3, #32]
 8004e44:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	69db      	ldr	r3, [r3, #28]
 8004e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f023 0303 	bic.w	r3, r3, #3
 8004e6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	021b      	lsls	r3, r3, #8
 8004e84:	697a      	ldr	r2, [r7, #20]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a21      	ldr	r2, [pc, #132]	@ (8004f14 <TIM_OC3_SetConfig+0xe4>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d10d      	bne.n	8004eae <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	021b      	lsls	r3, r3, #8
 8004ea0:	697a      	ldr	r2, [r7, #20]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004eac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a18      	ldr	r2, [pc, #96]	@ (8004f14 <TIM_OC3_SetConfig+0xe4>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d007      	beq.n	8004ec6 <TIM_OC3_SetConfig+0x96>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a17      	ldr	r2, [pc, #92]	@ (8004f18 <TIM_OC3_SetConfig+0xe8>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d003      	beq.n	8004ec6 <TIM_OC3_SetConfig+0x96>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a16      	ldr	r2, [pc, #88]	@ (8004f1c <TIM_OC3_SetConfig+0xec>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d113      	bne.n	8004eee <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ecc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ed4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	011b      	lsls	r3, r3, #4
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	011b      	lsls	r3, r3, #4
 8004ee8:	693a      	ldr	r2, [r7, #16]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	693a      	ldr	r2, [r7, #16]
 8004ef2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	685a      	ldr	r2, [r3, #4]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	697a      	ldr	r2, [r7, #20]
 8004f06:	621a      	str	r2, [r3, #32]
}
 8004f08:	bf00      	nop
 8004f0a:	371c      	adds	r7, #28
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr
 8004f14:	40012c00 	.word	0x40012c00
 8004f18:	40014000 	.word	0x40014000
 8004f1c:	40014400 	.word	0x40014400

08004f20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b087      	sub	sp, #28
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a1b      	ldr	r3, [r3, #32]
 8004f2e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a1b      	ldr	r3, [r3, #32]
 8004f34:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	69db      	ldr	r3, [r3, #28]
 8004f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	021b      	lsls	r3, r3, #8
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	031b      	lsls	r3, r3, #12
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a14      	ldr	r2, [pc, #80]	@ (8004fd0 <TIM_OC4_SetConfig+0xb0>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d007      	beq.n	8004f94 <TIM_OC4_SetConfig+0x74>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a13      	ldr	r2, [pc, #76]	@ (8004fd4 <TIM_OC4_SetConfig+0xb4>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d003      	beq.n	8004f94 <TIM_OC4_SetConfig+0x74>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a12      	ldr	r2, [pc, #72]	@ (8004fd8 <TIM_OC4_SetConfig+0xb8>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d109      	bne.n	8004fa8 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	695b      	ldr	r3, [r3, #20]
 8004fa0:	019b      	lsls	r3, r3, #6
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	685a      	ldr	r2, [r3, #4]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	693a      	ldr	r2, [r7, #16]
 8004fc0:	621a      	str	r2, [r3, #32]
}
 8004fc2:	bf00      	nop
 8004fc4:	371c      	adds	r7, #28
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop
 8004fd0:	40012c00 	.word	0x40012c00
 8004fd4:	40014000 	.word	0x40014000
 8004fd8:	40014400 	.word	0x40014400

08004fdc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b087      	sub	sp, #28
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a1b      	ldr	r3, [r3, #32]
 8004ff0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800500a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800500e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	4313      	orrs	r3, r2
 8005018:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005020:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	041b      	lsls	r3, r3, #16
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	4313      	orrs	r3, r2
 800502c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a13      	ldr	r2, [pc, #76]	@ (8005080 <TIM_OC5_SetConfig+0xa4>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d007      	beq.n	8005046 <TIM_OC5_SetConfig+0x6a>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a12      	ldr	r2, [pc, #72]	@ (8005084 <TIM_OC5_SetConfig+0xa8>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d003      	beq.n	8005046 <TIM_OC5_SetConfig+0x6a>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a11      	ldr	r2, [pc, #68]	@ (8005088 <TIM_OC5_SetConfig+0xac>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d109      	bne.n	800505a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800504c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	021b      	lsls	r3, r3, #8
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	4313      	orrs	r3, r2
 8005058:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	697a      	ldr	r2, [r7, #20]
 800505e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	685a      	ldr	r2, [r3, #4]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	693a      	ldr	r2, [r7, #16]
 8005072:	621a      	str	r2, [r3, #32]
}
 8005074:	bf00      	nop
 8005076:	371c      	adds	r7, #28
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr
 8005080:	40012c00 	.word	0x40012c00
 8005084:	40014000 	.word	0x40014000
 8005088:	40014400 	.word	0x40014400

0800508c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800508c:	b480      	push	{r7}
 800508e:	b087      	sub	sp, #28
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a1b      	ldr	r3, [r3, #32]
 800509a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a1b      	ldr	r3, [r3, #32]
 80050a0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	021b      	lsls	r3, r3, #8
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80050d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	051b      	lsls	r3, r3, #20
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	4313      	orrs	r3, r2
 80050de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a14      	ldr	r2, [pc, #80]	@ (8005134 <TIM_OC6_SetConfig+0xa8>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d007      	beq.n	80050f8 <TIM_OC6_SetConfig+0x6c>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a13      	ldr	r2, [pc, #76]	@ (8005138 <TIM_OC6_SetConfig+0xac>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d003      	beq.n	80050f8 <TIM_OC6_SetConfig+0x6c>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a12      	ldr	r2, [pc, #72]	@ (800513c <TIM_OC6_SetConfig+0xb0>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d109      	bne.n	800510c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	695b      	ldr	r3, [r3, #20]
 8005104:	029b      	lsls	r3, r3, #10
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	4313      	orrs	r3, r2
 800510a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	685a      	ldr	r2, [r3, #4]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	693a      	ldr	r2, [r7, #16]
 8005124:	621a      	str	r2, [r3, #32]
}
 8005126:	bf00      	nop
 8005128:	371c      	adds	r7, #28
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	40012c00 	.word	0x40012c00
 8005138:	40014000 	.word	0x40014000
 800513c:	40014400 	.word	0x40014400

08005140 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005140:	b480      	push	{r7}
 8005142:	b087      	sub	sp, #28
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6a1b      	ldr	r3, [r3, #32]
 8005150:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6a1b      	ldr	r3, [r3, #32]
 8005156:	f023 0201 	bic.w	r2, r3, #1
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800516a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	011b      	lsls	r3, r3, #4
 8005170:	693a      	ldr	r2, [r7, #16]
 8005172:	4313      	orrs	r3, r2
 8005174:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	f023 030a 	bic.w	r3, r3, #10
 800517c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	4313      	orrs	r3, r2
 8005184:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	621a      	str	r2, [r3, #32]
}
 8005192:	bf00      	nop
 8005194:	371c      	adds	r7, #28
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800519e:	b480      	push	{r7}
 80051a0:	b087      	sub	sp, #28
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	60f8      	str	r0, [r7, #12]
 80051a6:	60b9      	str	r1, [r7, #8]
 80051a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6a1b      	ldr	r3, [r3, #32]
 80051ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6a1b      	ldr	r3, [r3, #32]
 80051b4:	f023 0210 	bic.w	r2, r3, #16
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80051c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	031b      	lsls	r3, r3, #12
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80051da:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	011b      	lsls	r3, r3, #4
 80051e0:	697a      	ldr	r2, [r7, #20]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	621a      	str	r2, [r3, #32]
}
 80051f2:	bf00      	nop
 80051f4:	371c      	adds	r7, #28
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr

080051fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051fe:	b480      	push	{r7}
 8005200:	b085      	sub	sp, #20
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
 8005206:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005214:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005216:	683a      	ldr	r2, [r7, #0]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	4313      	orrs	r3, r2
 800521c:	f043 0307 	orr.w	r3, r3, #7
 8005220:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	609a      	str	r2, [r3, #8]
}
 8005228:	bf00      	nop
 800522a:	3714      	adds	r7, #20
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005234:	b480      	push	{r7}
 8005236:	b087      	sub	sp, #28
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	607a      	str	r2, [r7, #4]
 8005240:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800524e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	021a      	lsls	r2, r3, #8
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	431a      	orrs	r2, r3
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	4313      	orrs	r3, r2
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	4313      	orrs	r3, r2
 8005260:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	609a      	str	r2, [r3, #8]
}
 8005268:	bf00      	nop
 800526a:	371c      	adds	r7, #28
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005274:	b480      	push	{r7}
 8005276:	b087      	sub	sp, #28
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	f003 031f 	and.w	r3, r3, #31
 8005286:	2201      	movs	r2, #1
 8005288:	fa02 f303 	lsl.w	r3, r2, r3
 800528c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6a1a      	ldr	r2, [r3, #32]
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	43db      	mvns	r3, r3
 8005296:	401a      	ands	r2, r3
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6a1a      	ldr	r2, [r3, #32]
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	f003 031f 	and.w	r3, r3, #31
 80052a6:	6879      	ldr	r1, [r7, #4]
 80052a8:	fa01 f303 	lsl.w	r3, r1, r3
 80052ac:	431a      	orrs	r2, r3
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	621a      	str	r2, [r3, #32]
}
 80052b2:	bf00      	nop
 80052b4:	371c      	adds	r7, #28
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
	...

080052c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d101      	bne.n	80052d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052d4:	2302      	movs	r3, #2
 80052d6:	e054      	b.n	8005382 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2202      	movs	r2, #2
 80052e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a24      	ldr	r2, [pc, #144]	@ (8005390 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d108      	bne.n	8005314 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005308:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	4313      	orrs	r3, r2
 8005312:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800531a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	4313      	orrs	r3, r2
 8005324:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a17      	ldr	r2, [pc, #92]	@ (8005390 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d00e      	beq.n	8005356 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005340:	d009      	beq.n	8005356 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a13      	ldr	r2, [pc, #76]	@ (8005394 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d004      	beq.n	8005356 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a11      	ldr	r2, [pc, #68]	@ (8005398 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d10c      	bne.n	8005370 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800535c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	68ba      	ldr	r2, [r7, #8]
 8005364:	4313      	orrs	r3, r2
 8005366:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68ba      	ldr	r2, [r7, #8]
 800536e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3714      	adds	r7, #20
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	40012c00 	.word	0x40012c00
 8005394:	40000400 	.word	0x40000400
 8005398:	40014000 	.word	0x40014000

0800539c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80053a6:	2300      	movs	r3, #0
 80053a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d101      	bne.n	80053b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80053b4:	2302      	movs	r3, #2
 80053b6:	e060      	b.n	800547a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	4313      	orrs	r3, r2
 80053da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	4313      	orrs	r3, r2
 8005404:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	695b      	ldr	r3, [r3, #20]
 8005410:	4313      	orrs	r3, r2
 8005412:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800541e:	4313      	orrs	r3, r2
 8005420:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	699b      	ldr	r3, [r3, #24]
 800542c:	041b      	lsls	r3, r3, #16
 800542e:	4313      	orrs	r3, r2
 8005430:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a14      	ldr	r2, [pc, #80]	@ (8005488 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d115      	bne.n	8005468 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005446:	051b      	lsls	r3, r3, #20
 8005448:	4313      	orrs	r3, r2
 800544a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	69db      	ldr	r3, [r3, #28]
 8005456:	4313      	orrs	r3, r2
 8005458:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	6a1b      	ldr	r3, [r3, #32]
 8005464:	4313      	orrs	r3, r2
 8005466:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3714      	adds	r7, #20
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop
 8005488:	40012c00 	.word	0x40012c00

0800548c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005494:	bf00      	nop
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054a8:	bf00      	nop
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80054bc:	bf00      	nop
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d101      	bne.n	80054da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e040      	b.n	800555c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d106      	bne.n	80054f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f7fb fbce 	bl	8000c8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2224      	movs	r2, #36	@ 0x24
 80054f4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f022 0201 	bic.w	r2, r2, #1
 8005504:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800550a:	2b00      	cmp	r3, #0
 800550c:	d002      	beq.n	8005514 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 fb38 	bl	8005b84 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 f8af 	bl	8005678 <UART_SetConfig>
 800551a:	4603      	mov	r3, r0
 800551c:	2b01      	cmp	r3, #1
 800551e:	d101      	bne.n	8005524 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e01b      	b.n	800555c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	685a      	ldr	r2, [r3, #4]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005532:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	689a      	ldr	r2, [r3, #8]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005542:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f042 0201 	orr.w	r2, r2, #1
 8005552:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 fbb7 	bl	8005cc8 <UART_CheckIdleState>
 800555a:	4603      	mov	r3, r0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3708      	adds	r7, #8
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b08a      	sub	sp, #40	@ 0x28
 8005568:	af02      	add	r7, sp, #8
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	603b      	str	r3, [r7, #0]
 8005570:	4613      	mov	r3, r2
 8005572:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005578:	2b20      	cmp	r3, #32
 800557a:	d177      	bne.n	800566c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d002      	beq.n	8005588 <HAL_UART_Transmit+0x24>
 8005582:	88fb      	ldrh	r3, [r7, #6]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d101      	bne.n	800558c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e070      	b.n	800566e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2221      	movs	r2, #33	@ 0x21
 8005598:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800559a:	f7fb fcf1 	bl	8000f80 <HAL_GetTick>
 800559e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	88fa      	ldrh	r2, [r7, #6]
 80055a4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	88fa      	ldrh	r2, [r7, #6]
 80055ac:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055b8:	d108      	bne.n	80055cc <HAL_UART_Transmit+0x68>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d104      	bne.n	80055cc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80055c2:	2300      	movs	r3, #0
 80055c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	61bb      	str	r3, [r7, #24]
 80055ca:	e003      	b.n	80055d4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055d0:	2300      	movs	r3, #0
 80055d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80055d4:	e02f      	b.n	8005636 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	9300      	str	r3, [sp, #0]
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	2200      	movs	r2, #0
 80055de:	2180      	movs	r1, #128	@ 0x80
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f000 fc19 	bl	8005e18 <UART_WaitOnFlagUntilTimeout>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d004      	beq.n	80055f6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2220      	movs	r2, #32
 80055f0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e03b      	b.n	800566e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d10b      	bne.n	8005614 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	881a      	ldrh	r2, [r3, #0]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005608:	b292      	uxth	r2, r2
 800560a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	3302      	adds	r3, #2
 8005610:	61bb      	str	r3, [r7, #24]
 8005612:	e007      	b.n	8005624 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	781a      	ldrb	r2, [r3, #0]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	3301      	adds	r3, #1
 8005622:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800562a:	b29b      	uxth	r3, r3
 800562c:	3b01      	subs	r3, #1
 800562e:	b29a      	uxth	r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800563c:	b29b      	uxth	r3, r3
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1c9      	bne.n	80055d6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	9300      	str	r3, [sp, #0]
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	2200      	movs	r2, #0
 800564a:	2140      	movs	r1, #64	@ 0x40
 800564c:	68f8      	ldr	r0, [r7, #12]
 800564e:	f000 fbe3 	bl	8005e18 <UART_WaitOnFlagUntilTimeout>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d004      	beq.n	8005662 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2220      	movs	r2, #32
 800565c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e005      	b.n	800566e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2220      	movs	r2, #32
 8005666:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005668:	2300      	movs	r3, #0
 800566a:	e000      	b.n	800566e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800566c:	2302      	movs	r3, #2
  }
}
 800566e:	4618      	mov	r0, r3
 8005670:	3720      	adds	r7, #32
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
	...

08005678 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005678:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800567c:	b08a      	sub	sp, #40	@ 0x28
 800567e:	af00      	add	r7, sp, #0
 8005680:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005682:	2300      	movs	r3, #0
 8005684:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	689a      	ldr	r2, [r3, #8]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	691b      	ldr	r3, [r3, #16]
 8005690:	431a      	orrs	r2, r3
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	431a      	orrs	r2, r3
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	69db      	ldr	r3, [r3, #28]
 800569c:	4313      	orrs	r3, r2
 800569e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	4ba5      	ldr	r3, [pc, #660]	@ (800593c <UART_SetConfig+0x2c4>)
 80056a8:	4013      	ands	r3, r2
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	6812      	ldr	r2, [r2, #0]
 80056ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80056b0:	430b      	orrs	r3, r1
 80056b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	68da      	ldr	r2, [r3, #12]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	430a      	orrs	r2, r1
 80056c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	699b      	ldr	r3, [r3, #24]
 80056ce:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a9a      	ldr	r2, [pc, #616]	@ (8005940 <UART_SetConfig+0x2c8>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d004      	beq.n	80056e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6a1b      	ldr	r3, [r3, #32]
 80056de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056e0:	4313      	orrs	r3, r2
 80056e2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056f4:	430a      	orrs	r2, r1
 80056f6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a91      	ldr	r2, [pc, #580]	@ (8005944 <UART_SetConfig+0x2cc>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d126      	bne.n	8005750 <UART_SetConfig+0xd8>
 8005702:	4b91      	ldr	r3, [pc, #580]	@ (8005948 <UART_SetConfig+0x2d0>)
 8005704:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005708:	f003 0303 	and.w	r3, r3, #3
 800570c:	2b03      	cmp	r3, #3
 800570e:	d81b      	bhi.n	8005748 <UART_SetConfig+0xd0>
 8005710:	a201      	add	r2, pc, #4	@ (adr r2, 8005718 <UART_SetConfig+0xa0>)
 8005712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005716:	bf00      	nop
 8005718:	08005729 	.word	0x08005729
 800571c:	08005739 	.word	0x08005739
 8005720:	08005731 	.word	0x08005731
 8005724:	08005741 	.word	0x08005741
 8005728:	2301      	movs	r3, #1
 800572a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800572e:	e0d6      	b.n	80058de <UART_SetConfig+0x266>
 8005730:	2302      	movs	r3, #2
 8005732:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005736:	e0d2      	b.n	80058de <UART_SetConfig+0x266>
 8005738:	2304      	movs	r3, #4
 800573a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800573e:	e0ce      	b.n	80058de <UART_SetConfig+0x266>
 8005740:	2308      	movs	r3, #8
 8005742:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005746:	e0ca      	b.n	80058de <UART_SetConfig+0x266>
 8005748:	2310      	movs	r3, #16
 800574a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800574e:	e0c6      	b.n	80058de <UART_SetConfig+0x266>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a7d      	ldr	r2, [pc, #500]	@ (800594c <UART_SetConfig+0x2d4>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d138      	bne.n	80057cc <UART_SetConfig+0x154>
 800575a:	4b7b      	ldr	r3, [pc, #492]	@ (8005948 <UART_SetConfig+0x2d0>)
 800575c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005760:	f003 030c 	and.w	r3, r3, #12
 8005764:	2b0c      	cmp	r3, #12
 8005766:	d82d      	bhi.n	80057c4 <UART_SetConfig+0x14c>
 8005768:	a201      	add	r2, pc, #4	@ (adr r2, 8005770 <UART_SetConfig+0xf8>)
 800576a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800576e:	bf00      	nop
 8005770:	080057a5 	.word	0x080057a5
 8005774:	080057c5 	.word	0x080057c5
 8005778:	080057c5 	.word	0x080057c5
 800577c:	080057c5 	.word	0x080057c5
 8005780:	080057b5 	.word	0x080057b5
 8005784:	080057c5 	.word	0x080057c5
 8005788:	080057c5 	.word	0x080057c5
 800578c:	080057c5 	.word	0x080057c5
 8005790:	080057ad 	.word	0x080057ad
 8005794:	080057c5 	.word	0x080057c5
 8005798:	080057c5 	.word	0x080057c5
 800579c:	080057c5 	.word	0x080057c5
 80057a0:	080057bd 	.word	0x080057bd
 80057a4:	2300      	movs	r3, #0
 80057a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057aa:	e098      	b.n	80058de <UART_SetConfig+0x266>
 80057ac:	2302      	movs	r3, #2
 80057ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057b2:	e094      	b.n	80058de <UART_SetConfig+0x266>
 80057b4:	2304      	movs	r3, #4
 80057b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057ba:	e090      	b.n	80058de <UART_SetConfig+0x266>
 80057bc:	2308      	movs	r3, #8
 80057be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057c2:	e08c      	b.n	80058de <UART_SetConfig+0x266>
 80057c4:	2310      	movs	r3, #16
 80057c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057ca:	e088      	b.n	80058de <UART_SetConfig+0x266>
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a5f      	ldr	r2, [pc, #380]	@ (8005950 <UART_SetConfig+0x2d8>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d125      	bne.n	8005822 <UART_SetConfig+0x1aa>
 80057d6:	4b5c      	ldr	r3, [pc, #368]	@ (8005948 <UART_SetConfig+0x2d0>)
 80057d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057dc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80057e0:	2b30      	cmp	r3, #48	@ 0x30
 80057e2:	d016      	beq.n	8005812 <UART_SetConfig+0x19a>
 80057e4:	2b30      	cmp	r3, #48	@ 0x30
 80057e6:	d818      	bhi.n	800581a <UART_SetConfig+0x1a2>
 80057e8:	2b20      	cmp	r3, #32
 80057ea:	d00a      	beq.n	8005802 <UART_SetConfig+0x18a>
 80057ec:	2b20      	cmp	r3, #32
 80057ee:	d814      	bhi.n	800581a <UART_SetConfig+0x1a2>
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d002      	beq.n	80057fa <UART_SetConfig+0x182>
 80057f4:	2b10      	cmp	r3, #16
 80057f6:	d008      	beq.n	800580a <UART_SetConfig+0x192>
 80057f8:	e00f      	b.n	800581a <UART_SetConfig+0x1a2>
 80057fa:	2300      	movs	r3, #0
 80057fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005800:	e06d      	b.n	80058de <UART_SetConfig+0x266>
 8005802:	2302      	movs	r3, #2
 8005804:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005808:	e069      	b.n	80058de <UART_SetConfig+0x266>
 800580a:	2304      	movs	r3, #4
 800580c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005810:	e065      	b.n	80058de <UART_SetConfig+0x266>
 8005812:	2308      	movs	r3, #8
 8005814:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005818:	e061      	b.n	80058de <UART_SetConfig+0x266>
 800581a:	2310      	movs	r3, #16
 800581c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005820:	e05d      	b.n	80058de <UART_SetConfig+0x266>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a4b      	ldr	r2, [pc, #300]	@ (8005954 <UART_SetConfig+0x2dc>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d125      	bne.n	8005878 <UART_SetConfig+0x200>
 800582c:	4b46      	ldr	r3, [pc, #280]	@ (8005948 <UART_SetConfig+0x2d0>)
 800582e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005832:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005836:	2bc0      	cmp	r3, #192	@ 0xc0
 8005838:	d016      	beq.n	8005868 <UART_SetConfig+0x1f0>
 800583a:	2bc0      	cmp	r3, #192	@ 0xc0
 800583c:	d818      	bhi.n	8005870 <UART_SetConfig+0x1f8>
 800583e:	2b80      	cmp	r3, #128	@ 0x80
 8005840:	d00a      	beq.n	8005858 <UART_SetConfig+0x1e0>
 8005842:	2b80      	cmp	r3, #128	@ 0x80
 8005844:	d814      	bhi.n	8005870 <UART_SetConfig+0x1f8>
 8005846:	2b00      	cmp	r3, #0
 8005848:	d002      	beq.n	8005850 <UART_SetConfig+0x1d8>
 800584a:	2b40      	cmp	r3, #64	@ 0x40
 800584c:	d008      	beq.n	8005860 <UART_SetConfig+0x1e8>
 800584e:	e00f      	b.n	8005870 <UART_SetConfig+0x1f8>
 8005850:	2300      	movs	r3, #0
 8005852:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005856:	e042      	b.n	80058de <UART_SetConfig+0x266>
 8005858:	2302      	movs	r3, #2
 800585a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800585e:	e03e      	b.n	80058de <UART_SetConfig+0x266>
 8005860:	2304      	movs	r3, #4
 8005862:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005866:	e03a      	b.n	80058de <UART_SetConfig+0x266>
 8005868:	2308      	movs	r3, #8
 800586a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800586e:	e036      	b.n	80058de <UART_SetConfig+0x266>
 8005870:	2310      	movs	r3, #16
 8005872:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005876:	e032      	b.n	80058de <UART_SetConfig+0x266>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a30      	ldr	r2, [pc, #192]	@ (8005940 <UART_SetConfig+0x2c8>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d12a      	bne.n	80058d8 <UART_SetConfig+0x260>
 8005882:	4b31      	ldr	r3, [pc, #196]	@ (8005948 <UART_SetConfig+0x2d0>)
 8005884:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005888:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800588c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005890:	d01a      	beq.n	80058c8 <UART_SetConfig+0x250>
 8005892:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005896:	d81b      	bhi.n	80058d0 <UART_SetConfig+0x258>
 8005898:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800589c:	d00c      	beq.n	80058b8 <UART_SetConfig+0x240>
 800589e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058a2:	d815      	bhi.n	80058d0 <UART_SetConfig+0x258>
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d003      	beq.n	80058b0 <UART_SetConfig+0x238>
 80058a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058ac:	d008      	beq.n	80058c0 <UART_SetConfig+0x248>
 80058ae:	e00f      	b.n	80058d0 <UART_SetConfig+0x258>
 80058b0:	2300      	movs	r3, #0
 80058b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058b6:	e012      	b.n	80058de <UART_SetConfig+0x266>
 80058b8:	2302      	movs	r3, #2
 80058ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058be:	e00e      	b.n	80058de <UART_SetConfig+0x266>
 80058c0:	2304      	movs	r3, #4
 80058c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058c6:	e00a      	b.n	80058de <UART_SetConfig+0x266>
 80058c8:	2308      	movs	r3, #8
 80058ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058ce:	e006      	b.n	80058de <UART_SetConfig+0x266>
 80058d0:	2310      	movs	r3, #16
 80058d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058d6:	e002      	b.n	80058de <UART_SetConfig+0x266>
 80058d8:	2310      	movs	r3, #16
 80058da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a17      	ldr	r2, [pc, #92]	@ (8005940 <UART_SetConfig+0x2c8>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	f040 808b 	bne.w	8005a00 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80058ea:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80058ee:	2b08      	cmp	r3, #8
 80058f0:	d834      	bhi.n	800595c <UART_SetConfig+0x2e4>
 80058f2:	a201      	add	r2, pc, #4	@ (adr r2, 80058f8 <UART_SetConfig+0x280>)
 80058f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f8:	0800591d 	.word	0x0800591d
 80058fc:	0800595d 	.word	0x0800595d
 8005900:	08005925 	.word	0x08005925
 8005904:	0800595d 	.word	0x0800595d
 8005908:	0800592b 	.word	0x0800592b
 800590c:	0800595d 	.word	0x0800595d
 8005910:	0800595d 	.word	0x0800595d
 8005914:	0800595d 	.word	0x0800595d
 8005918:	08005933 	.word	0x08005933
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800591c:	f7fd ff74 	bl	8003808 <HAL_RCC_GetPCLK1Freq>
 8005920:	61f8      	str	r0, [r7, #28]
        break;
 8005922:	e021      	b.n	8005968 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005924:	4b0c      	ldr	r3, [pc, #48]	@ (8005958 <UART_SetConfig+0x2e0>)
 8005926:	61fb      	str	r3, [r7, #28]
        break;
 8005928:	e01e      	b.n	8005968 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800592a:	f7fd fed5 	bl	80036d8 <HAL_RCC_GetSysClockFreq>
 800592e:	61f8      	str	r0, [r7, #28]
        break;
 8005930:	e01a      	b.n	8005968 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005932:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005936:	61fb      	str	r3, [r7, #28]
        break;
 8005938:	e016      	b.n	8005968 <UART_SetConfig+0x2f0>
 800593a:	bf00      	nop
 800593c:	efff69f3 	.word	0xefff69f3
 8005940:	40008000 	.word	0x40008000
 8005944:	40013800 	.word	0x40013800
 8005948:	40021000 	.word	0x40021000
 800594c:	40004400 	.word	0x40004400
 8005950:	40004800 	.word	0x40004800
 8005954:	40004c00 	.word	0x40004c00
 8005958:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800595c:	2300      	movs	r3, #0
 800595e:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005966:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	2b00      	cmp	r3, #0
 800596c:	f000 80fa 	beq.w	8005b64 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	685a      	ldr	r2, [r3, #4]
 8005974:	4613      	mov	r3, r2
 8005976:	005b      	lsls	r3, r3, #1
 8005978:	4413      	add	r3, r2
 800597a:	69fa      	ldr	r2, [r7, #28]
 800597c:	429a      	cmp	r2, r3
 800597e:	d305      	bcc.n	800598c <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005986:	69fa      	ldr	r2, [r7, #28]
 8005988:	429a      	cmp	r2, r3
 800598a:	d903      	bls.n	8005994 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005992:	e0e7      	b.n	8005b64 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	2200      	movs	r2, #0
 8005998:	461c      	mov	r4, r3
 800599a:	4615      	mov	r5, r2
 800599c:	f04f 0200 	mov.w	r2, #0
 80059a0:	f04f 0300 	mov.w	r3, #0
 80059a4:	022b      	lsls	r3, r5, #8
 80059a6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80059aa:	0222      	lsls	r2, r4, #8
 80059ac:	68f9      	ldr	r1, [r7, #12]
 80059ae:	6849      	ldr	r1, [r1, #4]
 80059b0:	0849      	lsrs	r1, r1, #1
 80059b2:	2000      	movs	r0, #0
 80059b4:	4688      	mov	r8, r1
 80059b6:	4681      	mov	r9, r0
 80059b8:	eb12 0a08 	adds.w	sl, r2, r8
 80059bc:	eb43 0b09 	adc.w	fp, r3, r9
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	603b      	str	r3, [r7, #0]
 80059c8:	607a      	str	r2, [r7, #4]
 80059ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059ce:	4650      	mov	r0, sl
 80059d0:	4659      	mov	r1, fp
 80059d2:	f7fa fc5d 	bl	8000290 <__aeabi_uldivmod>
 80059d6:	4602      	mov	r2, r0
 80059d8:	460b      	mov	r3, r1
 80059da:	4613      	mov	r3, r2
 80059dc:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059e4:	d308      	bcc.n	80059f8 <UART_SetConfig+0x380>
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059ec:	d204      	bcs.n	80059f8 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	69ba      	ldr	r2, [r7, #24]
 80059f4:	60da      	str	r2, [r3, #12]
 80059f6:	e0b5      	b.n	8005b64 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80059fe:	e0b1      	b.n	8005b64 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	69db      	ldr	r3, [r3, #28]
 8005a04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a08:	d15d      	bne.n	8005ac6 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8005a0a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005a0e:	2b08      	cmp	r3, #8
 8005a10:	d827      	bhi.n	8005a62 <UART_SetConfig+0x3ea>
 8005a12:	a201      	add	r2, pc, #4	@ (adr r2, 8005a18 <UART_SetConfig+0x3a0>)
 8005a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a18:	08005a3d 	.word	0x08005a3d
 8005a1c:	08005a45 	.word	0x08005a45
 8005a20:	08005a4d 	.word	0x08005a4d
 8005a24:	08005a63 	.word	0x08005a63
 8005a28:	08005a53 	.word	0x08005a53
 8005a2c:	08005a63 	.word	0x08005a63
 8005a30:	08005a63 	.word	0x08005a63
 8005a34:	08005a63 	.word	0x08005a63
 8005a38:	08005a5b 	.word	0x08005a5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a3c:	f7fd fee4 	bl	8003808 <HAL_RCC_GetPCLK1Freq>
 8005a40:	61f8      	str	r0, [r7, #28]
        break;
 8005a42:	e014      	b.n	8005a6e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a44:	f7fd fef6 	bl	8003834 <HAL_RCC_GetPCLK2Freq>
 8005a48:	61f8      	str	r0, [r7, #28]
        break;
 8005a4a:	e010      	b.n	8005a6e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a4c:	4b4c      	ldr	r3, [pc, #304]	@ (8005b80 <UART_SetConfig+0x508>)
 8005a4e:	61fb      	str	r3, [r7, #28]
        break;
 8005a50:	e00d      	b.n	8005a6e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a52:	f7fd fe41 	bl	80036d8 <HAL_RCC_GetSysClockFreq>
 8005a56:	61f8      	str	r0, [r7, #28]
        break;
 8005a58:	e009      	b.n	8005a6e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a5e:	61fb      	str	r3, [r7, #28]
        break;
 8005a60:	e005      	b.n	8005a6e <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8005a62:	2300      	movs	r3, #0
 8005a64:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005a6c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d077      	beq.n	8005b64 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	005a      	lsls	r2, r3, #1
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	085b      	lsrs	r3, r3, #1
 8005a7e:	441a      	add	r2, r3
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a88:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	2b0f      	cmp	r3, #15
 8005a8e:	d916      	bls.n	8005abe <UART_SetConfig+0x446>
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a96:	d212      	bcs.n	8005abe <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	f023 030f 	bic.w	r3, r3, #15
 8005aa0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	085b      	lsrs	r3, r3, #1
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	f003 0307 	and.w	r3, r3, #7
 8005aac:	b29a      	uxth	r2, r3
 8005aae:	8afb      	ldrh	r3, [r7, #22]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	8afa      	ldrh	r2, [r7, #22]
 8005aba:	60da      	str	r2, [r3, #12]
 8005abc:	e052      	b.n	8005b64 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005ac4:	e04e      	b.n	8005b64 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ac6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005aca:	2b08      	cmp	r3, #8
 8005acc:	d827      	bhi.n	8005b1e <UART_SetConfig+0x4a6>
 8005ace:	a201      	add	r2, pc, #4	@ (adr r2, 8005ad4 <UART_SetConfig+0x45c>)
 8005ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad4:	08005af9 	.word	0x08005af9
 8005ad8:	08005b01 	.word	0x08005b01
 8005adc:	08005b09 	.word	0x08005b09
 8005ae0:	08005b1f 	.word	0x08005b1f
 8005ae4:	08005b0f 	.word	0x08005b0f
 8005ae8:	08005b1f 	.word	0x08005b1f
 8005aec:	08005b1f 	.word	0x08005b1f
 8005af0:	08005b1f 	.word	0x08005b1f
 8005af4:	08005b17 	.word	0x08005b17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005af8:	f7fd fe86 	bl	8003808 <HAL_RCC_GetPCLK1Freq>
 8005afc:	61f8      	str	r0, [r7, #28]
        break;
 8005afe:	e014      	b.n	8005b2a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b00:	f7fd fe98 	bl	8003834 <HAL_RCC_GetPCLK2Freq>
 8005b04:	61f8      	str	r0, [r7, #28]
        break;
 8005b06:	e010      	b.n	8005b2a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b08:	4b1d      	ldr	r3, [pc, #116]	@ (8005b80 <UART_SetConfig+0x508>)
 8005b0a:	61fb      	str	r3, [r7, #28]
        break;
 8005b0c:	e00d      	b.n	8005b2a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b0e:	f7fd fde3 	bl	80036d8 <HAL_RCC_GetSysClockFreq>
 8005b12:	61f8      	str	r0, [r7, #28]
        break;
 8005b14:	e009      	b.n	8005b2a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b1a:	61fb      	str	r3, [r7, #28]
        break;
 8005b1c:	e005      	b.n	8005b2a <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005b28:	bf00      	nop
    }

    if (pclk != 0U)
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d019      	beq.n	8005b64 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	085a      	lsrs	r2, r3, #1
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	441a      	add	r2, r3
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b42:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	2b0f      	cmp	r3, #15
 8005b48:	d909      	bls.n	8005b5e <UART_SetConfig+0x4e6>
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b50:	d205      	bcs.n	8005b5e <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	b29a      	uxth	r2, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	60da      	str	r2, [r3, #12]
 8005b5c:	e002      	b.n	8005b64 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2200      	movs	r2, #0
 8005b68:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005b70:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3728      	adds	r7, #40	@ 0x28
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b7e:	bf00      	nop
 8005b80:	00f42400 	.word	0x00f42400

08005b84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b90:	f003 0308 	and.w	r3, r3, #8
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00a      	beq.n	8005bae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	430a      	orrs	r2, r1
 8005bac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bb2:	f003 0301 	and.w	r3, r3, #1
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00a      	beq.n	8005bd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	430a      	orrs	r2, r1
 8005bce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bd4:	f003 0302 	and.w	r3, r3, #2
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d00a      	beq.n	8005bf2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	430a      	orrs	r2, r1
 8005bf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bf6:	f003 0304 	and.w	r3, r3, #4
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00a      	beq.n	8005c14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	430a      	orrs	r2, r1
 8005c12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c18:	f003 0310 	and.w	r3, r3, #16
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d00a      	beq.n	8005c36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	430a      	orrs	r2, r1
 8005c34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c3a:	f003 0320 	and.w	r3, r3, #32
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00a      	beq.n	8005c58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	430a      	orrs	r2, r1
 8005c56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d01a      	beq.n	8005c9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	430a      	orrs	r2, r1
 8005c78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c82:	d10a      	bne.n	8005c9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	430a      	orrs	r2, r1
 8005c98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d00a      	beq.n	8005cbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	430a      	orrs	r2, r1
 8005cba:	605a      	str	r2, [r3, #4]
  }
}
 8005cbc:	bf00      	nop
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b098      	sub	sp, #96	@ 0x60
 8005ccc:	af02      	add	r7, sp, #8
 8005cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005cd8:	f7fb f952 	bl	8000f80 <HAL_GetTick>
 8005cdc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0308 	and.w	r3, r3, #8
 8005ce8:	2b08      	cmp	r3, #8
 8005cea:	d12e      	bne.n	8005d4a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005cf0:	9300      	str	r3, [sp, #0]
 8005cf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 f88c 	bl	8005e18 <UART_WaitOnFlagUntilTimeout>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d021      	beq.n	8005d4a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d0e:	e853 3f00 	ldrex	r3, [r3]
 8005d12:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	461a      	mov	r2, r3
 8005d22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d24:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d26:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d28:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d2c:	e841 2300 	strex	r3, r2, [r1]
 8005d30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d1e6      	bne.n	8005d06 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2220      	movs	r2, #32
 8005d3c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e062      	b.n	8005e10 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 0304 	and.w	r3, r3, #4
 8005d54:	2b04      	cmp	r3, #4
 8005d56:	d149      	bne.n	8005dec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d58:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005d5c:	9300      	str	r3, [sp, #0]
 8005d5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d60:	2200      	movs	r2, #0
 8005d62:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 f856 	bl	8005e18 <UART_WaitOnFlagUntilTimeout>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d03c      	beq.n	8005dec <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d7a:	e853 3f00 	ldrex	r3, [r3]
 8005d7e:	623b      	str	r3, [r7, #32]
   return(result);
 8005d80:	6a3b      	ldr	r3, [r7, #32]
 8005d82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d90:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d92:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d94:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d98:	e841 2300 	strex	r3, r2, [r1]
 8005d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d1e6      	bne.n	8005d72 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	3308      	adds	r3, #8
 8005daa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	e853 3f00 	ldrex	r3, [r3]
 8005db2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f023 0301 	bic.w	r3, r3, #1
 8005dba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	3308      	adds	r3, #8
 8005dc2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005dc4:	61fa      	str	r2, [r7, #28]
 8005dc6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc8:	69b9      	ldr	r1, [r7, #24]
 8005dca:	69fa      	ldr	r2, [r7, #28]
 8005dcc:	e841 2300 	strex	r3, r2, [r1]
 8005dd0:	617b      	str	r3, [r7, #20]
   return(result);
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d1e5      	bne.n	8005da4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2220      	movs	r2, #32
 8005ddc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005de8:	2303      	movs	r3, #3
 8005dea:	e011      	b.n	8005e10 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2220      	movs	r2, #32
 8005df0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2220      	movs	r2, #32
 8005df6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005e0e:	2300      	movs	r3, #0
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3758      	adds	r7, #88	@ 0x58
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	603b      	str	r3, [r7, #0]
 8005e24:	4613      	mov	r3, r2
 8005e26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e28:	e049      	b.n	8005ebe <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e30:	d045      	beq.n	8005ebe <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e32:	f7fb f8a5 	bl	8000f80 <HAL_GetTick>
 8005e36:	4602      	mov	r2, r0
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	69ba      	ldr	r2, [r7, #24]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d302      	bcc.n	8005e48 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d101      	bne.n	8005e4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	e048      	b.n	8005ede <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 0304 	and.w	r3, r3, #4
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d031      	beq.n	8005ebe <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	69db      	ldr	r3, [r3, #28]
 8005e60:	f003 0308 	and.w	r3, r3, #8
 8005e64:	2b08      	cmp	r3, #8
 8005e66:	d110      	bne.n	8005e8a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2208      	movs	r2, #8
 8005e6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e70:	68f8      	ldr	r0, [r7, #12]
 8005e72:	f000 f838 	bl	8005ee6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2208      	movs	r2, #8
 8005e7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e029      	b.n	8005ede <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	69db      	ldr	r3, [r3, #28]
 8005e90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e98:	d111      	bne.n	8005ebe <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005ea2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	f000 f81e 	bl	8005ee6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2220      	movs	r2, #32
 8005eae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	e00f      	b.n	8005ede <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	69da      	ldr	r2, [r3, #28]
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	68ba      	ldr	r2, [r7, #8]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	bf0c      	ite	eq
 8005ece:	2301      	moveq	r3, #1
 8005ed0:	2300      	movne	r3, #0
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	79fb      	ldrb	r3, [r7, #7]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d0a6      	beq.n	8005e2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3710      	adds	r7, #16
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}

08005ee6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ee6:	b480      	push	{r7}
 8005ee8:	b095      	sub	sp, #84	@ 0x54
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ef6:	e853 3f00 	ldrex	r3, [r3]
 8005efa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005efe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	461a      	mov	r2, r3
 8005f0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f0e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f10:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005f12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f14:	e841 2300 	strex	r3, r2, [r1]
 8005f18:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d1e6      	bne.n	8005eee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	3308      	adds	r3, #8
 8005f26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f28:	6a3b      	ldr	r3, [r7, #32]
 8005f2a:	e853 3f00 	ldrex	r3, [r3]
 8005f2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	f023 0301 	bic.w	r3, r3, #1
 8005f36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	3308      	adds	r3, #8
 8005f3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f40:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f48:	e841 2300 	strex	r3, r2, [r1]
 8005f4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d1e5      	bne.n	8005f20 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d118      	bne.n	8005f8e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	e853 3f00 	ldrex	r3, [r3]
 8005f68:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	f023 0310 	bic.w	r3, r3, #16
 8005f70:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	461a      	mov	r2, r3
 8005f78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f7a:	61bb      	str	r3, [r7, #24]
 8005f7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f7e:	6979      	ldr	r1, [r7, #20]
 8005f80:	69ba      	ldr	r2, [r7, #24]
 8005f82:	e841 2300 	strex	r3, r2, [r1]
 8005f86:	613b      	str	r3, [r7, #16]
   return(result);
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1e6      	bne.n	8005f5c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2220      	movs	r2, #32
 8005f92:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005fa2:	bf00      	nop
 8005fa4:	3754      	adds	r7, #84	@ 0x54
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
	...

08005fb0 <sniprintf>:
 8005fb0:	b40c      	push	{r2, r3}
 8005fb2:	b530      	push	{r4, r5, lr}
 8005fb4:	4b17      	ldr	r3, [pc, #92]	@ (8006014 <sniprintf+0x64>)
 8005fb6:	1e0c      	subs	r4, r1, #0
 8005fb8:	681d      	ldr	r5, [r3, #0]
 8005fba:	b09d      	sub	sp, #116	@ 0x74
 8005fbc:	da08      	bge.n	8005fd0 <sniprintf+0x20>
 8005fbe:	238b      	movs	r3, #139	@ 0x8b
 8005fc0:	602b      	str	r3, [r5, #0]
 8005fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8005fc6:	b01d      	add	sp, #116	@ 0x74
 8005fc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005fcc:	b002      	add	sp, #8
 8005fce:	4770      	bx	lr
 8005fd0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005fd4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005fd8:	bf14      	ite	ne
 8005fda:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005fde:	4623      	moveq	r3, r4
 8005fe0:	9304      	str	r3, [sp, #16]
 8005fe2:	9307      	str	r3, [sp, #28]
 8005fe4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005fe8:	9002      	str	r0, [sp, #8]
 8005fea:	9006      	str	r0, [sp, #24]
 8005fec:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005ff0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005ff2:	ab21      	add	r3, sp, #132	@ 0x84
 8005ff4:	a902      	add	r1, sp, #8
 8005ff6:	4628      	mov	r0, r5
 8005ff8:	9301      	str	r3, [sp, #4]
 8005ffa:	f000 f995 	bl	8006328 <_svfiprintf_r>
 8005ffe:	1c43      	adds	r3, r0, #1
 8006000:	bfbc      	itt	lt
 8006002:	238b      	movlt	r3, #139	@ 0x8b
 8006004:	602b      	strlt	r3, [r5, #0]
 8006006:	2c00      	cmp	r4, #0
 8006008:	d0dd      	beq.n	8005fc6 <sniprintf+0x16>
 800600a:	9b02      	ldr	r3, [sp, #8]
 800600c:	2200      	movs	r2, #0
 800600e:	701a      	strb	r2, [r3, #0]
 8006010:	e7d9      	b.n	8005fc6 <sniprintf+0x16>
 8006012:	bf00      	nop
 8006014:	2000000c 	.word	0x2000000c

08006018 <memset>:
 8006018:	4402      	add	r2, r0
 800601a:	4603      	mov	r3, r0
 800601c:	4293      	cmp	r3, r2
 800601e:	d100      	bne.n	8006022 <memset+0xa>
 8006020:	4770      	bx	lr
 8006022:	f803 1b01 	strb.w	r1, [r3], #1
 8006026:	e7f9      	b.n	800601c <memset+0x4>

08006028 <__errno>:
 8006028:	4b01      	ldr	r3, [pc, #4]	@ (8006030 <__errno+0x8>)
 800602a:	6818      	ldr	r0, [r3, #0]
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop
 8006030:	2000000c 	.word	0x2000000c

08006034 <__libc_init_array>:
 8006034:	b570      	push	{r4, r5, r6, lr}
 8006036:	4d0d      	ldr	r5, [pc, #52]	@ (800606c <__libc_init_array+0x38>)
 8006038:	4c0d      	ldr	r4, [pc, #52]	@ (8006070 <__libc_init_array+0x3c>)
 800603a:	1b64      	subs	r4, r4, r5
 800603c:	10a4      	asrs	r4, r4, #2
 800603e:	2600      	movs	r6, #0
 8006040:	42a6      	cmp	r6, r4
 8006042:	d109      	bne.n	8006058 <__libc_init_array+0x24>
 8006044:	4d0b      	ldr	r5, [pc, #44]	@ (8006074 <__libc_init_array+0x40>)
 8006046:	4c0c      	ldr	r4, [pc, #48]	@ (8006078 <__libc_init_array+0x44>)
 8006048:	f000 fc66 	bl	8006918 <_init>
 800604c:	1b64      	subs	r4, r4, r5
 800604e:	10a4      	asrs	r4, r4, #2
 8006050:	2600      	movs	r6, #0
 8006052:	42a6      	cmp	r6, r4
 8006054:	d105      	bne.n	8006062 <__libc_init_array+0x2e>
 8006056:	bd70      	pop	{r4, r5, r6, pc}
 8006058:	f855 3b04 	ldr.w	r3, [r5], #4
 800605c:	4798      	blx	r3
 800605e:	3601      	adds	r6, #1
 8006060:	e7ee      	b.n	8006040 <__libc_init_array+0xc>
 8006062:	f855 3b04 	ldr.w	r3, [r5], #4
 8006066:	4798      	blx	r3
 8006068:	3601      	adds	r6, #1
 800606a:	e7f2      	b.n	8006052 <__libc_init_array+0x1e>
 800606c:	080069bc 	.word	0x080069bc
 8006070:	080069bc 	.word	0x080069bc
 8006074:	080069bc 	.word	0x080069bc
 8006078:	080069c0 	.word	0x080069c0

0800607c <__retarget_lock_acquire_recursive>:
 800607c:	4770      	bx	lr

0800607e <__retarget_lock_release_recursive>:
 800607e:	4770      	bx	lr

08006080 <_free_r>:
 8006080:	b538      	push	{r3, r4, r5, lr}
 8006082:	4605      	mov	r5, r0
 8006084:	2900      	cmp	r1, #0
 8006086:	d041      	beq.n	800610c <_free_r+0x8c>
 8006088:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800608c:	1f0c      	subs	r4, r1, #4
 800608e:	2b00      	cmp	r3, #0
 8006090:	bfb8      	it	lt
 8006092:	18e4      	addlt	r4, r4, r3
 8006094:	f000 f8e0 	bl	8006258 <__malloc_lock>
 8006098:	4a1d      	ldr	r2, [pc, #116]	@ (8006110 <_free_r+0x90>)
 800609a:	6813      	ldr	r3, [r2, #0]
 800609c:	b933      	cbnz	r3, 80060ac <_free_r+0x2c>
 800609e:	6063      	str	r3, [r4, #4]
 80060a0:	6014      	str	r4, [r2, #0]
 80060a2:	4628      	mov	r0, r5
 80060a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060a8:	f000 b8dc 	b.w	8006264 <__malloc_unlock>
 80060ac:	42a3      	cmp	r3, r4
 80060ae:	d908      	bls.n	80060c2 <_free_r+0x42>
 80060b0:	6820      	ldr	r0, [r4, #0]
 80060b2:	1821      	adds	r1, r4, r0
 80060b4:	428b      	cmp	r3, r1
 80060b6:	bf01      	itttt	eq
 80060b8:	6819      	ldreq	r1, [r3, #0]
 80060ba:	685b      	ldreq	r3, [r3, #4]
 80060bc:	1809      	addeq	r1, r1, r0
 80060be:	6021      	streq	r1, [r4, #0]
 80060c0:	e7ed      	b.n	800609e <_free_r+0x1e>
 80060c2:	461a      	mov	r2, r3
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	b10b      	cbz	r3, 80060cc <_free_r+0x4c>
 80060c8:	42a3      	cmp	r3, r4
 80060ca:	d9fa      	bls.n	80060c2 <_free_r+0x42>
 80060cc:	6811      	ldr	r1, [r2, #0]
 80060ce:	1850      	adds	r0, r2, r1
 80060d0:	42a0      	cmp	r0, r4
 80060d2:	d10b      	bne.n	80060ec <_free_r+0x6c>
 80060d4:	6820      	ldr	r0, [r4, #0]
 80060d6:	4401      	add	r1, r0
 80060d8:	1850      	adds	r0, r2, r1
 80060da:	4283      	cmp	r3, r0
 80060dc:	6011      	str	r1, [r2, #0]
 80060de:	d1e0      	bne.n	80060a2 <_free_r+0x22>
 80060e0:	6818      	ldr	r0, [r3, #0]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	6053      	str	r3, [r2, #4]
 80060e6:	4408      	add	r0, r1
 80060e8:	6010      	str	r0, [r2, #0]
 80060ea:	e7da      	b.n	80060a2 <_free_r+0x22>
 80060ec:	d902      	bls.n	80060f4 <_free_r+0x74>
 80060ee:	230c      	movs	r3, #12
 80060f0:	602b      	str	r3, [r5, #0]
 80060f2:	e7d6      	b.n	80060a2 <_free_r+0x22>
 80060f4:	6820      	ldr	r0, [r4, #0]
 80060f6:	1821      	adds	r1, r4, r0
 80060f8:	428b      	cmp	r3, r1
 80060fa:	bf04      	itt	eq
 80060fc:	6819      	ldreq	r1, [r3, #0]
 80060fe:	685b      	ldreq	r3, [r3, #4]
 8006100:	6063      	str	r3, [r4, #4]
 8006102:	bf04      	itt	eq
 8006104:	1809      	addeq	r1, r1, r0
 8006106:	6021      	streq	r1, [r4, #0]
 8006108:	6054      	str	r4, [r2, #4]
 800610a:	e7ca      	b.n	80060a2 <_free_r+0x22>
 800610c:	bd38      	pop	{r3, r4, r5, pc}
 800610e:	bf00      	nop
 8006110:	2000034c 	.word	0x2000034c

08006114 <sbrk_aligned>:
 8006114:	b570      	push	{r4, r5, r6, lr}
 8006116:	4e0f      	ldr	r6, [pc, #60]	@ (8006154 <sbrk_aligned+0x40>)
 8006118:	460c      	mov	r4, r1
 800611a:	6831      	ldr	r1, [r6, #0]
 800611c:	4605      	mov	r5, r0
 800611e:	b911      	cbnz	r1, 8006126 <sbrk_aligned+0x12>
 8006120:	f000 fba6 	bl	8006870 <_sbrk_r>
 8006124:	6030      	str	r0, [r6, #0]
 8006126:	4621      	mov	r1, r4
 8006128:	4628      	mov	r0, r5
 800612a:	f000 fba1 	bl	8006870 <_sbrk_r>
 800612e:	1c43      	adds	r3, r0, #1
 8006130:	d103      	bne.n	800613a <sbrk_aligned+0x26>
 8006132:	f04f 34ff 	mov.w	r4, #4294967295
 8006136:	4620      	mov	r0, r4
 8006138:	bd70      	pop	{r4, r5, r6, pc}
 800613a:	1cc4      	adds	r4, r0, #3
 800613c:	f024 0403 	bic.w	r4, r4, #3
 8006140:	42a0      	cmp	r0, r4
 8006142:	d0f8      	beq.n	8006136 <sbrk_aligned+0x22>
 8006144:	1a21      	subs	r1, r4, r0
 8006146:	4628      	mov	r0, r5
 8006148:	f000 fb92 	bl	8006870 <_sbrk_r>
 800614c:	3001      	adds	r0, #1
 800614e:	d1f2      	bne.n	8006136 <sbrk_aligned+0x22>
 8006150:	e7ef      	b.n	8006132 <sbrk_aligned+0x1e>
 8006152:	bf00      	nop
 8006154:	20000348 	.word	0x20000348

08006158 <_malloc_r>:
 8006158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800615c:	1ccd      	adds	r5, r1, #3
 800615e:	f025 0503 	bic.w	r5, r5, #3
 8006162:	3508      	adds	r5, #8
 8006164:	2d0c      	cmp	r5, #12
 8006166:	bf38      	it	cc
 8006168:	250c      	movcc	r5, #12
 800616a:	2d00      	cmp	r5, #0
 800616c:	4606      	mov	r6, r0
 800616e:	db01      	blt.n	8006174 <_malloc_r+0x1c>
 8006170:	42a9      	cmp	r1, r5
 8006172:	d904      	bls.n	800617e <_malloc_r+0x26>
 8006174:	230c      	movs	r3, #12
 8006176:	6033      	str	r3, [r6, #0]
 8006178:	2000      	movs	r0, #0
 800617a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800617e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006254 <_malloc_r+0xfc>
 8006182:	f000 f869 	bl	8006258 <__malloc_lock>
 8006186:	f8d8 3000 	ldr.w	r3, [r8]
 800618a:	461c      	mov	r4, r3
 800618c:	bb44      	cbnz	r4, 80061e0 <_malloc_r+0x88>
 800618e:	4629      	mov	r1, r5
 8006190:	4630      	mov	r0, r6
 8006192:	f7ff ffbf 	bl	8006114 <sbrk_aligned>
 8006196:	1c43      	adds	r3, r0, #1
 8006198:	4604      	mov	r4, r0
 800619a:	d158      	bne.n	800624e <_malloc_r+0xf6>
 800619c:	f8d8 4000 	ldr.w	r4, [r8]
 80061a0:	4627      	mov	r7, r4
 80061a2:	2f00      	cmp	r7, #0
 80061a4:	d143      	bne.n	800622e <_malloc_r+0xd6>
 80061a6:	2c00      	cmp	r4, #0
 80061a8:	d04b      	beq.n	8006242 <_malloc_r+0xea>
 80061aa:	6823      	ldr	r3, [r4, #0]
 80061ac:	4639      	mov	r1, r7
 80061ae:	4630      	mov	r0, r6
 80061b0:	eb04 0903 	add.w	r9, r4, r3
 80061b4:	f000 fb5c 	bl	8006870 <_sbrk_r>
 80061b8:	4581      	cmp	r9, r0
 80061ba:	d142      	bne.n	8006242 <_malloc_r+0xea>
 80061bc:	6821      	ldr	r1, [r4, #0]
 80061be:	1a6d      	subs	r5, r5, r1
 80061c0:	4629      	mov	r1, r5
 80061c2:	4630      	mov	r0, r6
 80061c4:	f7ff ffa6 	bl	8006114 <sbrk_aligned>
 80061c8:	3001      	adds	r0, #1
 80061ca:	d03a      	beq.n	8006242 <_malloc_r+0xea>
 80061cc:	6823      	ldr	r3, [r4, #0]
 80061ce:	442b      	add	r3, r5
 80061d0:	6023      	str	r3, [r4, #0]
 80061d2:	f8d8 3000 	ldr.w	r3, [r8]
 80061d6:	685a      	ldr	r2, [r3, #4]
 80061d8:	bb62      	cbnz	r2, 8006234 <_malloc_r+0xdc>
 80061da:	f8c8 7000 	str.w	r7, [r8]
 80061de:	e00f      	b.n	8006200 <_malloc_r+0xa8>
 80061e0:	6822      	ldr	r2, [r4, #0]
 80061e2:	1b52      	subs	r2, r2, r5
 80061e4:	d420      	bmi.n	8006228 <_malloc_r+0xd0>
 80061e6:	2a0b      	cmp	r2, #11
 80061e8:	d917      	bls.n	800621a <_malloc_r+0xc2>
 80061ea:	1961      	adds	r1, r4, r5
 80061ec:	42a3      	cmp	r3, r4
 80061ee:	6025      	str	r5, [r4, #0]
 80061f0:	bf18      	it	ne
 80061f2:	6059      	strne	r1, [r3, #4]
 80061f4:	6863      	ldr	r3, [r4, #4]
 80061f6:	bf08      	it	eq
 80061f8:	f8c8 1000 	streq.w	r1, [r8]
 80061fc:	5162      	str	r2, [r4, r5]
 80061fe:	604b      	str	r3, [r1, #4]
 8006200:	4630      	mov	r0, r6
 8006202:	f000 f82f 	bl	8006264 <__malloc_unlock>
 8006206:	f104 000b 	add.w	r0, r4, #11
 800620a:	1d23      	adds	r3, r4, #4
 800620c:	f020 0007 	bic.w	r0, r0, #7
 8006210:	1ac2      	subs	r2, r0, r3
 8006212:	bf1c      	itt	ne
 8006214:	1a1b      	subne	r3, r3, r0
 8006216:	50a3      	strne	r3, [r4, r2]
 8006218:	e7af      	b.n	800617a <_malloc_r+0x22>
 800621a:	6862      	ldr	r2, [r4, #4]
 800621c:	42a3      	cmp	r3, r4
 800621e:	bf0c      	ite	eq
 8006220:	f8c8 2000 	streq.w	r2, [r8]
 8006224:	605a      	strne	r2, [r3, #4]
 8006226:	e7eb      	b.n	8006200 <_malloc_r+0xa8>
 8006228:	4623      	mov	r3, r4
 800622a:	6864      	ldr	r4, [r4, #4]
 800622c:	e7ae      	b.n	800618c <_malloc_r+0x34>
 800622e:	463c      	mov	r4, r7
 8006230:	687f      	ldr	r7, [r7, #4]
 8006232:	e7b6      	b.n	80061a2 <_malloc_r+0x4a>
 8006234:	461a      	mov	r2, r3
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	42a3      	cmp	r3, r4
 800623a:	d1fb      	bne.n	8006234 <_malloc_r+0xdc>
 800623c:	2300      	movs	r3, #0
 800623e:	6053      	str	r3, [r2, #4]
 8006240:	e7de      	b.n	8006200 <_malloc_r+0xa8>
 8006242:	230c      	movs	r3, #12
 8006244:	6033      	str	r3, [r6, #0]
 8006246:	4630      	mov	r0, r6
 8006248:	f000 f80c 	bl	8006264 <__malloc_unlock>
 800624c:	e794      	b.n	8006178 <_malloc_r+0x20>
 800624e:	6005      	str	r5, [r0, #0]
 8006250:	e7d6      	b.n	8006200 <_malloc_r+0xa8>
 8006252:	bf00      	nop
 8006254:	2000034c 	.word	0x2000034c

08006258 <__malloc_lock>:
 8006258:	4801      	ldr	r0, [pc, #4]	@ (8006260 <__malloc_lock+0x8>)
 800625a:	f7ff bf0f 	b.w	800607c <__retarget_lock_acquire_recursive>
 800625e:	bf00      	nop
 8006260:	20000344 	.word	0x20000344

08006264 <__malloc_unlock>:
 8006264:	4801      	ldr	r0, [pc, #4]	@ (800626c <__malloc_unlock+0x8>)
 8006266:	f7ff bf0a 	b.w	800607e <__retarget_lock_release_recursive>
 800626a:	bf00      	nop
 800626c:	20000344 	.word	0x20000344

08006270 <__ssputs_r>:
 8006270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006274:	688e      	ldr	r6, [r1, #8]
 8006276:	461f      	mov	r7, r3
 8006278:	42be      	cmp	r6, r7
 800627a:	680b      	ldr	r3, [r1, #0]
 800627c:	4682      	mov	sl, r0
 800627e:	460c      	mov	r4, r1
 8006280:	4690      	mov	r8, r2
 8006282:	d82d      	bhi.n	80062e0 <__ssputs_r+0x70>
 8006284:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006288:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800628c:	d026      	beq.n	80062dc <__ssputs_r+0x6c>
 800628e:	6965      	ldr	r5, [r4, #20]
 8006290:	6909      	ldr	r1, [r1, #16]
 8006292:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006296:	eba3 0901 	sub.w	r9, r3, r1
 800629a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800629e:	1c7b      	adds	r3, r7, #1
 80062a0:	444b      	add	r3, r9
 80062a2:	106d      	asrs	r5, r5, #1
 80062a4:	429d      	cmp	r5, r3
 80062a6:	bf38      	it	cc
 80062a8:	461d      	movcc	r5, r3
 80062aa:	0553      	lsls	r3, r2, #21
 80062ac:	d527      	bpl.n	80062fe <__ssputs_r+0x8e>
 80062ae:	4629      	mov	r1, r5
 80062b0:	f7ff ff52 	bl	8006158 <_malloc_r>
 80062b4:	4606      	mov	r6, r0
 80062b6:	b360      	cbz	r0, 8006312 <__ssputs_r+0xa2>
 80062b8:	6921      	ldr	r1, [r4, #16]
 80062ba:	464a      	mov	r2, r9
 80062bc:	f000 fae8 	bl	8006890 <memcpy>
 80062c0:	89a3      	ldrh	r3, [r4, #12]
 80062c2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80062c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062ca:	81a3      	strh	r3, [r4, #12]
 80062cc:	6126      	str	r6, [r4, #16]
 80062ce:	6165      	str	r5, [r4, #20]
 80062d0:	444e      	add	r6, r9
 80062d2:	eba5 0509 	sub.w	r5, r5, r9
 80062d6:	6026      	str	r6, [r4, #0]
 80062d8:	60a5      	str	r5, [r4, #8]
 80062da:	463e      	mov	r6, r7
 80062dc:	42be      	cmp	r6, r7
 80062de:	d900      	bls.n	80062e2 <__ssputs_r+0x72>
 80062e0:	463e      	mov	r6, r7
 80062e2:	6820      	ldr	r0, [r4, #0]
 80062e4:	4632      	mov	r2, r6
 80062e6:	4641      	mov	r1, r8
 80062e8:	f000 faa8 	bl	800683c <memmove>
 80062ec:	68a3      	ldr	r3, [r4, #8]
 80062ee:	1b9b      	subs	r3, r3, r6
 80062f0:	60a3      	str	r3, [r4, #8]
 80062f2:	6823      	ldr	r3, [r4, #0]
 80062f4:	4433      	add	r3, r6
 80062f6:	6023      	str	r3, [r4, #0]
 80062f8:	2000      	movs	r0, #0
 80062fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062fe:	462a      	mov	r2, r5
 8006300:	f000 fad4 	bl	80068ac <_realloc_r>
 8006304:	4606      	mov	r6, r0
 8006306:	2800      	cmp	r0, #0
 8006308:	d1e0      	bne.n	80062cc <__ssputs_r+0x5c>
 800630a:	6921      	ldr	r1, [r4, #16]
 800630c:	4650      	mov	r0, sl
 800630e:	f7ff feb7 	bl	8006080 <_free_r>
 8006312:	230c      	movs	r3, #12
 8006314:	f8ca 3000 	str.w	r3, [sl]
 8006318:	89a3      	ldrh	r3, [r4, #12]
 800631a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800631e:	81a3      	strh	r3, [r4, #12]
 8006320:	f04f 30ff 	mov.w	r0, #4294967295
 8006324:	e7e9      	b.n	80062fa <__ssputs_r+0x8a>
	...

08006328 <_svfiprintf_r>:
 8006328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800632c:	4698      	mov	r8, r3
 800632e:	898b      	ldrh	r3, [r1, #12]
 8006330:	061b      	lsls	r3, r3, #24
 8006332:	b09d      	sub	sp, #116	@ 0x74
 8006334:	4607      	mov	r7, r0
 8006336:	460d      	mov	r5, r1
 8006338:	4614      	mov	r4, r2
 800633a:	d510      	bpl.n	800635e <_svfiprintf_r+0x36>
 800633c:	690b      	ldr	r3, [r1, #16]
 800633e:	b973      	cbnz	r3, 800635e <_svfiprintf_r+0x36>
 8006340:	2140      	movs	r1, #64	@ 0x40
 8006342:	f7ff ff09 	bl	8006158 <_malloc_r>
 8006346:	6028      	str	r0, [r5, #0]
 8006348:	6128      	str	r0, [r5, #16]
 800634a:	b930      	cbnz	r0, 800635a <_svfiprintf_r+0x32>
 800634c:	230c      	movs	r3, #12
 800634e:	603b      	str	r3, [r7, #0]
 8006350:	f04f 30ff 	mov.w	r0, #4294967295
 8006354:	b01d      	add	sp, #116	@ 0x74
 8006356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800635a:	2340      	movs	r3, #64	@ 0x40
 800635c:	616b      	str	r3, [r5, #20]
 800635e:	2300      	movs	r3, #0
 8006360:	9309      	str	r3, [sp, #36]	@ 0x24
 8006362:	2320      	movs	r3, #32
 8006364:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006368:	f8cd 800c 	str.w	r8, [sp, #12]
 800636c:	2330      	movs	r3, #48	@ 0x30
 800636e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800650c <_svfiprintf_r+0x1e4>
 8006372:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006376:	f04f 0901 	mov.w	r9, #1
 800637a:	4623      	mov	r3, r4
 800637c:	469a      	mov	sl, r3
 800637e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006382:	b10a      	cbz	r2, 8006388 <_svfiprintf_r+0x60>
 8006384:	2a25      	cmp	r2, #37	@ 0x25
 8006386:	d1f9      	bne.n	800637c <_svfiprintf_r+0x54>
 8006388:	ebba 0b04 	subs.w	fp, sl, r4
 800638c:	d00b      	beq.n	80063a6 <_svfiprintf_r+0x7e>
 800638e:	465b      	mov	r3, fp
 8006390:	4622      	mov	r2, r4
 8006392:	4629      	mov	r1, r5
 8006394:	4638      	mov	r0, r7
 8006396:	f7ff ff6b 	bl	8006270 <__ssputs_r>
 800639a:	3001      	adds	r0, #1
 800639c:	f000 80a7 	beq.w	80064ee <_svfiprintf_r+0x1c6>
 80063a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80063a2:	445a      	add	r2, fp
 80063a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80063a6:	f89a 3000 	ldrb.w	r3, [sl]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	f000 809f 	beq.w	80064ee <_svfiprintf_r+0x1c6>
 80063b0:	2300      	movs	r3, #0
 80063b2:	f04f 32ff 	mov.w	r2, #4294967295
 80063b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063ba:	f10a 0a01 	add.w	sl, sl, #1
 80063be:	9304      	str	r3, [sp, #16]
 80063c0:	9307      	str	r3, [sp, #28]
 80063c2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80063c6:	931a      	str	r3, [sp, #104]	@ 0x68
 80063c8:	4654      	mov	r4, sl
 80063ca:	2205      	movs	r2, #5
 80063cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063d0:	484e      	ldr	r0, [pc, #312]	@ (800650c <_svfiprintf_r+0x1e4>)
 80063d2:	f7f9 ff0d 	bl	80001f0 <memchr>
 80063d6:	9a04      	ldr	r2, [sp, #16]
 80063d8:	b9d8      	cbnz	r0, 8006412 <_svfiprintf_r+0xea>
 80063da:	06d0      	lsls	r0, r2, #27
 80063dc:	bf44      	itt	mi
 80063de:	2320      	movmi	r3, #32
 80063e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80063e4:	0711      	lsls	r1, r2, #28
 80063e6:	bf44      	itt	mi
 80063e8:	232b      	movmi	r3, #43	@ 0x2b
 80063ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80063ee:	f89a 3000 	ldrb.w	r3, [sl]
 80063f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80063f4:	d015      	beq.n	8006422 <_svfiprintf_r+0xfa>
 80063f6:	9a07      	ldr	r2, [sp, #28]
 80063f8:	4654      	mov	r4, sl
 80063fa:	2000      	movs	r0, #0
 80063fc:	f04f 0c0a 	mov.w	ip, #10
 8006400:	4621      	mov	r1, r4
 8006402:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006406:	3b30      	subs	r3, #48	@ 0x30
 8006408:	2b09      	cmp	r3, #9
 800640a:	d94b      	bls.n	80064a4 <_svfiprintf_r+0x17c>
 800640c:	b1b0      	cbz	r0, 800643c <_svfiprintf_r+0x114>
 800640e:	9207      	str	r2, [sp, #28]
 8006410:	e014      	b.n	800643c <_svfiprintf_r+0x114>
 8006412:	eba0 0308 	sub.w	r3, r0, r8
 8006416:	fa09 f303 	lsl.w	r3, r9, r3
 800641a:	4313      	orrs	r3, r2
 800641c:	9304      	str	r3, [sp, #16]
 800641e:	46a2      	mov	sl, r4
 8006420:	e7d2      	b.n	80063c8 <_svfiprintf_r+0xa0>
 8006422:	9b03      	ldr	r3, [sp, #12]
 8006424:	1d19      	adds	r1, r3, #4
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	9103      	str	r1, [sp, #12]
 800642a:	2b00      	cmp	r3, #0
 800642c:	bfbb      	ittet	lt
 800642e:	425b      	neglt	r3, r3
 8006430:	f042 0202 	orrlt.w	r2, r2, #2
 8006434:	9307      	strge	r3, [sp, #28]
 8006436:	9307      	strlt	r3, [sp, #28]
 8006438:	bfb8      	it	lt
 800643a:	9204      	strlt	r2, [sp, #16]
 800643c:	7823      	ldrb	r3, [r4, #0]
 800643e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006440:	d10a      	bne.n	8006458 <_svfiprintf_r+0x130>
 8006442:	7863      	ldrb	r3, [r4, #1]
 8006444:	2b2a      	cmp	r3, #42	@ 0x2a
 8006446:	d132      	bne.n	80064ae <_svfiprintf_r+0x186>
 8006448:	9b03      	ldr	r3, [sp, #12]
 800644a:	1d1a      	adds	r2, r3, #4
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	9203      	str	r2, [sp, #12]
 8006450:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006454:	3402      	adds	r4, #2
 8006456:	9305      	str	r3, [sp, #20]
 8006458:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800651c <_svfiprintf_r+0x1f4>
 800645c:	7821      	ldrb	r1, [r4, #0]
 800645e:	2203      	movs	r2, #3
 8006460:	4650      	mov	r0, sl
 8006462:	f7f9 fec5 	bl	80001f0 <memchr>
 8006466:	b138      	cbz	r0, 8006478 <_svfiprintf_r+0x150>
 8006468:	9b04      	ldr	r3, [sp, #16]
 800646a:	eba0 000a 	sub.w	r0, r0, sl
 800646e:	2240      	movs	r2, #64	@ 0x40
 8006470:	4082      	lsls	r2, r0
 8006472:	4313      	orrs	r3, r2
 8006474:	3401      	adds	r4, #1
 8006476:	9304      	str	r3, [sp, #16]
 8006478:	f814 1b01 	ldrb.w	r1, [r4], #1
 800647c:	4824      	ldr	r0, [pc, #144]	@ (8006510 <_svfiprintf_r+0x1e8>)
 800647e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006482:	2206      	movs	r2, #6
 8006484:	f7f9 feb4 	bl	80001f0 <memchr>
 8006488:	2800      	cmp	r0, #0
 800648a:	d036      	beq.n	80064fa <_svfiprintf_r+0x1d2>
 800648c:	4b21      	ldr	r3, [pc, #132]	@ (8006514 <_svfiprintf_r+0x1ec>)
 800648e:	bb1b      	cbnz	r3, 80064d8 <_svfiprintf_r+0x1b0>
 8006490:	9b03      	ldr	r3, [sp, #12]
 8006492:	3307      	adds	r3, #7
 8006494:	f023 0307 	bic.w	r3, r3, #7
 8006498:	3308      	adds	r3, #8
 800649a:	9303      	str	r3, [sp, #12]
 800649c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800649e:	4433      	add	r3, r6
 80064a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80064a2:	e76a      	b.n	800637a <_svfiprintf_r+0x52>
 80064a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80064a8:	460c      	mov	r4, r1
 80064aa:	2001      	movs	r0, #1
 80064ac:	e7a8      	b.n	8006400 <_svfiprintf_r+0xd8>
 80064ae:	2300      	movs	r3, #0
 80064b0:	3401      	adds	r4, #1
 80064b2:	9305      	str	r3, [sp, #20]
 80064b4:	4619      	mov	r1, r3
 80064b6:	f04f 0c0a 	mov.w	ip, #10
 80064ba:	4620      	mov	r0, r4
 80064bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064c0:	3a30      	subs	r2, #48	@ 0x30
 80064c2:	2a09      	cmp	r2, #9
 80064c4:	d903      	bls.n	80064ce <_svfiprintf_r+0x1a6>
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d0c6      	beq.n	8006458 <_svfiprintf_r+0x130>
 80064ca:	9105      	str	r1, [sp, #20]
 80064cc:	e7c4      	b.n	8006458 <_svfiprintf_r+0x130>
 80064ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80064d2:	4604      	mov	r4, r0
 80064d4:	2301      	movs	r3, #1
 80064d6:	e7f0      	b.n	80064ba <_svfiprintf_r+0x192>
 80064d8:	ab03      	add	r3, sp, #12
 80064da:	9300      	str	r3, [sp, #0]
 80064dc:	462a      	mov	r2, r5
 80064de:	4b0e      	ldr	r3, [pc, #56]	@ (8006518 <_svfiprintf_r+0x1f0>)
 80064e0:	a904      	add	r1, sp, #16
 80064e2:	4638      	mov	r0, r7
 80064e4:	f3af 8000 	nop.w
 80064e8:	1c42      	adds	r2, r0, #1
 80064ea:	4606      	mov	r6, r0
 80064ec:	d1d6      	bne.n	800649c <_svfiprintf_r+0x174>
 80064ee:	89ab      	ldrh	r3, [r5, #12]
 80064f0:	065b      	lsls	r3, r3, #25
 80064f2:	f53f af2d 	bmi.w	8006350 <_svfiprintf_r+0x28>
 80064f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80064f8:	e72c      	b.n	8006354 <_svfiprintf_r+0x2c>
 80064fa:	ab03      	add	r3, sp, #12
 80064fc:	9300      	str	r3, [sp, #0]
 80064fe:	462a      	mov	r2, r5
 8006500:	4b05      	ldr	r3, [pc, #20]	@ (8006518 <_svfiprintf_r+0x1f0>)
 8006502:	a904      	add	r1, sp, #16
 8006504:	4638      	mov	r0, r7
 8006506:	f000 f879 	bl	80065fc <_printf_i>
 800650a:	e7ed      	b.n	80064e8 <_svfiprintf_r+0x1c0>
 800650c:	08006980 	.word	0x08006980
 8006510:	0800698a 	.word	0x0800698a
 8006514:	00000000 	.word	0x00000000
 8006518:	08006271 	.word	0x08006271
 800651c:	08006986 	.word	0x08006986

08006520 <_printf_common>:
 8006520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006524:	4616      	mov	r6, r2
 8006526:	4698      	mov	r8, r3
 8006528:	688a      	ldr	r2, [r1, #8]
 800652a:	690b      	ldr	r3, [r1, #16]
 800652c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006530:	4293      	cmp	r3, r2
 8006532:	bfb8      	it	lt
 8006534:	4613      	movlt	r3, r2
 8006536:	6033      	str	r3, [r6, #0]
 8006538:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800653c:	4607      	mov	r7, r0
 800653e:	460c      	mov	r4, r1
 8006540:	b10a      	cbz	r2, 8006546 <_printf_common+0x26>
 8006542:	3301      	adds	r3, #1
 8006544:	6033      	str	r3, [r6, #0]
 8006546:	6823      	ldr	r3, [r4, #0]
 8006548:	0699      	lsls	r1, r3, #26
 800654a:	bf42      	ittt	mi
 800654c:	6833      	ldrmi	r3, [r6, #0]
 800654e:	3302      	addmi	r3, #2
 8006550:	6033      	strmi	r3, [r6, #0]
 8006552:	6825      	ldr	r5, [r4, #0]
 8006554:	f015 0506 	ands.w	r5, r5, #6
 8006558:	d106      	bne.n	8006568 <_printf_common+0x48>
 800655a:	f104 0a19 	add.w	sl, r4, #25
 800655e:	68e3      	ldr	r3, [r4, #12]
 8006560:	6832      	ldr	r2, [r6, #0]
 8006562:	1a9b      	subs	r3, r3, r2
 8006564:	42ab      	cmp	r3, r5
 8006566:	dc26      	bgt.n	80065b6 <_printf_common+0x96>
 8006568:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800656c:	6822      	ldr	r2, [r4, #0]
 800656e:	3b00      	subs	r3, #0
 8006570:	bf18      	it	ne
 8006572:	2301      	movne	r3, #1
 8006574:	0692      	lsls	r2, r2, #26
 8006576:	d42b      	bmi.n	80065d0 <_printf_common+0xb0>
 8006578:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800657c:	4641      	mov	r1, r8
 800657e:	4638      	mov	r0, r7
 8006580:	47c8      	blx	r9
 8006582:	3001      	adds	r0, #1
 8006584:	d01e      	beq.n	80065c4 <_printf_common+0xa4>
 8006586:	6823      	ldr	r3, [r4, #0]
 8006588:	6922      	ldr	r2, [r4, #16]
 800658a:	f003 0306 	and.w	r3, r3, #6
 800658e:	2b04      	cmp	r3, #4
 8006590:	bf02      	ittt	eq
 8006592:	68e5      	ldreq	r5, [r4, #12]
 8006594:	6833      	ldreq	r3, [r6, #0]
 8006596:	1aed      	subeq	r5, r5, r3
 8006598:	68a3      	ldr	r3, [r4, #8]
 800659a:	bf0c      	ite	eq
 800659c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065a0:	2500      	movne	r5, #0
 80065a2:	4293      	cmp	r3, r2
 80065a4:	bfc4      	itt	gt
 80065a6:	1a9b      	subgt	r3, r3, r2
 80065a8:	18ed      	addgt	r5, r5, r3
 80065aa:	2600      	movs	r6, #0
 80065ac:	341a      	adds	r4, #26
 80065ae:	42b5      	cmp	r5, r6
 80065b0:	d11a      	bne.n	80065e8 <_printf_common+0xc8>
 80065b2:	2000      	movs	r0, #0
 80065b4:	e008      	b.n	80065c8 <_printf_common+0xa8>
 80065b6:	2301      	movs	r3, #1
 80065b8:	4652      	mov	r2, sl
 80065ba:	4641      	mov	r1, r8
 80065bc:	4638      	mov	r0, r7
 80065be:	47c8      	blx	r9
 80065c0:	3001      	adds	r0, #1
 80065c2:	d103      	bne.n	80065cc <_printf_common+0xac>
 80065c4:	f04f 30ff 	mov.w	r0, #4294967295
 80065c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065cc:	3501      	adds	r5, #1
 80065ce:	e7c6      	b.n	800655e <_printf_common+0x3e>
 80065d0:	18e1      	adds	r1, r4, r3
 80065d2:	1c5a      	adds	r2, r3, #1
 80065d4:	2030      	movs	r0, #48	@ 0x30
 80065d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80065da:	4422      	add	r2, r4
 80065dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80065e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80065e4:	3302      	adds	r3, #2
 80065e6:	e7c7      	b.n	8006578 <_printf_common+0x58>
 80065e8:	2301      	movs	r3, #1
 80065ea:	4622      	mov	r2, r4
 80065ec:	4641      	mov	r1, r8
 80065ee:	4638      	mov	r0, r7
 80065f0:	47c8      	blx	r9
 80065f2:	3001      	adds	r0, #1
 80065f4:	d0e6      	beq.n	80065c4 <_printf_common+0xa4>
 80065f6:	3601      	adds	r6, #1
 80065f8:	e7d9      	b.n	80065ae <_printf_common+0x8e>
	...

080065fc <_printf_i>:
 80065fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006600:	7e0f      	ldrb	r7, [r1, #24]
 8006602:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006604:	2f78      	cmp	r7, #120	@ 0x78
 8006606:	4691      	mov	r9, r2
 8006608:	4680      	mov	r8, r0
 800660a:	460c      	mov	r4, r1
 800660c:	469a      	mov	sl, r3
 800660e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006612:	d807      	bhi.n	8006624 <_printf_i+0x28>
 8006614:	2f62      	cmp	r7, #98	@ 0x62
 8006616:	d80a      	bhi.n	800662e <_printf_i+0x32>
 8006618:	2f00      	cmp	r7, #0
 800661a:	f000 80d2 	beq.w	80067c2 <_printf_i+0x1c6>
 800661e:	2f58      	cmp	r7, #88	@ 0x58
 8006620:	f000 80b9 	beq.w	8006796 <_printf_i+0x19a>
 8006624:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006628:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800662c:	e03a      	b.n	80066a4 <_printf_i+0xa8>
 800662e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006632:	2b15      	cmp	r3, #21
 8006634:	d8f6      	bhi.n	8006624 <_printf_i+0x28>
 8006636:	a101      	add	r1, pc, #4	@ (adr r1, 800663c <_printf_i+0x40>)
 8006638:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800663c:	08006695 	.word	0x08006695
 8006640:	080066a9 	.word	0x080066a9
 8006644:	08006625 	.word	0x08006625
 8006648:	08006625 	.word	0x08006625
 800664c:	08006625 	.word	0x08006625
 8006650:	08006625 	.word	0x08006625
 8006654:	080066a9 	.word	0x080066a9
 8006658:	08006625 	.word	0x08006625
 800665c:	08006625 	.word	0x08006625
 8006660:	08006625 	.word	0x08006625
 8006664:	08006625 	.word	0x08006625
 8006668:	080067a9 	.word	0x080067a9
 800666c:	080066d3 	.word	0x080066d3
 8006670:	08006763 	.word	0x08006763
 8006674:	08006625 	.word	0x08006625
 8006678:	08006625 	.word	0x08006625
 800667c:	080067cb 	.word	0x080067cb
 8006680:	08006625 	.word	0x08006625
 8006684:	080066d3 	.word	0x080066d3
 8006688:	08006625 	.word	0x08006625
 800668c:	08006625 	.word	0x08006625
 8006690:	0800676b 	.word	0x0800676b
 8006694:	6833      	ldr	r3, [r6, #0]
 8006696:	1d1a      	adds	r2, r3, #4
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	6032      	str	r2, [r6, #0]
 800669c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80066a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80066a4:	2301      	movs	r3, #1
 80066a6:	e09d      	b.n	80067e4 <_printf_i+0x1e8>
 80066a8:	6833      	ldr	r3, [r6, #0]
 80066aa:	6820      	ldr	r0, [r4, #0]
 80066ac:	1d19      	adds	r1, r3, #4
 80066ae:	6031      	str	r1, [r6, #0]
 80066b0:	0606      	lsls	r6, r0, #24
 80066b2:	d501      	bpl.n	80066b8 <_printf_i+0xbc>
 80066b4:	681d      	ldr	r5, [r3, #0]
 80066b6:	e003      	b.n	80066c0 <_printf_i+0xc4>
 80066b8:	0645      	lsls	r5, r0, #25
 80066ba:	d5fb      	bpl.n	80066b4 <_printf_i+0xb8>
 80066bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80066c0:	2d00      	cmp	r5, #0
 80066c2:	da03      	bge.n	80066cc <_printf_i+0xd0>
 80066c4:	232d      	movs	r3, #45	@ 0x2d
 80066c6:	426d      	negs	r5, r5
 80066c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066cc:	4859      	ldr	r0, [pc, #356]	@ (8006834 <_printf_i+0x238>)
 80066ce:	230a      	movs	r3, #10
 80066d0:	e011      	b.n	80066f6 <_printf_i+0xfa>
 80066d2:	6821      	ldr	r1, [r4, #0]
 80066d4:	6833      	ldr	r3, [r6, #0]
 80066d6:	0608      	lsls	r0, r1, #24
 80066d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80066dc:	d402      	bmi.n	80066e4 <_printf_i+0xe8>
 80066de:	0649      	lsls	r1, r1, #25
 80066e0:	bf48      	it	mi
 80066e2:	b2ad      	uxthmi	r5, r5
 80066e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80066e6:	4853      	ldr	r0, [pc, #332]	@ (8006834 <_printf_i+0x238>)
 80066e8:	6033      	str	r3, [r6, #0]
 80066ea:	bf14      	ite	ne
 80066ec:	230a      	movne	r3, #10
 80066ee:	2308      	moveq	r3, #8
 80066f0:	2100      	movs	r1, #0
 80066f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80066f6:	6866      	ldr	r6, [r4, #4]
 80066f8:	60a6      	str	r6, [r4, #8]
 80066fa:	2e00      	cmp	r6, #0
 80066fc:	bfa2      	ittt	ge
 80066fe:	6821      	ldrge	r1, [r4, #0]
 8006700:	f021 0104 	bicge.w	r1, r1, #4
 8006704:	6021      	strge	r1, [r4, #0]
 8006706:	b90d      	cbnz	r5, 800670c <_printf_i+0x110>
 8006708:	2e00      	cmp	r6, #0
 800670a:	d04b      	beq.n	80067a4 <_printf_i+0x1a8>
 800670c:	4616      	mov	r6, r2
 800670e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006712:	fb03 5711 	mls	r7, r3, r1, r5
 8006716:	5dc7      	ldrb	r7, [r0, r7]
 8006718:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800671c:	462f      	mov	r7, r5
 800671e:	42bb      	cmp	r3, r7
 8006720:	460d      	mov	r5, r1
 8006722:	d9f4      	bls.n	800670e <_printf_i+0x112>
 8006724:	2b08      	cmp	r3, #8
 8006726:	d10b      	bne.n	8006740 <_printf_i+0x144>
 8006728:	6823      	ldr	r3, [r4, #0]
 800672a:	07df      	lsls	r7, r3, #31
 800672c:	d508      	bpl.n	8006740 <_printf_i+0x144>
 800672e:	6923      	ldr	r3, [r4, #16]
 8006730:	6861      	ldr	r1, [r4, #4]
 8006732:	4299      	cmp	r1, r3
 8006734:	bfde      	ittt	le
 8006736:	2330      	movle	r3, #48	@ 0x30
 8006738:	f806 3c01 	strble.w	r3, [r6, #-1]
 800673c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006740:	1b92      	subs	r2, r2, r6
 8006742:	6122      	str	r2, [r4, #16]
 8006744:	f8cd a000 	str.w	sl, [sp]
 8006748:	464b      	mov	r3, r9
 800674a:	aa03      	add	r2, sp, #12
 800674c:	4621      	mov	r1, r4
 800674e:	4640      	mov	r0, r8
 8006750:	f7ff fee6 	bl	8006520 <_printf_common>
 8006754:	3001      	adds	r0, #1
 8006756:	d14a      	bne.n	80067ee <_printf_i+0x1f2>
 8006758:	f04f 30ff 	mov.w	r0, #4294967295
 800675c:	b004      	add	sp, #16
 800675e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006762:	6823      	ldr	r3, [r4, #0]
 8006764:	f043 0320 	orr.w	r3, r3, #32
 8006768:	6023      	str	r3, [r4, #0]
 800676a:	4833      	ldr	r0, [pc, #204]	@ (8006838 <_printf_i+0x23c>)
 800676c:	2778      	movs	r7, #120	@ 0x78
 800676e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006772:	6823      	ldr	r3, [r4, #0]
 8006774:	6831      	ldr	r1, [r6, #0]
 8006776:	061f      	lsls	r7, r3, #24
 8006778:	f851 5b04 	ldr.w	r5, [r1], #4
 800677c:	d402      	bmi.n	8006784 <_printf_i+0x188>
 800677e:	065f      	lsls	r7, r3, #25
 8006780:	bf48      	it	mi
 8006782:	b2ad      	uxthmi	r5, r5
 8006784:	6031      	str	r1, [r6, #0]
 8006786:	07d9      	lsls	r1, r3, #31
 8006788:	bf44      	itt	mi
 800678a:	f043 0320 	orrmi.w	r3, r3, #32
 800678e:	6023      	strmi	r3, [r4, #0]
 8006790:	b11d      	cbz	r5, 800679a <_printf_i+0x19e>
 8006792:	2310      	movs	r3, #16
 8006794:	e7ac      	b.n	80066f0 <_printf_i+0xf4>
 8006796:	4827      	ldr	r0, [pc, #156]	@ (8006834 <_printf_i+0x238>)
 8006798:	e7e9      	b.n	800676e <_printf_i+0x172>
 800679a:	6823      	ldr	r3, [r4, #0]
 800679c:	f023 0320 	bic.w	r3, r3, #32
 80067a0:	6023      	str	r3, [r4, #0]
 80067a2:	e7f6      	b.n	8006792 <_printf_i+0x196>
 80067a4:	4616      	mov	r6, r2
 80067a6:	e7bd      	b.n	8006724 <_printf_i+0x128>
 80067a8:	6833      	ldr	r3, [r6, #0]
 80067aa:	6825      	ldr	r5, [r4, #0]
 80067ac:	6961      	ldr	r1, [r4, #20]
 80067ae:	1d18      	adds	r0, r3, #4
 80067b0:	6030      	str	r0, [r6, #0]
 80067b2:	062e      	lsls	r6, r5, #24
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	d501      	bpl.n	80067bc <_printf_i+0x1c0>
 80067b8:	6019      	str	r1, [r3, #0]
 80067ba:	e002      	b.n	80067c2 <_printf_i+0x1c6>
 80067bc:	0668      	lsls	r0, r5, #25
 80067be:	d5fb      	bpl.n	80067b8 <_printf_i+0x1bc>
 80067c0:	8019      	strh	r1, [r3, #0]
 80067c2:	2300      	movs	r3, #0
 80067c4:	6123      	str	r3, [r4, #16]
 80067c6:	4616      	mov	r6, r2
 80067c8:	e7bc      	b.n	8006744 <_printf_i+0x148>
 80067ca:	6833      	ldr	r3, [r6, #0]
 80067cc:	1d1a      	adds	r2, r3, #4
 80067ce:	6032      	str	r2, [r6, #0]
 80067d0:	681e      	ldr	r6, [r3, #0]
 80067d2:	6862      	ldr	r2, [r4, #4]
 80067d4:	2100      	movs	r1, #0
 80067d6:	4630      	mov	r0, r6
 80067d8:	f7f9 fd0a 	bl	80001f0 <memchr>
 80067dc:	b108      	cbz	r0, 80067e2 <_printf_i+0x1e6>
 80067de:	1b80      	subs	r0, r0, r6
 80067e0:	6060      	str	r0, [r4, #4]
 80067e2:	6863      	ldr	r3, [r4, #4]
 80067e4:	6123      	str	r3, [r4, #16]
 80067e6:	2300      	movs	r3, #0
 80067e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067ec:	e7aa      	b.n	8006744 <_printf_i+0x148>
 80067ee:	6923      	ldr	r3, [r4, #16]
 80067f0:	4632      	mov	r2, r6
 80067f2:	4649      	mov	r1, r9
 80067f4:	4640      	mov	r0, r8
 80067f6:	47d0      	blx	sl
 80067f8:	3001      	adds	r0, #1
 80067fa:	d0ad      	beq.n	8006758 <_printf_i+0x15c>
 80067fc:	6823      	ldr	r3, [r4, #0]
 80067fe:	079b      	lsls	r3, r3, #30
 8006800:	d413      	bmi.n	800682a <_printf_i+0x22e>
 8006802:	68e0      	ldr	r0, [r4, #12]
 8006804:	9b03      	ldr	r3, [sp, #12]
 8006806:	4298      	cmp	r0, r3
 8006808:	bfb8      	it	lt
 800680a:	4618      	movlt	r0, r3
 800680c:	e7a6      	b.n	800675c <_printf_i+0x160>
 800680e:	2301      	movs	r3, #1
 8006810:	4632      	mov	r2, r6
 8006812:	4649      	mov	r1, r9
 8006814:	4640      	mov	r0, r8
 8006816:	47d0      	blx	sl
 8006818:	3001      	adds	r0, #1
 800681a:	d09d      	beq.n	8006758 <_printf_i+0x15c>
 800681c:	3501      	adds	r5, #1
 800681e:	68e3      	ldr	r3, [r4, #12]
 8006820:	9903      	ldr	r1, [sp, #12]
 8006822:	1a5b      	subs	r3, r3, r1
 8006824:	42ab      	cmp	r3, r5
 8006826:	dcf2      	bgt.n	800680e <_printf_i+0x212>
 8006828:	e7eb      	b.n	8006802 <_printf_i+0x206>
 800682a:	2500      	movs	r5, #0
 800682c:	f104 0619 	add.w	r6, r4, #25
 8006830:	e7f5      	b.n	800681e <_printf_i+0x222>
 8006832:	bf00      	nop
 8006834:	08006991 	.word	0x08006991
 8006838:	080069a2 	.word	0x080069a2

0800683c <memmove>:
 800683c:	4288      	cmp	r0, r1
 800683e:	b510      	push	{r4, lr}
 8006840:	eb01 0402 	add.w	r4, r1, r2
 8006844:	d902      	bls.n	800684c <memmove+0x10>
 8006846:	4284      	cmp	r4, r0
 8006848:	4623      	mov	r3, r4
 800684a:	d807      	bhi.n	800685c <memmove+0x20>
 800684c:	1e43      	subs	r3, r0, #1
 800684e:	42a1      	cmp	r1, r4
 8006850:	d008      	beq.n	8006864 <memmove+0x28>
 8006852:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006856:	f803 2f01 	strb.w	r2, [r3, #1]!
 800685a:	e7f8      	b.n	800684e <memmove+0x12>
 800685c:	4402      	add	r2, r0
 800685e:	4601      	mov	r1, r0
 8006860:	428a      	cmp	r2, r1
 8006862:	d100      	bne.n	8006866 <memmove+0x2a>
 8006864:	bd10      	pop	{r4, pc}
 8006866:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800686a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800686e:	e7f7      	b.n	8006860 <memmove+0x24>

08006870 <_sbrk_r>:
 8006870:	b538      	push	{r3, r4, r5, lr}
 8006872:	4d06      	ldr	r5, [pc, #24]	@ (800688c <_sbrk_r+0x1c>)
 8006874:	2300      	movs	r3, #0
 8006876:	4604      	mov	r4, r0
 8006878:	4608      	mov	r0, r1
 800687a:	602b      	str	r3, [r5, #0]
 800687c:	f7fa faa6 	bl	8000dcc <_sbrk>
 8006880:	1c43      	adds	r3, r0, #1
 8006882:	d102      	bne.n	800688a <_sbrk_r+0x1a>
 8006884:	682b      	ldr	r3, [r5, #0]
 8006886:	b103      	cbz	r3, 800688a <_sbrk_r+0x1a>
 8006888:	6023      	str	r3, [r4, #0]
 800688a:	bd38      	pop	{r3, r4, r5, pc}
 800688c:	20000340 	.word	0x20000340

08006890 <memcpy>:
 8006890:	440a      	add	r2, r1
 8006892:	4291      	cmp	r1, r2
 8006894:	f100 33ff 	add.w	r3, r0, #4294967295
 8006898:	d100      	bne.n	800689c <memcpy+0xc>
 800689a:	4770      	bx	lr
 800689c:	b510      	push	{r4, lr}
 800689e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068a6:	4291      	cmp	r1, r2
 80068a8:	d1f9      	bne.n	800689e <memcpy+0xe>
 80068aa:	bd10      	pop	{r4, pc}

080068ac <_realloc_r>:
 80068ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068b0:	4680      	mov	r8, r0
 80068b2:	4615      	mov	r5, r2
 80068b4:	460c      	mov	r4, r1
 80068b6:	b921      	cbnz	r1, 80068c2 <_realloc_r+0x16>
 80068b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068bc:	4611      	mov	r1, r2
 80068be:	f7ff bc4b 	b.w	8006158 <_malloc_r>
 80068c2:	b92a      	cbnz	r2, 80068d0 <_realloc_r+0x24>
 80068c4:	f7ff fbdc 	bl	8006080 <_free_r>
 80068c8:	2400      	movs	r4, #0
 80068ca:	4620      	mov	r0, r4
 80068cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068d0:	f000 f81a 	bl	8006908 <_malloc_usable_size_r>
 80068d4:	4285      	cmp	r5, r0
 80068d6:	4606      	mov	r6, r0
 80068d8:	d802      	bhi.n	80068e0 <_realloc_r+0x34>
 80068da:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80068de:	d8f4      	bhi.n	80068ca <_realloc_r+0x1e>
 80068e0:	4629      	mov	r1, r5
 80068e2:	4640      	mov	r0, r8
 80068e4:	f7ff fc38 	bl	8006158 <_malloc_r>
 80068e8:	4607      	mov	r7, r0
 80068ea:	2800      	cmp	r0, #0
 80068ec:	d0ec      	beq.n	80068c8 <_realloc_r+0x1c>
 80068ee:	42b5      	cmp	r5, r6
 80068f0:	462a      	mov	r2, r5
 80068f2:	4621      	mov	r1, r4
 80068f4:	bf28      	it	cs
 80068f6:	4632      	movcs	r2, r6
 80068f8:	f7ff ffca 	bl	8006890 <memcpy>
 80068fc:	4621      	mov	r1, r4
 80068fe:	4640      	mov	r0, r8
 8006900:	f7ff fbbe 	bl	8006080 <_free_r>
 8006904:	463c      	mov	r4, r7
 8006906:	e7e0      	b.n	80068ca <_realloc_r+0x1e>

08006908 <_malloc_usable_size_r>:
 8006908:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800690c:	1f18      	subs	r0, r3, #4
 800690e:	2b00      	cmp	r3, #0
 8006910:	bfbc      	itt	lt
 8006912:	580b      	ldrlt	r3, [r1, r0]
 8006914:	18c0      	addlt	r0, r0, r3
 8006916:	4770      	bx	lr

08006918 <_init>:
 8006918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800691a:	bf00      	nop
 800691c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800691e:	bc08      	pop	{r3}
 8006920:	469e      	mov	lr, r3
 8006922:	4770      	bx	lr

08006924 <_fini>:
 8006924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006926:	bf00      	nop
 8006928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800692a:	bc08      	pop	{r3}
 800692c:	469e      	mov	lr, r3
 800692e:	4770      	bx	lr
